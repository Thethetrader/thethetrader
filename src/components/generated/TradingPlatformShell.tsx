import React, { useState, useEffect, useRef } from 'react';
import { getMessages, getSignals, subscribeToMessages, addMessage, uploadImage, addSignal, subscribeToSignals, updateMessageReactions, getMessageReactions, subscribeToMessageReactions, Signal, syncUserId, database } from '../../utils/firebase-setup';
import { ref, onValue, push } from 'firebase/database';
import { addPersonalTrade, getPersonalTrades, deletePersonalTrade, PersonalTrade, listenToPersonalTrades, getUserAccounts, addUserAccount, deleteUserAccount, updateUserAccount, UserAccount } from '../../lib/supabase';
import ProfitLoss from '../ProfitLoss';
import { createClient } from '@supabase/supabase-js';
import { initializeNotifications, notifyNewSignal, notifySignalClosed, areNotificationsAvailable, requestNotificationPermission, sendLocalNotification } from '../../utils/push-notifications';

import { syncProfileImage, getProfileImage, initializeProfile } from '../../utils/profile-manager';
import { updateUserProfile, getUserProfile, getUserProfileByType } from '../../lib/supabase';
import { useStatsSync } from '../../hooks/useStatsSync';
import { useCalendarSync } from '../../hooks/useCalendarSync';
import RumbleTalk from '../RumbleTalk';

// Configuration Supabase
const supabaseUrl = 'https://bamwcozzfshuozsfmjah.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJhbXdjb3p6ZnNodW96c2ZtamFoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxMDM0ODcsImV4cCI6MjA2NTY3OTQ4N30.NWSUKoYLl0oGS-dXf4jhtmLRiSuBSk-0lV3NRHJLvrs';
const supabase = createClient(supabaseUrl, supabaseAnonKey);

export default function TradingPlatformShell() {
  console.log('üöÄ TradingPlatformShell charg√© !');
  
  // Hook pour les stats en temps r√©el synchronis√©es avec l'admin
  const { stats, allSignalsForStats: realTimeSignals, getWeeklyBreakdown: getCalendarWeeklyBreakdown, getTodaySignals: getCalendarTodaySignals, getThisMonthSignals: getCalendarThisMonthSignals } = useStatsSync();
  
  console.log('üìä Stats:', stats);
  console.log('üì° RealTime Signals:', realTimeSignals);
  
  // Hook pour la synchronisation du calendrier
  const { calendarStats, getMonthlyStats: getCalendarMonthlyStats, getWeeklyBreakdown: getCalendarWeeklyBreakdownFromHook } = useCalendarSync();
  
  console.log('üìÖ Calendar Stats:', calendarStats);
  console.log('‚úÖ Tous les hooks charg√©s !');
  
  // D√©finition des channels
  const channels = [
    { id: 'fondamentaux', name: 'fondamentaux', emoji: 'üìö', fullName: 'Fondamentaux' },
    { id: 'letsgooo-model', name: 'letsgooo-model', emoji: 'üöÄ', fullName: 'Letsgooo-model' },
    { id: 'general-chat-2', name: 'general-chat-2', emoji: 'üìà', fullName: 'Indices' },
    { id: 'general-chat-3', name: 'general-chat-3', emoji: 'ü™ô', fullName: 'Crypto' },
    { id: 'general-chat-4', name: 'general-chat-4', emoji: 'üí±', fullName: 'Forex' },
    { id: 'video', name: 'video', emoji: 'üì∫', fullName: 'Livestream' },
    { id: 'journal', name: 'journal', emoji: 'üìì', fullName: 'Journal Perso' },
    { id: 'trading-journal', name: 'trading-journal', emoji: 'üìì', fullName: 'Journal Perso' },
    { id: 'calendrier', name: 'calendrier', emoji: 'üìÖ', fullName: 'Journal Signaux' }
  ];
  
  // Charger les r√©actions depuis localStorage au montage du composant
  useEffect(() => {
    const savedReactions = localStorage.getItem('messageReactions');
    if (savedReactions) {
      try {
        setMessageReactions(JSON.parse(savedReactions));
      } catch (error) {
        console.error('Erreur lors du chargement des r√©actions:', error);
      }
    }
  }, []);
  
  // V√©rifier session Supabase au chargement
  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (session?.user) {
        setUser({ 
          id: session.user.id, 
          email: session.user.email || '' 
        });
        
            // Notifications d√©sactiv√©es sur PWA
            console.log('üîá Notifications d√©sactiv√©es sur PWA');
      }
    });

    // √âcouter les changements d'auth
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, session) => {
      if (session?.user) {
        // Nettoyer les anciennes donn√©es si c'est un nouvel utilisateur
        if (event === 'SIGNED_IN') {
          console.log('üîÑ Nouvel utilisateur connect√©, nettoyage des donn√©es...');
          setCurrentUsername('');
          setSupabaseProfile(null);
          setMessages({});
          setMessageReactions({});
          
        // Notifications d√©sactiv√©es sur PWA
        console.log('üîá Notifications d√©sactiv√©es sur PWA apr√®s connexion');
          
          // Nettoyer les anciennes cl√©s localStorage des autres utilisateurs
          Object.keys(localStorage).forEach(key => {
            if (key.startsWith('userUsername_') && !key.endsWith(`_${session.user.id}`)) {
              localStorage.removeItem(key);
              console.log('üßπ Ancienne cl√© localStorage supprim√©e:', key);
            }
          });
        }
        
        setUser({ 
          id: session.user.id, 
          email: session.user.email || '' 
        });
      } else {
        setUser(null);
        // Nettoyer les √©tats quand l'utilisateur se d√©connecte
        setCurrentUsername('');
        setSupabaseProfile(null);
        setMessages({});
        setMessageReactions({});
        console.log('üßπ √âtats utilisateur nettoy√©s apr√®s d√©connexion');
      }
    });

    return () => subscription.unsubscribe();
  }, []);
  
  // √âtat pour √©viter les envois multiples
  const [isSendingMessage, setIsSendingMessage] = useState(false);
  
  // √âtat pour √©viter les clics multiples sur le calendrier
  const [isCalendarClicking, setIsCalendarClicking] = useState(false);
  
  // √âtat pour les r√©actions aux messages (c√¥t√© utilisateur)
  const [messageReactions, setMessageReactions] = useState<{[messageId: string]: {fire: number, users: string[]}}>({});
  
  // √âtat pour l'utilisateur connect√©
  const [user, setUser] = useState<{id: string, email: string} | null>(null);
  
  // Syst√®me de notifications pour les messages non lus
  const [lastReadTimes, setLastReadTimes] = useState({});

  // √âtat pour les messages non lus par salon
  const [unreadCounts, setUnreadCounts] = useState<{[channelId: string]: number}>({});

  // Fonction callback pour recevoir les changements de messages non lus
  const handleUnreadCountChange = (channelId: string, count: number) => {
    console.log('üìä TradingPlatformShell: Received unread count for', channelId, ':', count);
    setUnreadCounts(prev => ({
      ...prev,
      [channelId]: count
    }));
  };

  const [selectedChannel, setSelectedChannel] = useState({ id: 'general-chat', name: 'general-chat' });

  const [view, setView] = useState<'signals' | 'calendar'>('signals');
  const [mobileView, setMobileView] = useState<'channels' | 'content'>('channels');
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<{[channelId: string]: Array<{id: string, text: string, user: string, timestamp: string, file?: File}>}>({});
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showGifPicker, setShowGifPicker] = useState(false);
  const [showFileUpload, setShowFileUpload] = useState(false);

  // Charger Tawk.to au montage de TradingPlatformShell
  useEffect(() => {
    console.log('üí¨ Chargement Tawk.to pour utilisateur...');
    
    // V√©rifier si d√©j√† charg√©
    if (document.getElementById('tawkto-user-script')) {
      console.log('‚ö†Ô∏è Tawk.to d√©j√† charg√©');
      return;
    }

    // Initialiser Tawk_API
    (window as any).Tawk_API = (window as any).Tawk_API || {};
    (window as any).Tawk_LoadStart = new Date();

    // Cr√©er le script
    const script = document.createElement('script');
    script.async = true;
    script.src = 'https://embed.tawk.to/68ec2d91af8498194f4f9fc1/1j7d940jh';
    script.charset = 'UTF-8';
    script.setAttribute('crossorigin', '*');
    script.id = 'tawkto-user-script';
    
    script.onload = () => {
      console.log('‚úÖ Tawk.to charg√© pour utilisateur');
    };
    
    script.onerror = () => {
      console.error('‚ùå Erreur chargement Tawk.to');
    };

    document.head.appendChild(script);
    
    return () => {
      // Cleanup si besoin
      const scriptElement = document.getElementById('tawkto-user-script');
      if (scriptElement) {
        scriptElement.remove();
      }
    };
  }, []);

  // Charger les comptes depuis localStorage
  // Charger les comptes depuis Supabase au d√©marrage
  useEffect(() => {
    loadAccounts();
  }, []);

  // Sauvegarder les comptes dans localStorage
  // Charger les comptes depuis Supabase
  const loadAccounts = async () => {
    try {
      const accounts = await getUserAccounts();
      if (accounts.length > 0) {
        setTradingAccounts(accounts);
        // S√©lectionner le compte par d√©faut ou le premier
        const defaultAccount = accounts.find(acc => acc.is_default) || accounts[0];
        setSelectedAccount(defaultAccount.account_name);
      } else {
        // Cr√©er le compte principal par d√©faut
        const defaultAccount = await addUserAccount('Compte Principal');
        if (defaultAccount) {
          setTradingAccounts([defaultAccount]);
          setSelectedAccount('Compte Principal');
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur chargement comptes:', error);
      // Fallback vers localStorage
      const savedAccounts = localStorage.getItem('tradingAccounts');
      if (savedAccounts) {
        const accounts = JSON.parse(savedAccounts);
        setTradingAccounts(accounts.map((name: string) => ({ 
          id: `local-${name}`, 
          user_id: 'local', 
          account_name: name, 
          is_default: name === 'Compte Principal',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })));
        setSelectedAccount('Compte Principal');
      }
    }
  };

  // Sauvegarder les comptes dans Supabase
  const saveAccounts = async (accounts: UserAccount[]) => {
    setTradingAccounts(accounts);
    // Sauvegarder aussi en localStorage comme backup
    localStorage.setItem('tradingAccounts', JSON.stringify(accounts.map(acc => acc.account_name)));
    // Sauvegarder les balances initiales et minimums
    const balances = accounts.reduce((acc, account) => {
      if (account.initial_balance !== undefined) {
        acc[account.account_name] = account.initial_balance;
      }
      return acc;
    }, {} as Record<string, number>);
    localStorage.setItem('accountBalances', JSON.stringify(balances));
    
    const minimums = accounts.reduce((acc, account) => {
      if (account.minimum_balance !== undefined) {
        acc[account.account_name] = account.minimum_balance;
      }
      return acc;
    }, {} as Record<string, number>);
    localStorage.setItem('accountMinimums', JSON.stringify(minimums));
  };

  // Ajouter un nouveau compte
  const handleAddAccount = async () => {
    console.log('üîç [DEBUG] handleAddAccount appel√©');
    console.log('üîç [DEBUG] newAccountName:', newAccountName);
    console.log('üîç [DEBUG] newAccountBalance:', newAccountBalance);
    
    if (!newAccountName.trim()) {
      alert('Veuillez entrer un nom de compte');
      return;
    }
    
    if (tradingAccounts.some(acc => acc.account_name === newAccountName.trim())) {
      alert('Ce nom de compte existe d√©j√†');
      return;
    }
    
    try {
      const initialBalance = parseFloat(newAccountBalance) || 0;
      const minimumBalance = parseFloat(newAccountMinimum) || 0;
      console.log('üîç [DEBUG] Appel addUserAccount avec:', newAccountName.trim(), initialBalance, minimumBalance);
      
      const newAccount = await addUserAccount(newAccountName.trim(), initialBalance, minimumBalance);
      console.log('üîç [DEBUG] R√©ponse addUserAccount:', newAccount);
      
      if (newAccount) {
        // Ajouter la balance initiale et minimum au compte
        const accountWithBalance = { ...newAccount, initial_balance: initialBalance, minimum_balance: minimumBalance };
        const updatedAccounts = [...tradingAccounts, accountWithBalance];
        await saveAccounts(updatedAccounts);
        setSelectedAccount(newAccountName.trim());
        setNewAccountName('');
        setNewAccountBalance('');
        setNewAccountMinimum('');
        setShowAddAccountModal(false);
        console.log('‚úÖ [DEBUG] Compte ajout√© avec succ√®s');
      } else {
        console.error('‚ùå [DEBUG] addUserAccount a retourn√© null');
        alert('Erreur lors de l\'ajout du compte');
      }
    } catch (error) {
      console.error('‚ùå [DEBUG] Erreur ajout compte:', error);
      alert('Erreur lors de l\'ajout du compte: ' + error);
    }
  };

  // Changer de compte
  const handleAccountChange = (account: string) => {
    setSelectedAccount(account);
  };

  // Supprimer un compte
  const handleDeleteAccount = async (accountToDelete: string) => {
    if (accountToDelete === 'Compte Principal') return; // Ne pas supprimer le compte principal
    
    try {
      console.log(`üóëÔ∏è D√©but suppression du compte "${accountToDelete}"`);
      
      // D'abord supprimer tous les trades associ√©s √† ce compte
      const tradesToDelete = personalTrades.filter(trade => 
        (trade.account || 'Compte Principal') === accountToDelete
      );
      
      console.log(`üóëÔ∏è Suppression de ${tradesToDelete.length} trades pour le compte "${accountToDelete}"`);
      
      for (const trade of tradesToDelete) {
        const success = await deletePersonalTrade(trade.id);
        console.log(`üóëÔ∏è Trade ${trade.id} supprim√©:`, success);
      }
      
      // Mettre √† jour l'√©tat local des trades
      setPersonalTrades(prev => prev.filter(trade => 
        (trade.account || 'Compte Principal') !== accountToDelete
      ));
      
      // Ensuite supprimer le compte
      const account = tradingAccounts.find(acc => acc.account_name === accountToDelete);
      console.log(`üóëÔ∏è Compte trouv√©:`, account);
      
      if (account && account.id.startsWith('local-')) {
        // Compte local, supprimer de localStorage
        const updatedAccounts = tradingAccounts.filter(acc => acc.account_name !== accountToDelete);
        await saveAccounts(updatedAccounts);
        console.log(`‚úÖ Compte local supprim√©`);
      } else if (account) {
        // Compte Supabase, supprimer de la base
        console.log(`üóëÔ∏è Suppression du compte Supabase ID: ${account.id}`);
        const success = await deleteUserAccount(account.id);
        console.log(`üóëÔ∏è R√©sultat suppression Supabase:`, success);
        
        if (success) {
          // Mettre √† jour l'√©tat local des comptes
          const updatedAccounts = tradingAccounts.filter(acc => acc.id !== account.id);
          setTradingAccounts(updatedAccounts);
          console.log(`‚úÖ √âtat local mis √† jour, comptes restants:`, updatedAccounts.length);
        } else {
          console.error('‚ùå √âchec suppression Supabase, mais on continue avec la suppression locale');
          // M√™me si Supabase √©choue, supprimer localement
          const updatedAccounts = tradingAccounts.filter(acc => acc.id !== account.id);
          setTradingAccounts(updatedAccounts);
          console.log(`‚úÖ √âtat local mis √† jour (fallback), comptes restants:`, updatedAccounts.length);
        }
      }
      
      // Changer le compte s√©lectionn√© si n√©cessaire
      if (selectedAccount === accountToDelete) {
        setSelectedAccount('Compte Principal');
        console.log(`‚úÖ Compte s√©lectionn√© chang√© vers "Compte Principal"`);
      }
      
      console.log(`‚úÖ Compte "${accountToDelete}" supprim√© avec succ√®s`);
    } catch (error) {
      console.error('‚ùå Erreur suppression compte:', error);
      alert('Erreur lors de la suppression du compte');
    }
  };

  // Options du compte
  const handleAccountOptions = async (accountName: string) => {
    const isMainAccount = accountName === 'Compte Principal';
    
    const choice = prompt(
      `Options pour "${accountName}":\n\n` +
      `1 - Renommer le compte\n` +
      `2 - Modifier balance et stop-loss\n` +
      (!isMainAccount ? `3 - Supprimer le compte\n` : '') +
      `\nEntrez votre choix:`,
      '1'
    );

    if (choice === '1') {
      await handleRenameAccount(accountName);
    } else if (choice === '2') {
      await handleEditAccountSettings(accountName);
    } else if (choice === '3' && !isMainAccount) {
      if (confirm(`Supprimer le compte "${accountName}" et tous ses trades ?`)) {
        await handleDeleteAccount(accountName);
      }
    }
  };

  const handleEditAccountSettings = async (accountName: string) => {
    console.log('üîß handleEditAccountSettings appel√© pour:', accountName);
    const account = tradingAccounts.find(acc => acc.account_name === accountName);
    console.log('üìã Compte trouv√©:', account);
    
    if (!account) {
      console.error('‚ùå Compte non trouv√©');
      return;
    }

    const currentBalance = account.initial_balance || 0;
    const currentMinimum = account.minimum_balance || 0;

    console.log('üí∞ Valeurs actuelles - Balance:', currentBalance, 'Minimum:', currentMinimum);

    const newBalance = prompt(`Balance initiale pour "${accountName}":`, currentBalance.toString());
    if (newBalance === null) return; // Annul√©

    const newMinimum = prompt(`Stop-loss (minimum) pour "${accountName}":`, currentMinimum.toString());
    if (newMinimum === null) return; // Annul√©

    const balanceValue = parseFloat(newBalance) || 0;
    const minimumValue = parseFloat(newMinimum) || 0;

    console.log('üí∏ Nouvelles valeurs - Balance:', balanceValue, 'Minimum:', minimumValue);

    try {
      // Mettre √† jour dans Supabase uniquement
      console.log('üöÄ Appel updateUserAccount avec ID:', account.id);
      const updatedAccount = await updateUserAccount(account.id, {
        initial_balance: balanceValue,
        minimum_balance: minimumValue
      });

      console.log('üìù R√©sultat updateUserAccount:', updatedAccount);

      if (updatedAccount) {
        // Mettre √† jour l'√©tat local
        const updatedAccounts = tradingAccounts.map(acc =>
          acc.id === account.id
            ? { ...acc, initial_balance: balanceValue, minimum_balance: minimumValue }
            : acc
        );
        setTradingAccounts(updatedAccounts);
        console.log('‚úÖ Param√®tres du compte mis √† jour');
        alert('Param√®tres mis √† jour avec succ√®s !');
      } else {
        console.error('‚ùå updateUserAccount a retourn√© null');
        alert('Erreur: Impossible de mettre √† jour les param√®tres');
      }
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour param√®tres:', error);
      alert('Erreur lors de la mise √† jour des param√®tres: ' + error);
    }
  };

  const handleRenameAccount = async (oldName: string) => {
    const newName = prompt(`Renommer "${oldName}" en:`, oldName);
    if (!newName || newName.trim() === '' || newName === oldName) return;
    
    try {
      const account = tradingAccounts.find(acc => acc.account_name === oldName);
      if (account) {
        // Mettre √† jour dans Supabase ou localStorage
        const updatedAccounts = tradingAccounts.map(acc => 
          acc.id === account.id 
            ? { ...acc, account_name: newName.trim() }
            : acc
        );
        await saveAccounts(updatedAccounts);
        
        // Mettre √† jour le compte s√©lectionn√© si c'est celui qu'on renomme
        if (selectedAccount === oldName) {
          setSelectedAccount(newName.trim());
        }
        
        // Mettre √† jour les trades qui utilisent ce compte
        setPersonalTrades(prev => prev.map(trade => 
          (trade.account || 'Compte Principal') === oldName 
            ? { ...trade, account: newName.trim() }
            : trade
        ));
      }
    } catch (error) {
      console.error('‚ùå Erreur renommage compte:', error);
    }
  };
  const [showTradesModal, setShowTradesModal] = useState(false);
  const [showSignalsModal, setShowSignalsModal] = useState(false);
  const [selectedTradesDate, setSelectedTradesDate] = useState<Date | null>(null);
  const [selectedSignalsDate, setSelectedSignalsDate] = useState<Date | null>(null);
  const [pasteArea, setPasteArea] = useState('');
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  
  // √âtat pour TOUS les signaux (calendrier)
  const [allSignalsForStats, setAllSignalsForStats] = useState<Array<any>>([]);
  
  // Charger TOUS les signaux pour le calendrier
  useEffect(() => {
    const loadAllSignalsForCalendar = async () => {
      try {
        console.log('üìä [USER] Chargement de TOUS les signaux pour calendrier...');
        
        const channels = ['fondamentaux', 'letsgooo-model', 'general-chat-2', 'general-chat-3', 'general-chat-4'];
        let allSignals: any[] = [];
        
        for (const channelId of channels) {
          try {
            const signals = await getSignals(channelId, 999); // Charger beaucoup de signaux
            allSignals = [...allSignals, ...signals];
          } catch (error) {
            console.error(`‚ùå [USER] Erreur chargement ${channelId}:`, error);
          }
        }
        
        if (allSignals.length > 0) {
          const formattedSignals = allSignals.map(signal => ({
            id: signal.id || '',
            type: signal.type,
            symbol: signal.symbol,
            timeframe: signal.timeframe,
            entry: signal.entry?.toString() || 'N/A',
            takeProfit: signal.takeProfit?.toString() || 'N/A',
            stopLoss: signal.stopLoss?.toString() || 'N/A',
            description: signal.description || '',
            image: signal.image || signal.attachment_data,
            attachment_data: signal.attachment_data || signal.image,
            attachment_type: signal.attachment_type,
            attachment_name: signal.attachment_name,
            closure_image: signal.closure_image,
            closure_image_type: signal.closure_image_type,
            closure_image_name: signal.closure_image_name,
            timestamp: new Date(signal.timestamp || Date.now()).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
            originalTimestamp: signal.timestamp || Date.now(),
            status: signal.status || 'ACTIVE' as const,
            channel_id: signal.channel_id,
            reactions: signal.reactions || [],
            pnl: signal.pnl,
            closeMessage: signal.closeMessage
          }));
          
          setAllSignalsForStats(formattedSignals);
          console.log(`‚úÖ [USER] ${formattedSignals.length} signaux charg√©s pour calendrier`);
        }
      } catch (error) {
        console.error('‚ùå [USER] Erreur chargement signaux calendrier:', error);
      }
    };
    
    loadAllSignalsForCalendar();
  }, [selectedChannel.id]);
  const [showWeekSignalsModal, setShowWeekSignalsModal] = useState(false);
  const [selectedWeek, setSelectedWeek] = useState<number>(0);
  const [unreadMessages, setUnreadMessages] = useState<{[channelId: string]: number}>({});
  const [lastChannelOpenTime, setLastChannelOpenTime] = useState<{[channelId: string]: number}>({});
  const [signals, setSignals] = useState<Array<{
    id: string;
    type: string;
    symbol: string;
    timeframe: string;
    entry: string;
    takeProfit: string;
    stopLoss: string;
    description: string;
    image: string | null;
    timestamp: string;
    status: 'ACTIVE' | 'WIN' | 'LOSS' | 'BE';
    channel_id: string;
    reactions?: string[];
    pnl?: string;
    closeMessage?: string;
  }>>([]);


  // Fonction pour charger les messages depuis Firebase
  const loadMessages = async (channelId: string, keepPosition: boolean = false) => {
    try {
      // Charger TOUS les messages (999999 = illimit√©)
      const messages = await getMessages(channelId, 999999);
      const isChatChannel = ['general-chat', 'general-chat-2', 'general-chat-3', 'general-chat-4', 'profit-loss', 'video'].includes(channelId);
      
      // Afficher TOUS les messages directement sans limite
      const limitedMessages = isChatChannel ? messages : messages.reverse();
      
      const formattedMessages = limitedMessages.map(msg => ({
        id: msg.id || '',
        text: msg.content,
        timestamp: new Date(msg.timestamp || Date.now()).toLocaleString('fr-FR', { 
          day: '2-digit', 
          month: '2-digit', 
          hour: '2-digit', 
          minute: '2-digit' 
        }),
        author: msg.author,
        author_avatar: msg.author_avatar,
        attachment: undefined,
        attachment_data: msg.attachment_data
      }));
      
      setMessages(prev => ({
        ...prev,
        [channelId]: formattedMessages.map(msg => ({
          id: msg.id,
          text: msg.text,
          user: msg.author,
          author: msg.author,
          author_avatar: msg.author_avatar,
          timestamp: msg.timestamp,
          attachment_data: msg.attachment_data
        }))
      }));
      
      console.log(`‚úÖ Messages charg√©s pour ${channelId}:`, formattedMessages.length, '/', messages.length);
      
      // Scroll vers le bas apr√®s chargement des messages (sauf si on garde la position)
      if (!keepPosition && !['calendrier', 'trading-journal', 'forex-signaux', 'crypto-signaux', 'futures-signaux', 'fondamentaux', 'letsgooo-model'].includes(channelId)) {
        setTimeout(() => {
          scrollToBottom();
        }, 100);
      }
    } catch (error) {
      console.error('‚ùå Erreur chargement messages:', error);
    }
  };

  // Charger les r√©actions des messages depuis Firebase et s'abonner aux changements
  useEffect(() => {
    const loadAndSubscribeToReactions = async () => {
      try {
        // Charger les r√©actions existantes pour tous les messages
        const allMessages = Object.values(messages).flat();
        const reactionsPromises = allMessages.map(async (message) => {
          const reactions = await getMessageReactions(message.id);
          if (reactions) {
            return { messageId: message.id, reactions };
          }
          return null;
        });
        
        const reactionsResults = await Promise.all(reactionsPromises);
        const newReactions: {[messageId: string]: {fire: number, users: string[]}} = {};
        
        reactionsResults.forEach((result) => {
          if (result) {
            newReactions[result.messageId] = result.reactions;
          }
        });
        
        setMessageReactions(newReactions);
        console.log('‚úÖ R√©actions messages charg√©es depuis Firebase:', Object.keys(newReactions).length);
        
        // S'abonner aux changements de r√©actions pour tous les messages
        const subscriptions = allMessages.map((message) => {
          return subscribeToMessageReactions(message.id, (reactions) => {
            if (reactions) {
              setMessageReactions(prev => ({
                ...prev,
                [message.id]: reactions
              }));
            }
          });
        });
        
        // Nettoyer les abonnements
        return () => {
          subscriptions.forEach(subscription => {
            if (subscription && typeof subscription === 'function') {
              subscription();
            }
          });
        };
        
      } catch (error) {
        console.error('‚ùå Erreur chargement r√©actions messages Firebase:', error);
      }
    };
    
    if (Object.keys(messages).length > 0) {
      loadAndSubscribeToReactions();
    }
  }, [messages]);

  // Fonction pour charger les signaux depuis Firebase (optimis√© - max 3)
  const loadSignals = async (channelId: string) => {
    try {
      const signals = await getSignals(channelId, 3); // Limite √† 3 signaux
      const formattedSignals = signals.map(signal => ({
        id: signal.id || '',
        type: signal.type,
        symbol: signal.symbol,
        timeframe: signal.timeframe,
        entry: signal.entry?.toString() || 'N/A',
        takeProfit: signal.takeProfit?.toString() || 'N/A',
        stopLoss: signal.stopLoss?.toString() || 'N/A',
        description: signal.description || '',
        image: signal.image || signal.attachment_data,
        attachment_data: signal.attachment_data || signal.image,
        attachment_type: signal.attachment_type,
        attachment_name: signal.attachment_name,
        closure_image: signal.closure_image,
        closure_image_type: signal.closure_image_type,
        closure_image_name: signal.closure_image_name,
        timestamp: new Date(signal.timestamp || Date.now()).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
        status: signal.status || 'ACTIVE' as const,
        channel_id: signal.channel_id,
        reactions: [],
        pnl: signal.pnl,
        closeMessage: signal.closeMessage
      }));
      
      // Remplacer seulement les signaux du canal actuel
      setSignals(prev => {
        const otherChannelSignals = prev.filter(signal => signal.channel_id !== channelId);
        return [...otherChannelSignals, ...formattedSignals.reverse()];
      });
      
      // Ne pas envoyer de notifications lors du chargement initial
      // Les notifications seront envoy√©es seulement pour les nouveaux signaux en temps r√©el
      
      // Scroll automatique apr√®s chargement des signaux (sauf pour calendrier, journal perso et √©ducation)
      if (!['calendrier', 'trading-journal', 'forex-signaux', 'crypto-signaux', 'futures-signaux', 'fondamentaux', 'letsgooo-model'].includes(channelId)) {
        setTimeout(() => {
          scrollToBottom();
        }, 100);
      }
    } catch (error) {
      console.error('‚ùå Erreur chargement signaux:', error);
    }
  };

  // Initialiser l'app avec Firebase
  useEffect(() => {
    const initApp = async () => {
      await loadMessages(selectedChannel.id);
      await loadSignals(selectedChannel.id);
      
      // Initialiser les notifications push
      await initializeNotifications();
    };
    initApp();
  }, []);

  // √âcouter les notifications admin
  useEffect(() => {
    const notificationsRef = ref(database, 'messages/admin_broadcast');
    
    const unsubscribe = onValue(notificationsRef, (snapshot) => {
      const messages = snapshot.val();
      if (messages) {
        // Prendre le dernier message
        const messageKeys = Object.keys(messages);
        const latestMessage = messages[messageKeys[messageKeys.length - 1]];
        
        if (latestMessage && latestMessage.message_type === 'admin_notification') {
          // Afficher la notification
          sendLocalNotification('üì¢ Message Admin', latestMessage.text);
        }
      }
    });

    return () => unsubscribe();
  }, []);

  // Subscription globale pour tous les canaux (ne se recr√©e pas √† chaque changement de canal)
  useEffect(() => {
    const channels = ['fondamentaux', 'letsgooo-model', 'general-chat', 'general-chat-2', 'general-chat-3', 'general-chat-4', 'profit-loss'];
    
    const subscriptions = channels.map(channelId => {
      return subscribeToMessages(channelId, (newMessage) => {
        console.log(`üîÑ Nouveau message re√ßu dans ${channelId}:`, newMessage);
        
        // Compter les nouveaux messages seulement si on n'est pas dans ce canal
        if (selectedChannel.id !== channelId) {
          console.log(`üìä Incrementing unread count for ${channelId}`);
          setUnreadMessages(prev => ({
            ...prev,
            [channelId]: (prev[channelId] || 0) + 1
          }));
        }
      });
    });

    return () => {
      subscriptions.forEach(sub => sub.unsubscribe());
    };
  }, []); // Supprimer selectedChannel.id de la d√©pendance

  // Charger les donn√©es quand on change de canal
  useEffect(() => {
    console.log('üîÑ Changement de canal utilisateur:', selectedChannel.id);
    
    // Ne pas charger messages/signaux pour les canaux sp√©ciaux
    const isSpecialChannel = ['calendrier', 'trading-journal', 'journal', 'video', 'trading-hub'].includes(selectedChannel.id);
    
    if (!isSpecialChannel) {
      loadMessages(selectedChannel.id);
      loadSignals(selectedChannel.id);
    }
    
    // Subscription aux signaux temps r√©el pour les r√©actions et notifications
    const signalSubscription = subscribeToSignals(selectedChannel.id, (updatedSignal) => {
      console.log('üîÑ Signal mis √† jour re√ßu:', updatedSignal);
      
      // Mettre √† jour les signaux avec les nouvelles r√©actions
      setSignals(prev => prev.map(signal => 
        signal.id === updatedSignal.id ? { ...signal, reactions: updatedSignal.reactions || [] } : signal
      ));
      
      // Envoyer une notification pour les signaux ferm√©s (WIN/LOSS/BE) seulement si c'est un vrai changement
      if (updatedSignal.status !== 'ACTIVE' && (updatedSignal as any).closeMessage) {
        // V√©rifier si c'est un changement r√©cent (moins de 5 secondes) pour √©viter les notifications en batch
        const now = Date.now();
        const signalTime = new Date(updatedSignal.timestamp).getTime();
        if (now - signalTime < 5000) {
        notifySignalClosed(updatedSignal);
        }
      }
    });

    // Subscription aux nouveaux signaux temps r√©el
    const newSignalSubscription = subscribeToSignals(selectedChannel.id, (signal) => {
      console.log('üÜï Nouveau signal re√ßu utilisateur:', signal);
      
      const formattedSignal = {
        id: signal.id || '',
        type: signal.type,
        symbol: signal.symbol,
        timeframe: signal.timeframe,
        entry: signal.entry?.toString() || 'N/A',
        takeProfit: signal.takeProfit?.toString() || 'N/A',
        stopLoss: signal.stopLoss?.toString() || 'N/A',
        description: signal.description || '',
        image: signal.image || signal.attachment_data,
        attachment_data: signal.attachment_data || signal.image,
        attachment_type: signal.attachment_type,
        attachment_name: signal.attachment_name,
        closure_image: signal.closure_image,
        closure_image_type: signal.closure_image_type,
        closure_image_name: signal.closure_image_name,
        timestamp: new Date(signal.timestamp || Date.now()).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
        status: signal.status || 'ACTIVE' as const,
        channel_id: signal.channel_id,
        reactions: [],
        pnl: signal.pnl,
        closeMessage: signal.closeMessage
      };
      
      // Ajouter le nouveau signal √† la fin (m√™me logique que les messages)
      setSignals(prev => {
        const currentChannelSignals = prev.filter(signal => signal.channel_id === selectedChannel.id);
        const otherChannelSignals = prev.filter(signal => signal.channel_id !== selectedChannel.id);
        
        return [
          ...otherChannelSignals,
          ...currentChannelSignals,
          formattedSignal
        ];
      });
      
      // Notifier le nouveau signal seulement s'il est vraiment r√©cent (moins de 10 secondes)
      const now = Date.now();
      const signalTime = new Date(signal.timestamp).getTime();
      if (now - signalTime < 10000) {
      notifyNewSignal(formattedSignal);
      }
      
      // Scroll automatique (sauf pour calendrier, journal perso et √©ducation)
      if (!['calendrier', 'trading-journal', 'forex-signaux', 'crypto-signaux', 'futures-signaux', 'fondamentaux', 'letsgooo-model'].includes(selectedChannel.id)) {
        setTimeout(() => {
          scrollToBottom();
        }, 100);
      }
    });
    
    // Les messages temps r√©el sont g√©r√©s par les subscriptions globales

    return () => {
      signalSubscription.unsubscribe();
      newSignalSubscription.unsubscribe();
    };
  }, [selectedChannel.id]);
  const [chatMessage, setChatMessage] = useState('');
  const [profileImage, setProfileImage] = useState<string | null>(null);
  
  // √âtats pour l'√©dition du nom d'utilisateur
  const [isEditingUsername, setIsEditingUsername] = useState(false);
  const [usernameInput, setUsernameInput] = useState('');
  const [currentUsername, setCurrentUsername] = useState<string | null>(null);
  const [supabaseProfile, setSupabaseProfile] = useState<any>(null);
  
  // √âtat pour le toggle des notifications
  const [notificationsEnabled, setNotificationsEnabled] = useState<boolean>(() => {
    return localStorage.getItem('notificationsDisabled') !== 'true';
  });

  // Fonction pour toggle les notifications
  const handleToggleNotifications = async () => {
    if (!notificationsEnabled) {
      // Activer les notifications
      console.log('üîî Activation des notifications...');
      localStorage.removeItem('notificationsDisabled');
      
      try {
        await initializeNotifications();
        setNotificationsEnabled(true);
        console.log('‚úÖ Notifications activ√©es');
      } catch (error) {
        console.error('‚ùå Erreur activation notifications:', error);
        alert('Impossible d\'activer les notifications. V√©rifiez les permissions de votre navigateur.');
      }
    } else {
      // D√©sactiver les notifications
      console.log('üîï D√©sactivation des notifications...');
      
      try {
        // Supprimer tous les tokens FCM
        const { getMessaging, deleteToken } = await import('firebase/messaging');
        const { database } = await import('../../utils/firebase-setup');
        const { ref, remove, get } = await import('firebase/database');
        
        // R√©cup√©rer le token FCM actuel du navigateur
        try {
          const messaging = getMessaging();
          const currentToken = await (messaging as any).getToken();
          
          if (currentToken) {
            console.log('üóëÔ∏è Suppression token FCM...');
            
            // Supprimer de Firebase Database
            const tokenKey = currentToken.replace(/[.#$[\]]/g, '_');
            const tokenRef = ref(database, `fcm_tokens/${tokenKey}`);
            await remove(tokenRef);
            
            // Supprimer du navigateur
            await deleteToken(messaging);
            console.log('‚úÖ Token FCM supprim√©');
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Erreur suppression token:', error);
        }
        
        localStorage.setItem('notificationsDisabled', 'true');
        setNotificationsEnabled(false);
        console.log('‚úÖ Notifications d√©sactiv√©es');
      } catch (error) {
        console.error('‚ùå Erreur d√©sactivation notifications:', error);
      }
    }
  };

  // Fonctions pour l'√©dition du nom d'utilisateur
  const handleUsernameEdit = async () => {
    if (usernameInput.trim()) {
      try {
        // V√©rifier si l'utilisateur est connect√©
        if (!user) {
          console.error('‚ùå Utilisateur non connect√©');
          // Mode d√©grad√© : sauvegarder en localStorage avec ID g√©n√©rique
          localStorage.setItem('userUsername', usernameInput.trim());
          setCurrentUsername(usernameInput.trim());
          console.log('‚úÖ Username sauvegard√© en localStorage:', usernameInput.trim());
        } else {
          const { data, error } = await updateUserProfile(usernameInput.trim(), undefined, 'user');
        if (!error && data) {
          setCurrentUsername(usernameInput.trim());
          setSupabaseProfile(prev => prev ? { ...prev, name: usernameInput.trim() } : prev);
          console.log('‚úÖ Username updated successfully in Supabase:', usernameInput.trim());
        } else {
          console.error('‚ùå Error updating username in Supabase:', error);
            // Mode d√©grad√© : sauvegarder en localStorage avec ID utilisateur
            localStorage.setItem(`userUsername_${user.id}`, usernameInput.trim());
            setCurrentUsername(usernameInput.trim());
            console.log('‚úÖ Username sauvegard√© en localStorage (fallback):', usernameInput.trim());
          }
        }
      } catch (error) {
        console.error('‚ùå Error updating username:', error);
        // Mode d√©grad√© : sauvegarder en localStorage avec ID utilisateur si disponible
        if (user) {
          localStorage.setItem(`userUsername_${user.id}`, usernameInput.trim());
        } else {
          localStorage.setItem('userUsername', usernameInput.trim());
        }
        setCurrentUsername(usernameInput.trim());
        console.log('‚úÖ Username sauvegard√© en localStorage (fallback):', usernameInput.trim());
      }
      setIsEditingUsername(false);
      setUsernameInput('');
    }
  };

  const handleUsernameCancel = () => {
    setIsEditingUsername(false);
    setUsernameInput('');
  };

  // Charger le profil utilisateur une seule fois au d√©marrage
  useEffect(() => {
    const initializeSupabaseUser = async () => {
      try {
        const userSess = supabase.auth.getUser();
        const session = await supabase.auth.getSession();
        
        if (session.data.session?.user) {
          console.log('‚úÖ Session utilisateur trouv√©e:', session.data.session.user.email);
        }
      } catch (error) {
        console.error('‚ùå Pas de session Supabase:', error);
      }
    };

    initializeSupabaseUser();
  }, []);

  // Initialiser le profil utilisateur au chargement
  useEffect(() => {
    const initProfile = async () => {
      console.log('üîÑ Initialisation profil utilisateur...');
      console.log('üì± PWA Mode:', window.matchMedia('(display-mode: standalone)').matches);
      console.log('üåê User Agent:', navigator.userAgent.includes('Mobile') ? 'MOBILE' : 'DESKTOP');
      
      const image = await initializeProfile('user');
      if (image) {
        setProfileImage(image);
        console.log('‚úÖ Photo de profil utilisateur charg√©e');
      } else {
        console.log('‚ùå Aucune photo de profil utilisateur trouv√©e');
      }

      // Charger le nom d'utilisateur (Supabase d'abord, puis localStorage)
      if (user) {
        console.log('üë§ Utilisateur connect√©:', user.id, user.email);
        try {
          const { data: profile } = await getUserProfileByType('user');
          console.log('üì¶ Profil r√©cup√©r√© de Supabase:', profile);
          if (profile?.name) {
            setSupabaseProfile(profile);
            setCurrentUsername(profile.name);
            // Charger aussi l'avatar depuis le profil Supabase (priorit√© sur localStorage)
            if (profile.avatar_url) {
              setProfileImage(profile.avatar_url);
              localStorage.setItem('userProfileImage', profile.avatar_url);
              console.log('‚úÖ Avatar charg√© depuis profil Supabase');
            }
            console.log('‚úÖ Profil utilisateur charg√© depuis Supabase:', profile);
          } else {
            // Profil n'existe pas, cr√©er un profil par d√©faut avec l'email
            console.log('‚ö†Ô∏è Pas de profil trouv√©, cr√©ation du profil par d√©faut...');
            const defaultName = user.email?.split('@')[0] || 'Anonyme';
            
            // Cr√©er le profil dans Supabase
            const { data: newProfile } = await updateUserProfile(defaultName, undefined, 'user');
            
            if (newProfile) {
              setSupabaseProfile(newProfile);
              setCurrentUsername(defaultName);
              console.log('‚úÖ Nouveau profil cr√©√© dans Supabase:', newProfile);
            } else {
              // Fallback localStorage avec ID utilisateur
              const localUsername = localStorage.getItem(`userUsername_${user.id}`);
              if (localUsername) {
                setCurrentUsername(localUsername);
                console.log('‚úÖ Username charg√© depuis localStorage:', localUsername);
              } else {
                setCurrentUsername(defaultName);
                console.log('‚úÖ Username d√©fini depuis email:', defaultName);
              }
            }
          }
        } catch (error) {
          console.error('‚ùå Erreur lors du chargement du profil Supabase:', error);
          // Mode d√©grad√© : localStorage avec ID utilisateur
          const localUsername = localStorage.getItem(`userUsername_${user.id}`);
          if (localUsername) {
            setCurrentUsername(localUsername);
            console.log('‚úÖ Username charg√© depuis localStorage (fallback):', localUsername);
          } else {
            const emailName = user.email?.split('@')[0] || 'Anonyme';
            setCurrentUsername(emailName);
            console.log('‚úÖ Username d√©fini depuis email (fallback):', emailName);
          }
        }
      } else {
        // Pas connect√© : utiliser localStorage
        const localUsername = localStorage.getItem('userUsername');
        if (localUsername) {
          setCurrentUsername(localUsername);
          console.log('‚úÖ Username charg√© depuis localStorage (pas connect√©):', localUsername);
        } else {
          setCurrentUsername('Anonyme');
          console.log('‚úÖ Username par d√©faut (pas connect√©)');
        }
      }
    };
    
    initProfile();
  }, [user]);

  // Subscription globale pour compter les messages non lus
  useEffect(() => {
    const allChannels = ['fondamentaux', 'letsgooo-model', 'general-chat', 'general-chat-2', 'general-chat-3', 'general-chat-4', 'profit-loss', 'trading-journal'];
    
    const subscriptions = allChannels.map(channelId => {
      return subscribeToMessages(channelId, (newMessage) => {
        // V√©rifier si le message est plus r√©cent que la derni√®re ouverture du salon
        const lastOpenTime = lastChannelOpenTime[channelId] || 0;
        const messageTime = typeof newMessage.timestamp === 'number' ? newMessage.timestamp : Date.now();
        
        // Si le salon n'a jamais √©t√© ouvert, compter tous les messages
        // Sinon, compter seulement les messages plus r√©cents que la derni√®re ouverture
        if (lastOpenTime === 0 || messageTime > lastOpenTime) {
          // Ne pas compter si on est actuellement dans ce salon
          if (selectedChannel.id !== channelId) {
            setUnreadMessages(prev => ({
              ...prev,
              [channelId]: (prev[channelId] || 0) + 1
            }));
            console.log(`üìä Unread message added to ${channelId}: ${newMessage.content}`);
          }
        }
      });
    });

    return () => {
      subscriptions.forEach(subscription => subscription.unsubscribe());
    };
  }, [selectedChannel.id, lastChannelOpenTime]);
  const [isLiveStreaming, setIsLiveStreaming] = useState(false);
  const [streamTitle, setStreamTitle] = useState('');
  const [streamDescription, setStreamDescription] = useState('');
  const [viewerCount, setViewerCount] = useState(0);

  // √âtats pour le journal de trading personnalis√©
  const [showTradeModal, setShowTradeModal] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date | null>(() => {
    // R√©cup√©rer selectedDate depuis localStorage
    const saved = localStorage.getItem('selectedDate');
    return saved ? new Date(saved) : null;
  });
  
  // Sauvegarder selectedDate dans localStorage
  useEffect(() => {
    if (selectedDate) {
      localStorage.setItem('selectedDate', selectedDate.toISOString());
    } else {
      localStorage.removeItem('selectedDate');
    }
  }, [selectedDate]);

  // Initialiser les derni√®res heures de lecture depuis localStorage
  useEffect(() => {
    const channels = ['crypto', 'forex', 'indices', 'fondamentaux', 'letsgooo-model'];
    const lastReads = {};
    
    channels.forEach(channelId => {
      const lastRead = localStorage.getItem(`lastRead_${channelId}`);
      if (lastRead) {
        lastReads[channelId] = lastRead;
      }
    });
    
    setLastReadTimes(lastReads);
  }, []);

  
  // Fonction pour mettre √† jour les heures de derni√®re lecture
  const updateLastReadTime = (channelId: string) => {
    const now = new Date().toISOString();
    setLastReadTimes(prev => ({
      ...prev,
      [channelId]: now
    }));
    // Sauvegarder dans localStorage
    localStorage.setItem(`lastRead_${channelId}`, now);
  };


  // Fonction pour changer de canal et r√©initialiser selectedDate si n√©cessaire
  const handleChannelChange = (channelId: string, channelName: string) => {
    console.log('üîÑ handleChannelChange appel√©:', { channelId, channelName });
    
    // R√©initialiser le flag de scroll pour permettre un nouveau scroll
    setIsScrolling(false);
    
    // Marquer le canal comme lu quand l'utilisateur l'ouvre
    updateLastReadTime(channelId);
    
    // R√©initialiser selectedDate si on quitte le Trading Journal
    if (selectedChannel.id === 'trading-journal' && channelId !== 'trading-journal') {
      setSelectedDate(null);
    }
    
    setSelectedChannel({id: channelId, name: channelName});
    setView('signals');
    
    console.log('‚úÖ selectedChannel mis √† jour:', { id: channelId, name: channelName });
    
    // Enregistrer le timestamp d'ouverture du salon
    setLastChannelOpenTime(prev => ({
      ...prev,
      [channelId]: Date.now()
    }));
    
    // R√©initialiser les messages non lus pour ce canal
    setUnreadMessages(prev => ({
      ...prev,
      [channelId]: 0
    }));
    
    console.log(`üìä Channel opened: ${channelId} at ${new Date().toLocaleTimeString()}`);
    
    // Scroll automatique d√©sactiv√© lors du changement de canal pour √©viter le scroll lors de la connexion
    // setTimeout(() => {
    //   if (['general-chat', 'general-chat-2', 'general-chat-3', 'general-chat-4', 'profit-loss', 'video'].includes(channelId)) {
    //     scrollToBottom();
    //   } else if (!['calendrier', 'trading-journal', 'forex-signaux', 'crypto-signaux', 'futures-signaux'].includes(channelId)) {
    //     scrollToTop();
    //   }
    //   // Pas de scroll pour signaux, calendrier et trading journal
    // }, 200);
  };
  const [personalTrades, setPersonalTrades] = useState<PersonalTrade[]>([]);

  // √âtat pour les comptes multiples
  const [tradingAccounts, setTradingAccounts] = useState<UserAccount[]>([]);
  const [selectedAccount, setSelectedAccount] = useState<string>('Compte Principal');
  const [showAddAccountModal, setShowAddAccountModal] = useState(false);
  const [newAccountName, setNewAccountName] = useState('');
  const [newAccountBalance, setNewAccountBalance] = useState('');
  const [newAccountMinimum, setNewAccountMinimum] = useState('');

  const [tradeData, setTradeData] = useState({
    symbol: '',
    type: 'BUY' as 'BUY' | 'SELL',
    entry: '',
    exit: '',
    stopLoss: '',
    pnl: '',
    status: 'WIN' as 'WIN' | 'LOSS' | 'BE',
    lossReason: '',
    notes: '',
    image1: null as File | null,
    image2: null as File | null
  });
  
  // Synchroniser l'ID utilisateur au d√©marrage de l'application
  useEffect(() => {
    const syncUser = async () => {
      const userId = await syncUserId();
      console.log('üîÑ ID utilisateur synchronis√© au d√©marrage PWA:', userId);
    };
    syncUser();
  }, []); // Une seule fois au d√©marrage

  // Synchronisation temps r√©el des trades personnels
  useEffect(() => {
    console.log('üëÇ D√©marrage synchronisation temps r√©el trades [PWA]...');
    
    // D√©marrer l'√©coute temps r√©el
    const unsubscribe = listenToPersonalTrades(
      (trades) => {
        console.log('üîÑ Mise √† jour trades re√ßue [PWA]:', trades.length);
        setPersonalTrades(trades);
      },
      (error) => {
        console.error('‚ùå Erreur synchronisation temps r√©el [PWA]:', error);
      }
    );
    
    // Nettoyer l'√©coute au d√©montage du composant
    return () => {
      console.log('üõë Arr√™t synchronisation temps r√©el [PWA]');
      unsubscribe();
    };
  }, []); // Une seule fois au d√©marrage

  // Debug: Afficher les trades au chargement
  useEffect(() => {
    console.log('üî• DEBUG TRADES:', personalTrades);
    console.log('üî• Nombre de trades:', personalTrades.length);
    console.log('üî• Channel actuel:', selectedChannel.id);
    console.log('üî• View actuel:', view);
  }, [personalTrades, selectedChannel.id, view]);

  // Debug: Afficher les messages non lus
  useEffect(() => {
    console.log('üìä Unread messages state:', unreadMessages);
  }, [unreadMessages]);

  const [signalData, setSignalData] = useState({
    type: 'BUY',
    symbol: '',
    timeframe: '',
    entry: '',
    takeProfit: '',
    stopLoss: '',
    description: '',
    image: null as File | null
  });
  
  // √âtats pour le copier-coller TradingView
  const [debugMode, setDebugMode] = useState(false);
  const [pasteDebug, setPasteDebug] = useState('');
  const [isPasteActive, setIsPasteActive] = useState(false);
  const [error, setError] = useState('');
  const [currentDate, setCurrentDate] = useState(new Date());

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const messagesContainerRef = useRef<HTMLDivElement>(null);

  // Fonction utilitaire pour cr√©er une note d'ajout
  const createNoteAddition = (extracted: Record<string, any>) => {
    const parts = [];
    if (extracted.symbol) parts.push(`Symbol: ${extracted.symbol}`);
    if (extracted.tradeType) parts.push(`Type: ${extracted.tradeType.toUpperCase()}`);
    if (extracted.entryPrice) parts.push(`Entry: ${extracted.entryPrice}`);
    if (extracted.exitPrice) parts.push(`Exit: ${extracted.exitPrice}`);
    if (extracted.stopLoss) parts.push(`SL: ${extracted.stopLoss}`);
    if (extracted.rr) parts.push(`R:R: ${extracted.rr}`);
    if (extracted.session) parts.push(`Session: ${extracted.session}`);
    if (extracted.tradeDuration) parts.push(`Duration: ${extracted.tradeDuration}`);
    
    return `[Auto-extracted] ${parts.join(' | ')}`;
  };

  // Fonction utilitaire pour mettre √† jour les donn√©es du formulaire
  const updateFormData = (updates: Partial<typeof signalData>) => {
    setSignalData(prev => ({ ...prev, ...updates }));
  };

  // FIXED: Completely rewritten TradingView paste handler to match Google Apps Script logic
  const handleTradingViewPaste = (e: React.ClipboardEvent<HTMLDivElement>) => {
    e.preventDefault();
    const pastedHtml = e.clipboardData.getData('text/html') || '';
    const pastedText = e.clipboardData.getData('text') || '';
    
    // Debug info
    if (debugMode) {
      setPasteDebug(`HTML: ${pastedHtml.slice(0, 300)}...\nText: ${pastedText.slice(0, 300)}...`);
    }
    
    // Store extracted data
    const extracted: Record<string, any> = {};
    let found = false;
    
    // Check if we have TradingView data
    if (pastedHtml.includes('data-tradingview-clip')) {
      try {
        // Extract the TradingView JSON data
        const regex = /data-tradingview-clip="([^"]+)"/;
        const match = pastedHtml.match(regex);
        
        if (match && match[1]) {
          // Replace HTML entities in the JSON string
          const jsonString = match[1].replace(/&(?:quot|#34);/g, '"');
          const data = JSON.parse(jsonString);
          
          if (debugMode) {
            setPasteDebug(JSON.stringify(data, null, 2));
          }
          
          // Extract source and points - similar to Google Apps Script
          const source = data.sources?.[0]?.source;
          const points = source?.points;
          const state = source?.state;
          const stopLevel = state?.stopLevel;
          const profitLevel = state?.profitLevel;
          
          if (points && points.length >= 2) {
            found = true;
            
            // Get ticker symbol and clean it
            let symbolFull = state?.symbol || "";
            let ticker = symbolFull.split(":")[1] || symbolFull;
            // Clean common futures symbols
            if (ticker.startsWith("NQ1")) ticker = "NQ";
            else if (ticker.startsWith("ES1")) ticker = "ES";
            else if (ticker.startsWith("MNQ")) ticker = "MNQ";
            
            extracted.symbol = ticker;
            
            // Determine trade type from the tool
            const type = source?.type;
            if (type === "LineToolRiskRewardLong" || /long/i.test(type)) {
              extracted.tradeType = 'buy';
              extracted.outcome = 'WIN'; // Default to WIN
            } else if (type === "LineToolRiskRewardShort" || /short/i.test(type)) {
              extracted.tradeType = 'sell';
              extracted.outcome = 'WIN'; // Default to WIN
            }
            
            // Extract price information
            const entryPrice = points[0]?.price;
            if (entryPrice !== undefined) {
              extracted.entryPrice = entryPrice.toString();
            }
            
            // For exit price, use the last point
            if (points.length > 1) {
              const exitPrice = points[points.length - 1]?.price;
              if (exitPrice !== undefined) {
                extracted.exitPrice = exitPrice.toString();
              }
            }
            
            // Calculate Risk:Reward ratio if available
            if (stopLevel !== undefined && profitLevel !== undefined) {
              const rrRatio = Math.round((profitLevel / stopLevel) * 100) / 100;
              extracted.rr = rrRatio.toString();
              
              // Calculate Stop Loss based on entry price and stopLevel
              if (entryPrice !== undefined) {
                let slPrice;
                if (extracted.tradeType === 'buy') {
                  // For Long trades
                  const stopDistance = stopLevel / 4; // Similar to Google Script
                  slPrice = entryPrice - stopDistance;
                } else {
                  // For Short trades
                  const stopDistance = stopLevel / 4;
                  slPrice = entryPrice + stopDistance;
                }
                extracted.stopLoss = slPrice.toString();
              }
            }
            
            // Extract timestamps for entry/exit if available
            if (points[0]?.time_t) {
              const entryTimestamp = points[0].time_t;
              const entryDate = new Date(entryTimestamp * 1000);
              
              // Format entry time for the form
              const entryTimeStr = entryDate.toTimeString().split(' ')[0].slice(0, 5);
              extracted.entryTime = entryTimeStr;
              
              // If we have exit timestamp
              if (points.length > 1 && points[1]?.time_t) {
                const exitTimestamp = points[1].time_t;
                const exitDate = new Date(exitTimestamp * 1000);
                const exitTimeStr = exitDate.toTimeString().split(' ')[0].slice(0, 5);
                extracted.exitTime = exitTimeStr;
                
                // Calculate trade duration
                const durationMs = (exitTimestamp - entryTimestamp) * 1000;
                const durationMin = Math.round(durationMs / 60000);
                
                if (durationMin < 60) {
                  extracted.tradeDuration = `${durationMin}m`;
                } else {
                  const hours = Math.floor(durationMin / 60);
                  const mins = durationMin % 60;
                  extracted.tradeDuration = `${hours}h ${mins}m`;
                }
              }
            }
            
            // Try to determine session based on entry time
            if (points[0]?.time_t) {
              const entryDate = new Date(points[0].time_t * 1000);
              let entryHour = entryDate.getUTCHours() - 4; // EST offset
              if (entryHour < 0) entryHour += 24;
              
              let session = "";
              if (entryHour >= 0 && entryHour < 3) session = "Asian Session";
              else if (entryHour >= 3 && entryHour < 8) session = "London";
              else if (entryHour >= 8 && entryHour < 12) session = "London/NY Overlap";
              else if (entryHour >= 12 && entryHour < 17) session = "New York PM";
              
              if (session) {
                extracted.session = session;
              }
            }
          }
        }
      } catch (err) {
        console.error("Error parsing TradingView data:", err);
        if (debugMode) {
          setPasteDebug(`Error parsing: ${err instanceof Error 
            ? err.message 
            : (typeof err === 'symbol' ? err.toString() : String(err))}`);
        }
      }
    }
    
    // Fallback to plain-text parsing if we didn't find structured data
    if (!found) {
      if (/long/i.test(pastedText)) {
        extracted.tradeType = 'buy';
        extracted.outcome = 'WIN';
        found = true;
      } else if (/short/i.test(pastedText)) {
        extracted.tradeType = 'sell';
        extracted.outcome = 'WIN';
        found = true;
      }
      
      // Try to extract symbol
      const sym = pastedText.match(/\b([A-Z]{1,6}\d*(?:USD|BTC|ETH|EUR)?)\b/);
      if (sym) {
        extracted.symbol = sym[1];
        found = true;
      }
      
      // Try to extract numbers as prices
      const nums = pastedText.match(/\b\d+(\.\d+)?\b/g) || [];
      if (nums.length >= 2) {
        extracted.entryPrice = nums[0];
        extracted.exitPrice = nums[1];
        if (nums.length >= 3) {
          extracted.rr = nums[2];
        }
        found = true;
      }
    }
    
    // Apply extracted data to the form
    if (found) {
      // First update the basic fields
      updateFormData({
        type: extracted.tradeType === 'buy' ? 'BUY' : 'SELL',
        symbol: extracted.symbol || signalData.symbol,
        entry: extracted.entryPrice || signalData.entry,
        takeProfit: extracted.exitPrice || signalData.takeProfit,
        stopLoss: extracted.stopLoss || signalData.stopLoss,
      });
      
      // Add extracted info to description
      if (Object.keys(extracted).length > 0) {
        const noteAddition = createNoteAddition(extracted);
        updateFormData({
          description: signalData.description ? `${signalData.description}\n\n${noteAddition}` : noteAddition
        });
      }
      
      setError('');
    } else {
      // If nothing parsed, just dump the raw text into description
      updateFormData({
        description: `Pasted text:\n${pastedText}\n\n${signalData.description || ''}`
      });
      setError('Could not extract structured trade data; added raw text to description.');
    }
    
    setIsPasteActive(false);
  };

  // Fonctions pour la navigation du calendrier
  const goToPreviousMonth = () => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(prev.getMonth() - 1);
      return newDate;
    });
  };

  const goToNextMonth = () => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(prev.getMonth() + 1);
      return newDate;
    });
  };

  const getMonthName = (date: Date) => {
    const months = [
      'janvier', 'f√©vrier', 'mars', 'avril', 'mai', 'juin',
      'juillet', 'ao√ªt', 'septembre', 'octobre', 'novembre', 'd√©cembre'
    ];
    return months[date.getMonth()];
  };

  // Fonctions pour calculer les statistiques r√©elles
  const parsePnL = (pnlString: string): number => {
    if (!pnlString) return 0;
    const cleanStr = pnlString.replace(/[^\d.-]/g, '');
    return parseFloat(cleanStr) || 0;
  };

  // Charger TOUS les signaux pour les statistiques et le calendrier
  useEffect(() => {
    const loadAllSignalsForStats = async () => {
      try {
        console.log('üìä Chargement de TOUS les signaux pour statistiques et calendrier...');
        
        // Charger les signaux de tous les canaux individuellement
                  const channels = ['fondamentaux', 'letsgooo-model'];
        let allSignals: any[] = [];
        
        for (const channelId of channels) {
          try {
            console.log(`üîç Chargement signaux pour ${channelId}...`);
            const channelSignals = await getSignals(channelId, 100); // 100 signaux par canal
            if (channelSignals && channelSignals.length > 0) {
              allSignals = [...allSignals, ...channelSignals];
              console.log(`‚úÖ ${channelSignals.length} signaux charg√©s pour ${channelId}`);
            }
          } catch (error) {
            console.error(`‚ùå Erreur chargement signaux pour ${channelId}:`, error);
          }
        }
        
        if (allSignals.length > 0) {
          // Formater les signaux pour correspondre au type attendu
          const formattedSignals = allSignals.map(signal => ({
            id: signal.id || '',
            type: signal.type,
            symbol: signal.symbol,
            timeframe: signal.timeframe,
            entry: signal.entry?.toString() || 'N/A',
            takeProfit: signal.takeProfit?.toString() || 'N/A',
            stopLoss: signal.stopLoss?.toString() || 'N/A',
            description: signal.description || '',
            image: signal.image || signal.attachment_data,
        attachment_data: signal.attachment_data || signal.image,
        attachment_type: signal.attachment_type,
        attachment_name: signal.attachment_name,
        closure_image: signal.closure_image,
        closure_image_type: signal.closure_image_type,
        closure_image_name: signal.closure_image_name,
            timestamp: new Date(signal.timestamp || Date.now()).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
            originalTimestamp: signal.timestamp || Date.now(),
            status: signal.status || 'ACTIVE' as const,
            channel_id: signal.channel_id,
            reactions: signal.reactions || [],
            pnl: signal.pnl,
            closeMessage: signal.closeMessage
          }));
          
          setAllSignalsForStats(formattedSignals);
          console.log(`‚úÖ ${formattedSignals.length} signaux format√©s charg√©s pour statistiques au total`);
          console.log('üìä Signaux par canal:', channels.map(ch => ({
            channel: ch,
            count: formattedSignals.filter(s => s.channel_id === ch).length
          })));
        } else {
          console.log('‚ö†Ô∏è Aucun signal trouv√© pour les statistiques');
        }
      } catch (error) {
        console.error('‚ùå Erreur chargement signaux pour statistiques:', error);
      }
    };

    loadAllSignalsForStats();
  }, []);

  // Fonctions pour calculer les statistiques du jour et mois courant (utilisant realTimeSignals de Firebase)
  const getTodaySignalsForMonth = (): number => {
    const todaySignals = realTimeSignals.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      const today = new Date(currentDate);
      return signalDate.getDate() === today.getDate() && 
             signalDate.getMonth() === today.getMonth() && 
             signalDate.getFullYear() === today.getFullYear();
    });
    return todaySignals.length;
  };

  const getThisMonthSignalsForMonth = (): number => {
    const monthSignals = realTimeSignals.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      return signalDate.getMonth() === currentDate.getMonth() && 
             signalDate.getFullYear() === currentDate.getFullYear();
    });
    return monthSignals.length;
  };

  // Fonctions pour calculer les statistiques du mois courant (utilisant realTimeSignals de Firebase)
  const calculateTotalPnLForMonth = (): number => {
    const monthSignals = realTimeSignals.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      return signalDate.getMonth() === currentDate.getMonth() && 
             signalDate.getFullYear() === currentDate.getFullYear();
    });
    
    return monthSignals.reduce((total, signal) => {
      if (signal.pnl) {
        return total + parsePnL(signal.pnl);
      }
      return total;
    }, 0);
  };

  const calculateWinRateForMonth = (): number => {
    const monthSignals = realTimeSignals.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      return signalDate.getMonth() === currentDate.getMonth() && 
             signalDate.getFullYear() === currentDate.getFullYear();
    });
    
    if (monthSignals.length === 0) return 0;
    const wins = monthSignals.filter(s => s.status === 'WIN').length;
    return Math.round((wins / monthSignals.length) * 100);
  };

  const calculateAvgWinForMonth = (): number => {
    const monthSignals = realTimeSignals.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      return signalDate.getMonth() === currentDate.getMonth() && 
             signalDate.getFullYear() === currentDate.getFullYear();
    });
    
    const winSignals = monthSignals.filter(s => s.status === 'WIN');
    if (winSignals.length === 0) return 0;
    const totalWinPnL = winSignals.reduce((total, signal) => {
      if (signal.pnl) {
        return total + parsePnL(signal.pnl);
      }
      return total;
    }, 0);
    return Math.round(totalWinPnL / winSignals.length);
  };

  const calculateAvgLossForMonth = (): number => {
    const monthSignals = realTimeSignals.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      return signalDate.getMonth() === currentDate.getMonth() && 
             signalDate.getFullYear() === currentDate.getFullYear();
    });
    
    const lossSignals = monthSignals.filter(s => s.status === 'LOSS');
    if (lossSignals.length === 0) return 0;
    const totalLossPnL = lossSignals.reduce((total, signal) => {
      if (signal.pnl) {
        return total + Math.abs(parsePnL(signal.pnl));
      }
      return total;
    }, 0);
    return Math.round(totalLossPnL / lossSignals.length);
  };

  // Fonction pour calculer le Weekly Breakdown dynamique (m√™me pattern que Avg Win)
  const getWeeklyBreakdownForMonth = () => {
    const monthSignals = realTimeSignals.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      return signalDate.getMonth() === currentDate.getMonth() && 
             signalDate.getFullYear() === currentDate.getFullYear();
    });

    // Cr√©er 5 semaines pour le mois courant
    const weeks = [];
    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const today = new Date();
    
    for (let weekNum = 1; weekNum <= 5; weekNum++) {
      const weekStart = new Date(startOfMonth);
      weekStart.setDate(1 + (weekNum - 1) * 7);
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 6);
      
      // Filtrer les signaux de cette semaine
      const weekSignals = monthSignals.filter(signal => {
        const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
        return signalDate >= weekStart && signalDate <= weekEnd;
      });
      
      const wins = weekSignals.filter(s => s.status === 'WIN').length;
      const losses = weekSignals.filter(s => s.status === 'LOSS').length;
      const pnl = weekSignals.reduce((total, signal) => {
        if (signal.pnl) {
          return total + parsePnL(signal.pnl);
        }
        return total;
      }, 0);
      
      // V√©rifier si c'est la semaine courante
      const isCurrentWeek = today >= weekStart && today <= weekEnd;
      
      weeks.push({
        week: `Week ${weekNum}`,
        weekNum,
        trades: weekSignals.length,
        wins,
        losses,
        pnl: Math.round(pnl),
        isCurrentWeek
      });
    }
    
    return weeks;
  };

  // Stats synchronis√©es en temps r√©el avec l'admin (plus besoin de calculer)
  const calculateTotalPnL = (): number => stats.totalPnL;
  const calculateWinRate = (): number => stats.winRate;
  const calculateAvgWin = (): number => stats.avgWin;
  const calculateAvgLoss = (): number => stats.avgLoss;

  const getTodaySignals = () => {
    const today = new Date();
    return signals.filter(s => {
      const signalDate = new Date(s.timestamp);
      return signalDate.getDate() === today.getDate() &&
             signalDate.getMonth() === today.getMonth() &&
             signalDate.getFullYear() === today.getFullYear();
    });
  };

  const getThisMonthSignals = () => {
    const today = new Date();
    return signals.filter(s => {
      const signalDate = new Date(s.timestamp);
      return signalDate.getMonth() === today.getMonth() &&
             signalDate.getFullYear() === today.getFullYear();
    });
  };

  // √âtats pour forcer la mise √† jour des stats
  const [statsUpdateTrigger, setStatsUpdateTrigger] = useState(0);

  // Forcer la mise √† jour des stats quand le compte ou les trades changent
  useEffect(() => {
    console.log('üîÑ Trigger stats update - Account:', selectedAccount, 'Trades:', personalTrades.length);
    setStatsUpdateTrigger(prev => prev + 1);
  }, [selectedAccount, personalTrades]);

  // Fonctions pour les statistiques des trades personnels (filtr√©es par compte)
  const getTradesForSelectedAccount = () => {
    const filtered = personalTrades.filter(trade => 
      (trade.account || 'Compte Principal') === selectedAccount
    );
    console.log('üîç DEBUG getTradesForSelectedAccount:', {
      selectedAccount,
      totalTrades: personalTrades.length,
      filteredTrades: filtered.length,
      allTrades: personalTrades.map(t => ({ symbol: t.symbol, account: t.account || 'Compte Principal' }))
    });
    return filtered;
  };

  // Calculer le solde total du compte (balance initiale + P&L des trades)
  const calculateAccountBalance = (): number => {
    const account = tradingAccounts.find(acc => acc.account_name === selectedAccount);
    let initialBalance = account?.initial_balance || 0;
    
    // Fallback vers localStorage si pas dans le compte
    if (!initialBalance) {
      const savedBalances = localStorage.getItem('accountBalances');
      if (savedBalances) {
        const balances = JSON.parse(savedBalances);
        initialBalance = balances[selectedAccount] || 0;
      }
    }
    
    const pnl = calculateTotalPnLTrades();
    return initialBalance + pnl;
  };

  // Calculer le stop-loss trailing
  const calculateTrailingStopLoss = () => {
    const account = tradingAccounts.find(acc => acc.account_name === selectedAccount);
    const currentBalance = calculateAccountBalance();
    const initialBalance = account?.initial_balance || 0;
    const initialStopLoss = account?.minimum_balance || 0;
    
    if (initialStopLoss === 0) {
      return { currentStopLoss: null, remaining: null, percentage: null, isAtRisk: false };
    }
    
    // Calculer le P&L total
    const pnl = calculateTotalPnLTrades();
    
    // Stop-loss trailing : il monte avec les gains mais ne descend jamais
    const trailingStopLoss = Math.max(initialStopLoss, initialStopLoss + Math.max(0, pnl));
    
    const remaining = currentBalance - trailingStopLoss;
    const percentage = trailingStopLoss > 0 ? ((currentBalance / trailingStopLoss) - 1) * 100 : 0;
    const isAtRisk = remaining < (currentBalance * 0.1); // Alerte si moins de 10% de marge
    
    return { 
      currentStopLoss: trailingStopLoss, 
      remaining, 
      percentage, 
      isAtRisk,
      pnl 
    };
  };

  const calculateTotalPnLTrades = (): number => {
    return getTradesForSelectedAccount().reduce((total, trade) => total + parsePnL(trade.pnl), 0);
  };

  const calculateWinRateTrades = (): number => {
    const accountTrades = getTradesForSelectedAccount();
    if (accountTrades.length === 0) return 0;
    const wins = accountTrades.filter(t => t.status === 'WIN').length;
    return Math.round((wins / accountTrades.length) * 100);
  };


  const calculateAvgWinTrades = (): number => {
    const accountTrades = getTradesForSelectedAccount();
    const winTrades = accountTrades.filter(t => t.status === 'WIN');
    if (winTrades.length === 0) return 0;
    const totalWinPnL = winTrades.reduce((total, trade) => total + parsePnL(trade.pnl), 0);
    return Math.round(totalWinPnL / winTrades.length);
  };

  const calculateAvgLossTrades = (): number => {
    const accountTrades = getTradesForSelectedAccount();
    const lossTrades = accountTrades.filter(t => t.status === 'LOSS');
    if (lossTrades.length === 0) return 0;
    const totalLossPnL = lossTrades.reduce((total, trade) => total + Math.abs(parsePnL(trade.pnl)), 0);
    return Math.round(totalLossPnL / lossTrades.length);
  };

  const getTodayTrades = () => {
    const today = new Date().toISOString().split('T')[0];
    return getTradesForSelectedAccount().filter(t => t.date === today);
  };

  const getThisMonthTrades = () => {
    const today = new Date();
    return getTradesForSelectedAccount().filter(t => {
      const tradeDate = new Date(t.date);
      return tradeDate.getMonth() === today.getMonth() &&
             tradeDate.getFullYear() === today.getFullYear();
    });
  };

  // Fonctions pour calculer les stats du mois affich√© dans le calendrier (trades personnels)
  const getTradesForMonth = (date: Date) => {
    return getTradesForSelectedAccount().filter(t => {
      const tradeDate = new Date(t.date);
      return tradeDate.getMonth() === date.getMonth() &&
             tradeDate.getFullYear() === date.getFullYear();
    });
  };

  const calculateTotalPnLTradesForMonth = (): number => {
    const monthTrades = getTradesForMonth(currentDate);
    return monthTrades.reduce((total, trade) => total + parsePnL(trade.pnl), 0);
  };

  const calculateWinRateTradesForMonth = (): number => {
    const monthTrades = getTradesForMonth(currentDate);
    if (monthTrades.length === 0) return 0;
    const wins = monthTrades.filter(t => t.status === 'WIN').length;
    return Math.round((wins / monthTrades.length) * 100);
  };

  const calculateAvgWinTradesForMonth = (): number => {
    const monthTrades = getTradesForMonth(currentDate);
    const winTrades = monthTrades.filter(t => t.status === 'WIN');
    if (winTrades.length === 0) return 0;
    const totalWinPnL = winTrades.reduce((total, trade) => total + parsePnL(trade.pnl), 0);
    return Math.round(totalWinPnL / winTrades.length);
  };

  const calculateAvgLossTradesForMonth = (): number => {
    const monthTrades = getTradesForMonth(currentDate);
    const lossTrades = monthTrades.filter(t => t.status === 'LOSS');
    if (lossTrades.length === 0) return 0;
    const totalLossPnL = lossTrades.reduce((total, trade) => total + Math.abs(parsePnL(trade.pnl)), 0);
    return Math.round(totalLossPnL / lossTrades.length);
  };

  // Fonctions pour analyser les pertes par raison
  const getLossAnalysis = () => {
    const accountTrades = getTradesForSelectedAccount();
    const lossTrades = accountTrades.filter(t => t.status === 'LOSS');
    
    console.log('üîç DEBUG Loss analysis - Total trades:', accountTrades.length);
    console.log('üîç DEBUG Loss analysis - Loss trades:', lossTrades.length);
    console.log('üîç DEBUG Loss analysis - All loss trades:', lossTrades);
    console.log('üîç DEBUG Loss analysis - Loss trades with reasons:', lossTrades.filter(t => t.lossReason && t.lossReason.trim() !== ''));
    
    // Grouper les pertes par raison
    const lossByReason: { [key: string]: { count: number, totalPnl: number, trades: any[] } } = {};
    
    lossTrades.forEach(trade => {
      const reason = trade.lossReason || 'non_specifiee';
      if (!lossByReason[reason]) {
        lossByReason[reason] = { count: 0, totalPnl: 0, trades: [] };
      }
      lossByReason[reason].count++;
      lossByReason[reason].totalPnl += parsePnL(trade.pnl);
      lossByReason[reason].trades.push(trade);
    });
    
    // Convertir en array et trier par fr√©quence
    // Filtrer pour exclure les raisons "non_specifiee"
    const sortedReasons = Object.entries(lossByReason)
      .filter(([reason]) => reason !== 'non_specifiee')
      .map(([reason, data]) => ({
        reason,
        count: data.count,
        totalPnl: data.totalPnl,
        avgPnl: Math.round(data.totalPnl / data.count),
        percentage: Math.round((data.count / lossTrades.length) * 100)
      }))
      .sort((a, b) => b.count - a.count);
    
    console.log('üîç DEBUG lossByReason:', lossByReason);
    console.log('üîç DEBUG sortedReasons:', sortedReasons);
    
    return {
      totalLosses: lossTrades.length,
      totalLossPnl: lossTrades.reduce((total, trade) => total + parsePnL(trade.pnl), 0),
      reasons: sortedReasons
    };
  };

  const getLossReasonLabel = (reason: string): string => {
    const labels: { [key: string]: string } = {
      'mauvais_entree': 'üéØ Mauvais point d\'entr√©e',
      'stop_trop_serre': '‚ö†Ô∏è Stop-loss trop serr√©',
      'news_impact': 'üì∞ Impact de news/√©v√©nements',
      'psychologie': 'üß† Erreur psychologique',
      'analyse_technique': 'üìä Erreur d\'analyse technique',
      'gestion_risque': 'üí∞ Mauvaise gestion du risque',
      'timing': '‚è∞ Mauvais timing',
      'volatilite': 'üìà Volatilit√© excessive',
      'autre': 'üîß Autre raison',
      'non_specifiee': '‚ùì Non sp√©cifi√©e'
    };
    return labels[reason] || reason;
  };

  const getTodayTradesForMonth = () => {
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    const monthTrades = getTradesForMonth(currentDate);
    
    // Si c'est le mois actuel, retourner les trades d'aujourd'hui
    if (currentDate.getMonth() === today.getMonth() && currentDate.getFullYear() === today.getFullYear()) {
      return monthTrades.filter(t => t.date === todayStr);
    }
    
    // Sinon retourner 0 car ce n'est pas le mois actuel
    return [];
  };

  const getThisMonthTradesForMonth = () => {
    return getTradesForMonth(currentDate);
  };

  const getWeeklyBreakdownTradesForMonth = () => {
    const month = currentDate.getMonth();
    const year = currentDate.getFullYear();
    
    // Cr√©er 4 semaines du mois affich√© - calculer comme le calendrier
    const weeks = [];
    const firstDayOfMonth = new Date(year, month, 1);
    const lastDayOfMonth = new Date(year, month + 1, 0);
    const firstDayWeekday = firstDayOfMonth.getDay(); // 0 = dimanche, 1 = lundi, etc.
    
    // Ajuster pour que lundi soit 0 (comme le calendrier)
    const adjustedFirstDay = firstDayWeekday === 0 ? 6 : firstDayWeekday - 1;
    
    for (let weekNum = 1; weekNum <= 4; weekNum++) {
      // Calculer le d√©but de la semaine comme dans le calendrier
      const weekStart = new Date(year, month, 1);
      weekStart.setDate(1 - adjustedFirstDay + (weekNum - 1) * 7);
      
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 6);
      
      const weekTrades = getTradesForSelectedAccount().filter(t => {
        const tradeDate = new Date(t.date);
        return tradeDate >= weekStart && 
               tradeDate <= weekEnd &&
               tradeDate.getMonth() === month &&
               tradeDate.getFullYear() === year;
      });
      
      const weekPnL = weekTrades.reduce((total, trade) => total + parsePnL(trade.pnl), 0);
      const wins = weekTrades.filter(t => t.status === 'WIN').length;
      const losses = weekTrades.filter(t => t.status === 'LOSS').length;
      
      // V√©rifier si c'est la semaine actuelle (seulement si c'est le mois actuel)
      const today = new Date();
      const isCurrentMonth = month === today.getMonth() && year === today.getFullYear();
      const todayWeek = Math.ceil(today.getDate() / 7);
      const isCurrentWeek = isCurrentMonth && weekNum === todayWeek;
      
      weeks.push({
        week: `Week ${weekNum}`,
        weekNum: weekNum,
        trades: weekTrades.length,
        pnl: weekPnL,
        wins,
        losses,
        isCurrentWeek
      });
    }
    
    return weeks;
  };

  const calculateRiskReward = (entry: string, takeProfit: string, stopLoss: string): string => {
    const entryNum = parseFloat(entry);
    const tpNum = parseFloat(takeProfit);
    const slNum = parseFloat(stopLoss);
    
    if (isNaN(entryNum) || isNaN(tpNum) || isNaN(slNum)) return 'N/A';
    
    const risk = Math.abs(entryNum - slNum);
    const reward = Math.abs(tpNum - entryNum);
    
    if (risk === 0) return 'N/A';
    
    return (reward / risk).toFixed(2);
  };

  const getWeeklyBreakdown = () => {
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    // Cr√©er 5 semaines du mois en cours
    const weeks = [];
    for (let weekNum = 1; weekNum <= 5; weekNum++) {
      const weekStart = new Date(currentYear, currentMonth, (weekNum - 1) * 7 + 1);
      const weekEnd = new Date(currentYear, currentMonth, weekNum * 7);
      
      const weekSignals = signals.filter(s => {
        const signalDate = new Date(s.timestamp);
        return signalDate >= weekStart && 
               signalDate <= weekEnd &&
               signalDate.getMonth() === currentMonth &&
               signalDate.getFullYear() === currentYear;
      });
      
      const closedSignals = weekSignals.filter(s => s.status !== 'ACTIVE');
      const weekPnL = closedSignals.reduce((total, signal) => total + parsePnL(signal.pnl || '0'), 0);
      const wins = closedSignals.filter(s => s.status === 'WIN').length;
      const losses = closedSignals.filter(s => s.status === 'LOSS').length;
      
      // V√©rifier si c'est la semaine actuelle
      const todayWeek = Math.ceil(today.getDate() / 7);
      const isCurrentWeek = weekNum === todayWeek;
      
      weeks.push({
        week: `Week ${weekNum}`,
        trades: weekSignals.length,
        pnl: weekPnL,
        wins,
        losses,
        isCurrentWeek
      });
    }
    
    return weeks;
  };

  const getWeeklyBreakdownTrades = () => {
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    // Cr√©er 5 semaines du mois en cours
    const weeks = [];
    for (let weekNum = 1; weekNum <= 5; weekNum++) {
      const weekStart = new Date(currentYear, currentMonth, (weekNum - 1) * 7 + 1);
      const weekEnd = new Date(currentYear, currentMonth, weekNum * 7);
      
      const weekTrades = personalTrades.filter(t => {
        const tradeDate = new Date(t.date);
        return tradeDate >= weekStart && 
               tradeDate <= weekEnd &&
               tradeDate.getMonth() === currentMonth &&
               tradeDate.getFullYear() === currentYear;
      });
      
      const weekPnL = weekTrades.reduce((total, trade) => total + parsePnL(trade.pnl), 0);
      const wins = weekTrades.filter(t => t.status === 'WIN').length;
      const losses = weekTrades.filter(t => t.status === 'LOSS').length;
      
      // V√©rifier si c'est la semaine actuelle
      const todayWeek = Math.ceil(today.getDate() / 7);
      const isCurrentWeek = weekNum === todayWeek;
      
      weeks.push({
        week: `Week ${weekNum}`,
        weekNum: weekNum,
        trades: weekTrades.length,
        pnl: weekPnL,
        wins,
        losses,
        isCurrentWeek
      });
    }
    
    return weeks;
  };

  // Fonction pour ajouter une r√©action flamme √† un message (c√¥t√© utilisateur)
  const handleAddReaction = async (messageId: string) => {
    try {
      console.log('üî• handleAddReaction called:', { messageId });
      
      // V√©rifier que messageId est valide
      if (!messageId) {
        console.error('‚ùå messageId invalide:', messageId);
        return;
      }
      
      const currentUser = user?.email || 'Anonymous';
      console.log('üë§ Utilisateur actuel:', currentUser);
      
      // Mettre √† jour localement d'abord
      setMessageReactions(prev => {
        if (!prev || typeof prev !== 'object') {
          console.error('‚ùå messageReactions n\'est pas un objet:', prev);
          return prev;
        }
        
        const current = prev[messageId] || { fire: 0, users: [] };
        const userIndex = Array.isArray(current.users) ? current.users.indexOf(currentUser) : -1;
        
        if (userIndex === -1) {
          // Ajouter la r√©action
          console.log('‚ûï Ajouter r√©action pour:', messageId);
          return {
            ...prev,
            [messageId]: {
              fire: (current.fire || 0) + 1,
              users: [...(current.users || []), currentUser]
            }
          };
        } else {
          // Retirer la r√©action
          console.log('‚ûñ Retirer r√©action pour:', messageId);
          return {
            ...prev,
            [messageId]: {
              fire: Math.max(0, (current.fire || 0) - 1),
              users: (current.users || []).filter((_, index) => index !== userIndex)
            }
          };
        }
      });
      
      // Sauvegarder dans Firebase
      const current = messageReactions[messageId] || { fire: 0, users: [] };
      const userIndex = Array.isArray(current.users) ? current.users.indexOf(currentUser) : -1;
      
      let newReactions;
      if (userIndex === -1) {
        newReactions = {
          fire: (current.fire || 0) + 1,
          users: [...(current.users || []), currentUser]
        };
      } else {
        newReactions = {
          fire: Math.max(0, (current.fire || 0) - 1),
          users: (current.users || []).filter((_, index) => index !== userIndex)
        };
      }
      
      console.log('üíæ Sauvegarde Firebase:', { messageId, newReactions, currentUser });
      await updateMessageReactions(messageId, newReactions);
      console.log('‚úÖ R√©action message synchronis√©e:', messageId, newReactions, 'par utilisateur:', currentUser);
      
    } catch (error) {
      console.error('‚ùå Erreur r√©action message:', error);
              console.error('Erreur lors de l\'ajout de la r√©action');
    }
  };

  // Fonction handleReaction supprim√©e - les r√©actions sont d√©sactiv√©es c√¥t√© utilisateur

  const scrollToTop = () => {
    // Pour les salons de chat, scroller dans le conteneur de messages
          if (messagesContainerRef.current && ['fondamentaux', 'letsgooo-model', 'general-chat-2', 'general-chat-3', 'general-chat-4', 'profit-loss', 'video'].includes(selectedChannel.id)) {
      messagesContainerRef.current.scrollTop = 0;
    } else {
      // Pour les autres vues, scroller la page
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };

  // √âtat pour √©viter les scrolls multiples
  const [isScrolling, setIsScrolling] = useState(false);

  const scrollToBottom = () => {
    // √âviter les scrolls multiples
    if (isScrolling) {
      console.log('‚è∏Ô∏è Scroll d√©j√† en cours, ignor√©');
      return;
    }
    
    setIsScrolling(true);
    
    // Scroller vers le bas pour voir les messages les plus r√©cents
    console.log('üîÑ Scrolling to bottom user...', {
      hasRef: !!messagesContainerRef.current,
      channelId: selectedChannel.id
    });
    
    // M√©thode 1: Avec la r√©f√©rence
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
    }
    
    // M√©thode 2: Avec s√©lecteur CSS comme backup
    const scrollContainer = document.querySelector('.overflow-y-auto.overflow-x-hidden.p-4.space-y-4.pb-32');
    if (scrollContainer) {
      scrollContainer.scrollTop = scrollContainer.scrollHeight;
      console.log('‚úÖ Scroll with CSS selector worked');
    }
    
    // M√©thode 3: Forcer avec tous les conteneurs possibles
    const allContainers = document.querySelectorAll('[class*="overflow-y-auto"]');
    allContainers.forEach((container, index) => {
      container.scrollTop = container.scrollHeight;
      console.log(`üìú Scrolled container ${index}`);
    });
    
    // R√©initialiser le flag apr√®s un d√©lai
    setTimeout(() => {
      setIsScrolling(false);
      console.log('‚úÖ Scroll to bottom user completed');
    }, 300);
  };

  const handleLogout = async () => {
    console.log('üö™ D√©connexion utilisateur en cours...');
    
    try {
      // SOLUTION RADICALE: Supprimer TOUS les tokens FCM
      try {
        console.log('üîî üî¥ SUPPRESSION COMPL√àTE DE TOUS LES TOKENS FCM...');
        const { getMessaging, deleteToken } = await import('firebase/messaging');
        const { ref, remove, get } = await import('firebase/database');
        const { database } = await import('../../utils/firebase-setup');
        
        // 0. D√âSACTIVER D√âFINITIVEMENT LES NOTIFICATIONS POUR CET UTILISATEUR
        localStorage.setItem('notificationsDisabled', 'true');
        console.log('üî¥ FLAG notificationsDisabled activ√© - emp√™che r√©initialisation automatique');
        
        // 1. Supprimer le token du localStorage
        const storedToken = localStorage.getItem('fcmToken');
        if (storedToken) {
          console.log('üóëÔ∏è Token FCM trouv√© dans localStorage:', storedToken.substring(0, 20) + '...');
          localStorage.removeItem('fcmToken');
          console.log('‚úÖ Token FCM supprim√© de localStorage');
        }
        
        // 2. R√©cup√©rer et supprimer le token FCM actuel du navigateur
        try {
          const messaging = getMessaging();
          const currentToken = await (messaging as any).getToken();
          
          if (currentToken) {
            console.log('üóëÔ∏è Token FCM actuel du navigateur:', currentToken.substring(0, 20) + '...');
            
            // Supprimer de Firebase Database
            const tokenKey = currentToken.replace(/[.#$[\]]/g, '_');
            const tokenRef = ref(database, `fcm_tokens/${tokenKey}`);
            await remove(tokenRef);
            console.log('‚úÖ Token supprim√© de Firebase Database');
            
            // Supprimer du navigateur
            await deleteToken(messaging);
            console.log('‚úÖ Token supprim√© du navigateur');
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Erreur r√©cup√©ration token actuel (normal si d√©j√† supprim√©):', error.message);
        }
        
        // 3. SUPPRIMER TOUS LES TOKENS DE FIREBASE DATABASE (approche radicale)
        try {
          console.log('üîî üî¥ SUPPRESSION DE TOUS LES TOKENS DANS FIREBASE...');
          const fcmTokensRef = ref(database, 'fcm_tokens');
          const snapshot = await get(fcmTokensRef);
          
          if (snapshot.exists()) {
            const tokensData = snapshot.val();
            console.log('üìä Nombre total de tokens trouv√©s:', Object.keys(tokensData).length);
            
            // Supprimer TOUS les tokens (solution radicale pour mobile)
            for (const tokenKey of Object.keys(tokensData)) {
              console.log('üóëÔ∏è Suppression token:', tokenKey.substring(0, 20) + '...');
              await remove(ref(database, `fcm_tokens/${tokenKey}`));
            }
            console.log('‚úÖ ‚úÖ ‚úÖ TOUS LES TOKENS SUPPRIM√âS DE FIREBASE');
          } else {
            console.log('‚ö†Ô∏è Aucun token trouv√© dans Firebase Database');
          }
        } catch (error) {
          console.error('‚ùå Erreur suppression totale des tokens:', error);
        }
        
        // 4. D√©sinscrire TOUS les service workers
        try {
          if ('serviceWorker' in navigator) {
            const registrations = await navigator.serviceWorker.getRegistrations();
            console.log('üìä Nombre de service workers trouv√©s:', registrations.length);
            
            for (const registration of registrations) {
              console.log('üóëÔ∏è D√©sinscription service worker:', registration.scope);
              await registration.unregister();
            }
            console.log('‚úÖ Tous les service workers d√©sinscrits');
          }
        } catch (error) {
          console.error('‚ùå Erreur d√©sinscription service workers:', error);
        }
        
        console.log('‚úÖ ‚úÖ ‚úÖ NETTOYAGE COMPLET DES NOTIFICATIONS TERMIN√â');
        
      } catch (error) {
        console.error('‚ùå Erreur suppression notifications:', error);
      }
      
      // D√©connexion Supabase
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error('‚ùå Erreur d√©connexion Supabase:', error);
      } else {
        console.log('‚úÖ D√©connexion Supabase r√©ussie');
      }
      
      // Nettoyage complet du localStorage (sauf les photos de profil)
      const keysToRemove = [
        'signals', 'chat_messages', 'trading_stats', 'user_session',
        'userUsername', 'adminUsername', 'messageReactions', 'lastReadTimes',
        'userProfiles', 'supabaseProfile'
      ];
      
      keysToRemove.forEach(key => {
        localStorage.removeItem(key);
        console.log(`üßπ Supprim√©: ${key}`);
      });
      
      // Nettoyer les cl√©s localStorage sp√©cifiques √† l'utilisateur actuel
      if (user) {
        const userSpecificKey = `userUsername_${user.id}`;
        localStorage.removeItem(userSpecificKey);
        console.log(`üßπ Supprim√© cl√© utilisateur sp√©cifique: ${userSpecificKey}`);
      }
      
      console.log('üßπ Nettoyage localStorage termin√©');
      
      // Forcer un rechargement complet de la page (hard reload)
      console.log('üîÑ Rechargement complet de la page...');
      window.location.replace('/');
      setTimeout(() => {
        window.location.reload();
      }, 100);
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©connexion:', error);
      // En cas d'erreur, forcer quand m√™me le rechargement
      window.location.replace('/');
      setTimeout(() => {
        window.location.reload();
      }, 100);
    }
  };

  const handleProfileImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    console.log('üìÅ USER File selected:', file ? file.name : 'NO FILE');
    if (file && file.type.startsWith('image/')) {
      console.log('üñºÔ∏è USER Processing image...');
      const reader = new FileReader();
      reader.onload = async (e) => {
        const base64Image = e.target?.result as string;
        console.log('üíæ USER Syncing to localStorage AND Supabase...');
        
        // Mettre √† jour l'√©tat imm√©diatement
        setProfileImage(base64Image);
        
        // Synchroniser avec localStorage et Supabase
        const result = await syncProfileImage('user', base64Image);
        if (result.success) {
          console.log('‚úÖ USER Profile image synchronized across all devices!');
        } else {
          console.error('‚ùå USER Sync failed:', result.error);
        }
        
        // Aussi sauvegarder dans le profil utilisateur
        await updateUserProfile(currentUsername || undefined, base64Image, 'user');
        console.log('‚úÖ Avatar sauvegard√© dans le profil utilisateur');
      };
      reader.readAsDataURL(file);
    }
  };

  const handleStartStream = () => {
    if (!streamTitle.trim()) {
      console.warn('Veuillez entrer un titre pour votre stream');
      return;
    }
    setIsLiveStreaming(true);
    setViewerCount(Math.floor(Math.random() * 50) + 10); // Simuler des viewers
  };

  const handleStopStream = () => {
    setIsLiveStreaming(false);
    setViewerCount(0);
  };

  const handleShareScreen = () => {
    if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {
      navigator.mediaDevices.getDisplayMedia({ video: true })
        .then(stream => {
          console.log('Stream obtenu:', stream);
          
          // Cr√©er un √©l√©ment vid√©o simple
          const video = document.createElement('video');
          video.className = 'w-full h-full object-contain';
          video.autoplay = true;
          video.muted = true;
          video.playsInline = true;
          video.srcObject = stream;
          
          // Trouver sp√©cifiquement les conteneurs de 
          const Containers = document.querySelectorAll('.bg-gray-900 .bg-black.flex.items-center.justify-center');
          console.log('Conteneurs  trouv√©s:', Containers.length);
          
          if (Containers.length === 0) {
            // Fallback: chercher tous les conteneurs noirs
            const allContainers = document.querySelectorAll('.bg-black.flex.items-center.justify-center');
            console.log('Tous les conteneurs trouv√©s:', allContainers.length);
            
            allContainers.forEach((container, index) => {
              console.log(`Remplacer conteneur ${index}`);
              container.innerHTML = '';
              const videoClone = video.cloneNode(true) as HTMLVideoElement;
              container.appendChild(videoClone);
              
              // Lancer la lecture pour chaque clone
              videoClone.play().then(() => {
                console.log(`Vid√©o ${index} en cours de lecture`);
              }).catch(err => {
                console.error(`Erreur lecture vid√©o ${index}:`, err);
              });
            });
          } else {
            // Utiliser les conteneurs de  sp√©cifiques
            Containers.forEach((container, index) => {
              console.log(`Remplacer conteneur  ${index}`);
              container.innerHTML = '';
              const videoClone = video.cloneNode(true) as HTMLVideoElement;
              container.appendChild(videoClone);
              
              // Lancer la lecture pour chaque clone
              videoClone.play().then(() => {
                console.log(`Vid√©o  ${index} en cours de lecture`);
              }).catch(err => {
                console.error(`Erreur lecture vid√©o  ${index}:`, err);
              });
            });
          }
          
          // Mettre √† jour l'√©tat
          setIsLiveStreaming(true);
          setViewerCount(15);
        })
        .catch(err => {
          console.error('Erreur partage d\'√©cran:', err);
          console.error('Erreur lors du partage d\'√©cran:', err.message);
        });
    } else {
      console.error('Partage d\'√©cran non support√© sur ce navigateur');
    }
  };

  // Fonction handleSignalStatus supprim√©e - seul admin peut changer le statut des signaux

  // Scroll automatique vers le bas quand de nouveaux messages arrivent, quand on change de canal, ou quand les signaux changent
  // Mais PAS pour le calendrier et trading journal
  useEffect(() => {
    // Exclure le calendrier et trading journal du scroll automatique
    if (!['calendrier', 'trading-journal'].includes(selectedChannel.id)) {
      setTimeout(() => {
        if (messagesContainerRef.current) {
          messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
        }
      }, 100);
    }
  }, [messages, selectedChannel.id, signals]);

  // Fonction supprim√©e - seul admin peut cr√©er des signaux

  // Fonctions pour le journal de trading personnalis√©
  const handleAddTrade = () => {
    setShowTradeModal(true);
  };

  const handleTradeSubmit = async () => {
    console.log('üî• handleTradeSubmit appel√© !');
    console.log('üî• tradeData:', tradeData);
    
    if (!tradeData.symbol || !tradeData.entry || !tradeData.exit || !tradeData.pnl) {
      console.warn('‚ùå Champs manquants:', {
        symbol: tradeData.symbol,
        entry: tradeData.entry,
        exit: tradeData.exit,
        pnl: tradeData.pnl
      });
      alert('Veuillez remplir les champs obligatoires (Symbol, Entry, Exit, PnL)');
      return;
    }

    // Utiliser la date locale pour √©viter le d√©calage UTC
    const getDateString = (date: Date) => {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    };

    const newTrade = {
      date: selectedDate ? getDateString(selectedDate) : getDateString(new Date()),
      symbol: tradeData.symbol,
      type: tradeData.type,
      entry: tradeData.entry,
      exit: tradeData.exit,
      stopLoss: tradeData.stopLoss,
      pnl: tradeData.pnl,
      status: tradeData.status,
      lossReason: tradeData.lossReason,
      notes: tradeData.notes,
      image1: tradeData.image1,
      image2: tradeData.image2,
      timestamp: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
      account: selectedAccount
    };
    
    console.log('üîç DEBUG Adding trade:', newTrade);
    console.log('üîç DEBUG Selected account:', selectedAccount);
    console.log('üîç DEBUG Loss reason:', tradeData.lossReason);

    // Sauvegarder dans Supabase
    console.log('üöÄ Tentative de sauvegarde dans Supabase...');
    try {
      const savedTrade = await addPersonalTrade(newTrade as any);
      console.log('üìù R√©sultat addPersonalTrade:', savedTrade);
      
      if (savedTrade) {
        // Ajouter √† la liste locale
        setPersonalTrades(prev => {
          const updated = [savedTrade, ...prev];
          console.log('üîç DEBUG Updated personalTrades:', updated.length, 'trades');
          console.log('üîç DEBUG New trade added:', savedTrade);
          return updated;
        });
        
        // Reset form
        setTradeData({
          symbol: '',
          type: 'BUY',
          entry: '',
          exit: '',
          stopLoss: '',
          pnl: '',
          status: 'WIN',
          lossReason: '',
          notes: '',
          image1: null,
          image2: null
        });
        setShowTradeModal(false);
        console.log('‚úÖ Trade ajout√© avec succ√®s dans Supabase !');
      } else {
        console.error('‚ùå Erreur lors de la sauvegarde du trade - savedTrade est null');
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde du trade:', error);
      alert('Erreur lors de la sauvegarde: ' + error.message);
    }
  };

  // FIXED: Completely rewritten TradingView paste handler to match Google Apps Script logic
  const handleTradingViewPasteTrade = (e: React.ClipboardEvent<HTMLDivElement>) => {
    e.preventDefault();
    const pastedHtml = e.clipboardData.getData('text/html') || '';
    const pastedText = e.clipboardData.getData('text') || '';
    
    console.log('üìã Paste detected - HTML:', pastedHtml.slice(0, 300));
    console.log('üìã Paste detected - Text:', pastedText.slice(0, 300));
    
    // Store extracted data
    const extracted: Record<string, any> = {};
    let found = false;
    
    // Check if we have TradingView data
    if (pastedHtml.includes('data-tradingview-clip')) {
      try {
        // Extract the TradingView JSON data
        const regex = /data-tradingview-clip="([^"]+)"/;
        const match = pastedHtml.match(regex);
        
        if (match && match[1]) {
          // Replace HTML entities in the JSON string
          const jsonString = match[1].replace(/&(?:quot|#34);/g, '"');
          const data = JSON.parse(jsonString);
          
          console.log('üìä TradingView data parsed:', data);
          
          // Extract source and points - similar to Google Apps Script
          const source = data.sources?.[0]?.source;
          const points = source?.points;
          const state = source?.state;
          const stopLevel = state?.stopLevel;
          const profitLevel = state?.profitLevel;
          
          if (points && points.length >= 2) {
            found = true;
            
            // Get ticker symbol and clean it
            let symbolFull = state?.symbol || "";
            let ticker = symbolFull.split(":")[1] || symbolFull;
            // Clean common futures symbols
            if (ticker.startsWith("NQ1")) ticker = "NQ";
            else if (ticker.startsWith("ES1")) ticker = "ES";
            else if (ticker.startsWith("MNQ")) ticker = "MNQ";
            
            extracted.symbol = ticker;
            
            // Determine trade type from the tool
            const type = source?.type;
            if (type === "LineToolRiskRewardLong" || /long/i.test(type)) {
              extracted.tradeType = 'BUY';
              extracted.outcome = 'WIN'; // Default to WIN
            } else if (type === "LineToolRiskRewardShort" || /short/i.test(type)) {
              extracted.tradeType = 'SELL';
              extracted.outcome = 'WIN'; // Default to WIN
            }
            
            // Extract price information
            const entryPrice = points[0]?.price;
            if (entryPrice !== undefined) {
              extracted.entryPrice = entryPrice.toString();
            }
            
            // For exit price, use the last point
            if (points.length > 1) {
              const exitPrice = points[points.length - 1]?.price;
              if (exitPrice !== undefined) {
                extracted.exitPrice = exitPrice.toString();
              }
            }
            
            // Calculate Risk:Reward ratio if available
            if (stopLevel !== undefined && profitLevel !== undefined) {
              const rrRatio = Math.round((profitLevel / stopLevel) * 100) / 100;
              extracted.rr = rrRatio.toString();
              
              // Calculate Stop Loss based on entry price and stopLevel
              if (entryPrice !== undefined) {
                let slPrice;
                if (extracted.tradeType === 'BUY') {
                  // For Long trades
                  const stopDistance = stopLevel / 4; // Similar to Google Script
                  slPrice = entryPrice - stopDistance;
                } else {
                  // For Short trades
                  const stopDistance = stopLevel / 4;
                  slPrice = entryPrice + stopDistance;
                }
                extracted.stopLoss = slPrice.toString();
              }
            }
            
            // Extract timestamps for entry/exit if available
            if (points[0]?.time_t) {
              const entryTimestamp = points[0].time_t;
              const entryDate = new Date(entryTimestamp * 1000);
              
              // Format entry time for the form
              const entryTimeStr = entryDate.toTimeString().split(' ')[0].slice(0, 5);
              extracted.entryTime = entryTimeStr;
              
              // If we have exit timestamp
              if (points.length > 1 && points[1]?.time_t) {
                const exitTimestamp = points[1].time_t;
                const exitDate = new Date(exitTimestamp * 1000);
                const exitTimeStr = exitDate.toTimeString().split(' ')[0].slice(0, 5);
                extracted.exitTime = exitTimeStr;
                
                // Calculate trade duration
                const durationMs = (exitTimestamp - entryTimestamp) * 1000;
                const durationMin = Math.round(durationMs / 60000);
                
                if (durationMin < 60) {
                  extracted.tradeDuration = `${durationMin}m`;
                } else {
                  const hours = Math.floor(durationMin / 60);
                  const mins = durationMin % 60;
                  extracted.tradeDuration = `${hours}h ${mins}m`;
                }
              }
            }
            
            // Try to determine session based on entry time
            if (points[0]?.time_t) {
              const entryDate = new Date(points[0].time_t * 1000);
              let entryHour = entryDate.getUTCHours() - 4; // EST offset
              if (entryHour < 0) entryHour += 24;
              
              let session = "";
              if (entryHour >= 0 && entryHour < 3) session = "Asian Session";
              else if (entryHour >= 3 && entryHour < 8) session = "London";
              else if (entryHour >= 8 && entryHour < 12) session = "London/NY Overlap";
              else if (entryHour >= 12 && entryHour < 17) session = "New York PM";
              
              if (session) {
                extracted.session = session;
              }
            }
            
            // Calculate PNL if we have entry and exit
            if (extracted.entryPrice && extracted.exitPrice) {
              const entry = parseFloat(extracted.entryPrice);
              const exit = parseFloat(extracted.exitPrice);
              let pnl = 0;
              
              if (extracted.tradeType === 'BUY') {
                pnl = exit - entry;
              } else {
                pnl = entry - exit;
              }
              
              extracted.pnl = pnl.toString();
            }
          }
        }
      } catch (err) {
        console.error("‚ùå Error parsing TradingView data:", err);
      }
    }
    
    // Fallback to plain-text parsing if we didn't find structured data
    if (!found) {
      if (/long/i.test(pastedText)) {
        extracted.tradeType = 'BUY';
        extracted.outcome = 'WIN';
        found = true;
      } else if (/short/i.test(pastedText)) {
        extracted.tradeType = 'SELL';
        extracted.outcome = 'WIN';
        found = true;
      }
      
      // Try to extract symbol
      const sym = pastedText.match(/\b([A-Z]{1,6}\d*(?:USD|BTC|ETH|EUR)?)\b/);
      if (sym) {
        extracted.symbol = sym[1];
        found = true;
      }
      
      // Try to extract numbers as prices
      const nums = pastedText.match(/\b\d+(\.\d+)?\b/g) || [];
      if (nums.length >= 2) {
        extracted.entryPrice = nums[0];
        extracted.exitPrice = nums[1];
        if (nums.length >= 3) {
          extracted.stopLoss = nums[2];
        }
        found = true;
      }
    }
    
    // Apply extracted data to the form
    if (found) {
      console.log('‚úÖ Donn√©es extraites:', extracted);
      
      // Update form data with extracted values
    if (extracted.symbol) setTradeData(prev => ({ ...prev, symbol: extracted.symbol }));
      if (extracted.tradeType) setTradeData(prev => ({ ...prev, type: extracted.tradeType }));
      if (extracted.outcome) setTradeData(prev => ({ ...prev, status: extracted.outcome }));
    if (extracted.entryPrice) setTradeData(prev => ({ ...prev, entry: extracted.entryPrice }));
    if (extracted.exitPrice) setTradeData(prev => ({ ...prev, exit: extracted.exitPrice }));
    if (extracted.stopLoss) setTradeData(prev => ({ ...prev, stopLoss: extracted.stopLoss }));
      if (extracted.pnl) setTradeData(prev => ({ ...prev, pnl: extracted.pnl }));
      
      // Add extracted info to notes
      if (Object.keys(extracted).length > 0) {
        const noteAddition = `Import√© depuis TradingView:\n${JSON.stringify(extracted, null, 2)}`;
        setTradeData(prev => ({ 
          ...prev, 
          notes: prev.notes ? `${prev.notes}\n\n${noteAddition}` : noteAddition 
        }));
      }
    } else {
      // If nothing parsed, just dump the raw text into notes
      setTradeData(prev => ({ 
        ...prev, 
        notes: `Pasted text:\n${pastedText}\n\n${prev.notes || ''}` 
      }));
      console.warn('‚ö†Ô∏è Could not extract structured trade data; added raw text to notes.');
    }
  };

  const getTradesForDate = (date: Date) => {
    try {
      // Utiliser la date locale au lieu de UTC pour √©viter le d√©calage
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const dateStr = `${year}-${month}-${day}`;
      console.log('Recherche trades pour date:', dateStr, 'Compte:', selectedAccount);
      
      // Utiliser les trades du compte s√©lectionn√© au lieu de tous les trades
      const accountTrades = getTradesForSelectedAccount();
      console.log('Trades du compte:', accountTrades);
      
      if (!Array.isArray(accountTrades)) {
        console.error('accountTrades n\'est pas un tableau:', accountTrades);
        return [];
      }
      
      const filteredTrades = accountTrades.filter(trade => {
        if (!trade || !trade.date) {
          console.log('Trade invalide:', trade);
          return false;
        }
        return trade.date === dateStr;
      });
      console.log('Trades filtr√©s:', filteredTrades);
      return filteredTrades;
    } catch (error) {
      console.error('Erreur dans getTradesForDate:', error);
      return [];
    }
  };

  const getTradesForWeek = (weekNum: number) => {
    try {
      // Utiliser les trades du compte s√©lectionn√©
      const accountTrades = getTradesForSelectedAccount();
      
      if (!Array.isArray(accountTrades)) {
        console.error('accountTrades n\'est pas un tableau:', accountTrades);
        return [];
      }

      console.log('üîç DEBUG getTradesForWeek - Trades du compte:', accountTrades);
      console.log('üîç DEBUG getTradesForWeek - Semaine demand√©e:', weekNum);

      const currentDate = new Date();
      const currentMonth = currentDate.getMonth();
      const currentYear = currentDate.getFullYear();
      
      // Premier jour du mois
      const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
      const firstDayOfWeek = firstDayOfMonth.getDay(); // 0 = dimanche, 1 = lundi, etc.
      
      // Calculer le premier lundi du calendrier (peut √™tre dans le mois pr√©c√©dent)
      const calendarStart = new Date(firstDayOfMonth);
      const daysToMonday = firstDayOfWeek === 0 ? -6 : -(firstDayOfWeek - 1);
      calendarStart.setDate(calendarStart.getDate() + daysToMonday);
      
      // Calculer les dates de la semaine demand√©e (7 jours par semaine)
      const weekStart = new Date(calendarStart);
      weekStart.setDate(calendarStart.getDate() + (weekNum - 1) * 7);
      
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 6);
      weekEnd.setHours(23, 59, 59, 999); // Fin de journ√©e
      
      console.log(`üîç Recherche trades pour semaine ${weekNum}:`, weekStart.toDateString(), '√†', weekEnd.toDateString());
      console.log(`üîç Dates des trades:`, accountTrades.map(t => t.date));
      
      const filteredTrades = accountTrades.filter(trade => {
        if (!trade || !trade.date) {
          console.log('üîç Trade invalide:', trade);
          return false;
        }
        
        const tradeDate = new Date(trade.date);
        tradeDate.setHours(0, 0, 0, 0); // D√©but de journ√©e pour comparaison
        
        const weekStartCompare = new Date(weekStart);
        weekStartCompare.setHours(0, 0, 0, 0);
        
        const isInWeek = tradeDate >= weekStartCompare && tradeDate <= weekEnd;
        console.log(`üîç Trade ${trade.date} (${tradeDate.toDateString()}) dans semaine ${weekNum}?`, isInWeek);
        return isInWeek;
      });
      
      console.log(`‚úÖ Trades trouv√©s pour semaine ${weekNum}:`, filteredTrades.length);
      return filteredTrades;
    } catch (error) {
      console.error('‚ùå Erreur dans getTradesForWeek:', error);
      return [];
    }
  };

  const getSignalsForDate = (date: Date) => {
    // Utiliser allSignalsForStats (comme admin)
    return allSignalsForStats.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      
      if (isNaN(signalDate.getTime())) {
        return false;
      }
      
      return signalDate.getDate() === date.getDate() && 
             signalDate.getMonth() === date.getMonth() && 
             signalDate.getFullYear() === date.getFullYear();
    });
  };

  // Fonction pour r√©cup√©rer les signaux d'une semaine sp√©cifique
  const getSignalsForWeek = (weekNum: number): any[] => {
    // Utiliser allSignalsForStats directement (comme getSignalsForDate)
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const currentYear = currentDate.getFullYear();
    
    const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
    const firstDayOfWeek = firstDayOfMonth.getDay();
    const calendarStart = new Date(firstDayOfMonth);
    const daysToMonday = firstDayOfWeek === 0 ? -6 : -(firstDayOfWeek - 1);
    calendarStart.setDate(calendarStart.getDate() + daysToMonday);
    
    const weekStart = new Date(calendarStart);
    weekStart.setDate(calendarStart.getDate() + (weekNum - 1) * 7);
    
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekStart.getDate() + 6);
    weekEnd.setHours(23, 59, 59, 999);
    
    return allSignalsForStats.filter(signal => {
      const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
      
      if (isNaN(signalDate.getTime())) {
        return false;
      }
      
      return signalDate >= weekStart && signalDate <= weekEnd;
    });
  };

  const handleSignalSubmit = async () => {
    // Validation minimale - juste besoin d'au moins un champ rempli
    if (!signalData.symbol && !signalData.entry && !signalData.takeProfit && !signalData.stopLoss && !signalData.description) {
      console.warn('Veuillez remplir au moins un champ pour cr√©er le signal');
      return;
    }

    try {
      // Upload image vers Firebase Storage si pr√©sente
      let attachmentData = null;
      let attachmentType = null;
      let attachmentName = null;
      console.log('üì∏ signalData.image existe?', !!signalData.image);
      if (signalData.image) {
        console.log('üì∏ Upload image vers Firebase Storage...');
        attachmentData = await uploadImage(signalData.image);
        attachmentType = signalData.image.type;
        attachmentName = signalData.image.name;
        console.log('‚úÖ Image upload√©e, URL:', attachmentData);
      }
      
      // Pr√©parer les donn√©es pour Firebase
      const signalForFirebase = {
        channel_id: selectedChannel.id,
        type: signalData.type as 'BUY' | 'SELL',
        symbol: signalData.symbol || 'N/A',
        timeframe: signalData.timeframe || '1 min',
        entry: signalData.entry || '0',
        takeProfit: signalData.takeProfit || '0',
        stopLoss: signalData.stopLoss || '0',
        description: signalData.description || '',
        author: 'TheTheTrader',
        attachment_data: attachmentData,
        attachment_type: attachmentType,
        attachment_name: attachmentName,
        status: 'ACTIVE' as const
      };
      
      console.log('üì§ Envoi √† Firebase avec attachment:', !!signalForFirebase.attachment_data);

      // Sauvegarder en Firebase
      const savedSignal = await addSignal(signalForFirebase);
      console.log('üíæ Signal sauvegard√©:', savedSignal);
      
      if (savedSignal) {
        console.log('‚úÖ Signal sauv√© en Firebase:', savedSignal);
        console.log('Signal cr√©√© et sauv√© en base ! ‚úÖ');
      } else {
        console.error('‚ùå Erreur sauvegarde signal');
        console.error('Erreur lors de la sauvegarde du signal');
        return;
      }
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation signal:', error);
      console.error('Erreur lors de la cr√©ation du signal');
      return;
    }
    
    // Reset form et fermer modal
    setSignalData({
      type: 'BUY',
      symbol: '',
      timeframe: '',
      entry: '',
      takeProfit: '',
      stopLoss: '',
      description: '',
      image: null
    });
    // Modal supprim√©e
  };

  const handleSendMessage = async () => {
    // Protection contre les envois multiples
    if (isSendingMessage) {
      console.log('‚ö†Ô∏è Message d√©j√† en cours d\'envoi, ignor√©');
      return;
    }
    
    if (chatMessage.trim()) {
      setIsSendingMessage(true); // Bloquer les envois multiples
      console.log('üöÄ D√©but envoi message c√¥t√©:', window.matchMedia('(display-mode: standalone)').matches ? 'PWA' : 'Desktop');
      console.log('üìù Message √† envoyer:', chatMessage);
      console.log('üì∫ Canal s√©lectionn√©:', selectedChannel.id);
      console.log('üìä Messages actuels avant envoi:', messages[selectedChannel.id]?.length || 0);
      
      try {
        // Cr√©er le message local pour r√©f√©rence
        const localMessage = {
          id: `local-${Date.now()}`,
          text: chatMessage,
          user: currentUsername || 'Anonyme',
          author: currentUsername || 'Anonyme',
          author_avatar: profileImage || undefined,
          timestamp: new Date().toLocaleString('fr-FR', { 
            day: '2-digit', 
            month: '2-digit', 
            hour: '2-digit', 
            minute: '2-digit' 
          }),
          attachment_data: undefined
        };

        console.log('üì± Message local cr√©√© (pas encore affich√©):', localMessage);

        // Envoyer vers Firebase avec avatar utilisateur
        const messageData = {
          channel_id: selectedChannel.id,
          content: chatMessage,
          author: currentUsername || 'Anonyme',
          author_type: 'user' as const,
          author_avatar: profileImage || undefined // Photo de profil utilisateur
        };

        console.log('üì§ Envoi vers Firebase:', messageData);
        const savedMessage = await addMessage(messageData);

        if (savedMessage) {
          console.log('‚úÖ Message envoy√© √† Firebase:', savedMessage);
          // Le message sera automatiquement ajout√© via la subscription Firebase
          // Pas besoin de manipulation manuelle des messages
          

        } else {
          console.error('‚ùå Erreur envoi message Firebase');
          // En cas d'erreur, on peut ajouter le message local
          setMessages(prev => {
            const currentChannelMessages = prev[selectedChannel.id] || [];
            return {
              ...prev,
              [selectedChannel.id]: [...currentChannelMessages, localMessage]
            };
          });
        }
      } catch (error) {
        console.error('üí• ERREUR envoi message:', error);
        // En cas d'erreur, garder le message local
        console.log('üíæ Message local conserv√© en cas d\'erreur');
      }

      // Ne pas vider le champ de message imm√©diatement
      // setChatMessage('');
      
      // Scroll automatique apr√®s envoi
      setTimeout(() => {
        scrollToBottom();
      }, 50);
      
      // Vider le champ de message
      setChatMessage('');
    }
    
    // R√©activer l'envoi (m√™me en cas d'erreur)
    setIsSendingMessage(false);
  };

                                    const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
                  const file = event.target.files?.[0];
                  if (file) {
                      // Upload image vers Firebase Storage
                      const imageURL = await uploadImage(file);
                      
                      try {
                        // Envoyer √† Firebase avec l'URL de l'image
                        const messageData = {
                          channel_id: selectedChannel.id,
                          content: '',
                      author: currentUsername || 'Anonyme',
                          author_type: 'user' as const,
                          author_avatar: profileImage || undefined,
                          attachment_data: imageURL,
                          attachment_type: file.type,
                          attachment_name: file.name
                        };
                          
                          console.log('üì§ Message data envoy√© utilisateur:', messageData);
                          const savedMessage = await addMessage(messageData);
                          console.log('‚úÖ Message sauvegard√© utilisateur:', savedMessage);
                          
                                                  if (savedMessage) {
                          console.log('‚úÖ Image envoy√©e utilisateur √† Firebase:', savedMessage);
                          // La subscription temps r√©el ajoutera le message automatiquement
                        } else {
                          console.error('‚ùå Erreur envoi image utilisateur Firebase');
                        }
                      } catch (error) {
                        console.error('üí• ERREUR upload image utilisateur:', error);
                      }
                      
                    // Reset the input
                    event.target.value = '';
                      
                      // Scroll automatique apr√®s upload
                      setTimeout(() => {
                        scrollToBottom();
                      }, 50);
                  }
                };

  const parseSignalData = (text: string) => {
    // Chercher tous les nombres
    const numbers = text.match(/\d+(?:\.\d+)?/g);
    
    // Chercher le symbole - patterns plus sp√©cifiques
    let symbol = '';
    
    // Pattern 1: Symboles avec ! (NQ1!, ES!, etc.)
    const futuresMatch = text.match(/([A-Z]{1,3}\d*!)/);
    if (futuresMatch) {
      symbol = futuresMatch[1];
    } else {
      // Pattern 2: Symboles crypto/forex (BTCUSD, EURUSD, etc.)
      const forexMatch = text.match(/([A-Z]{6,8})/);
      if (forexMatch) {
        symbol = forexMatch[1];
      } else {
        // Pattern 3: Symboles simples (BTC, ETH, etc.)
        const cryptoMatch = text.match(/\b([A-Z]{3,4})\b/);
        if (cryptoMatch && !['LONG', 'SHORT', 'BUY', 'SELL'].includes(cryptoMatch[1])) {
          symbol = cryptoMatch[1];
        }
      }
    }
    
    // D√©terminer le type bas√© sur le texte
    let type = 'BUY';
    if (text.toUpperCase().includes('SELL') || text.toUpperCase().includes('SHORT')) {
      type = 'SELL';
    } else if (text.toUpperCase().includes('BUY') || text.toUpperCase().includes('LONG')) {
      type = 'BUY';
    }
    
    // Si on a au moins 1 nombre, on peut commencer √† remplir
    if (numbers && numbers.length >= 1) {
      const newData = {
        symbol: symbol || 'UNKNOWN',
        entry: numbers[0] || '',
        takeProfit: numbers[1] || '', 
        stopLoss: numbers[2] || '',
        type: type
      };
      

      
      setSignalData(prev => ({
        ...prev,
        ...newData
      }));
      
      if (numbers.length >= 3) {
        console.log(`‚úÖ Donn√©es import√©es - Symbole: ${newData.symbol}, Entr√©e: ${newData.entry}, TP: ${newData.takeProfit}, SL: ${newData.stopLoss}`);
      } else {
        console.warn(`‚ö†Ô∏è Donn√©es partielles import√©es - Symbole: ${newData.symbol}, Entr√©e: ${newData.entry}. Compl√©tez les champs manquants`);
      }
      
      return true;
    }
    
    console.warn('‚ùå Aucun nombre d√©tect√©. Exemple : "NQ1! 22950 23004 22896"');
    return false;
  };

  const getTradingCalendar = () => {
    console.log('üî• getTradingCalendar appel√© pour channel:', selectedChannel.id);
    console.log('üî• personalTrades dans calendrier:', personalTrades.length);
    const isJournalPerso = selectedChannel.id === 'journal' || selectedChannel.id === 'trading-journal';
    const isMobile = window.innerWidth < 768;
    return (
    <div className="bg-gray-900 text-white p-2 md:p-4 h-full overflow-y-auto" style={{ paddingTop: (isMobile && isJournalPerso) ? '20px' : '0px', marginTop: (isMobile && !isJournalPerso) ? '-9px' : '0px' }}>
      {/* Header */}
      <div className={`flex flex-col md:flex-row items-start md:items-center justify-between mb-6 md:mb-8 pb-4 gap-4 md:gap-0 ${isMobile && !isJournalPerso ? '' : 'border-b border-gray-600'}`}>
        <div className="hidden md:flex md:items-center md:gap-6">
          <div>
            <h1 className="text-2xl font-bold text-white">
              {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? 'Mon Journal Perso' : 'Journal des Signaux'}
            </h1>
            <p className="text-sm text-gray-400 mt-1">
              {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? 'Journal tous tes trades' : 'Suivi des performances des signaux'}
            </p>
          </div>
          
          {/* S√©lecteur de compte - DESKTOP */}
          {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') && (
            <div className="flex items-center gap-2">
              <select
                value={selectedAccount}
                onChange={(e) => handleAccountChange(e.target.value)}
                className="bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-300 hover:text-yellow-200 rounded-lg px-3 py-2 text-sm font-medium focus:outline-none focus:border-yellow-500 cursor-pointer h-9"
                style={{ height: '36px' }}
              >
                {tradingAccounts.map((account) => (
                  <option key={account.id} value={account.account_name}>
                    {account.account_name}
                  </option>
                ))}
              </select>
              
              <button
                onClick={() => handleAccountOptions(selectedAccount)}
                className="bg-blue-500/20 hover:bg-blue-500/30 border border-blue-500/50 text-blue-300 hover:text-blue-200 px-3 py-2 rounded-lg text-sm font-medium"
                title="Options du compte"
              >
                ‚öôÔ∏è
              </button>
              
              <button
                onClick={() => setShowAddAccountModal(true)}
                className="bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-300 hover:text-green-200 px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap"
              >
                + Ajouter compte
              </button>
            </div>
          )}
        </div>
        
        <div className={`flex items-center ${(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? 'gap-4' : ''}`}>
          <div className="flex items-center gap-3 text-white">
            <button 
              onClick={goToPreviousMonth}
              className="p-2 hover:bg-gray-700 rounded-lg text-lg font-bold"
            >
              ‚Äπ
            </button>
            <div className="text-center">
              <div className="text-lg font-semibold">{getMonthName(currentDate)}</div>
              <div className="text-sm text-gray-400">{currentDate.getFullYear()}</div>
            </div>
            <button 
              onClick={goToNextMonth}
              className="p-2 hover:bg-gray-700 rounded-lg text-lg font-bold"
            >
              ‚Ä∫
            </button>
          </div>
          {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') && (
            <button 
              onClick={handleAddTrade}
              className="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-sm font-medium"
            >
              + Ajouter Trade
            </button>
          )}
        </div>
      </div>

      <div className="flex flex-col lg:flex-row gap-6 lg:gap-8">
        {/* Calendrier principal */}
        <div className="flex-1 w-full">
          {/* Jours de la semaine */}
          <div className="grid grid-cols-7 gap-0.5 md:gap-1 mb-4 w-full">
            {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(day => (
              <div key={day} className="text-center text-gray-400 font-semibold py-3 text-sm uppercase tracking-wide">
                {day.substring(0, 3)}
              </div>
            ))}
          </div>

          {/* Grille du calendrier */}
          <div className="grid grid-cols-7 gap-0.5 md:gap-1 w-full" key={`calendar-${selectedChannel.id}-${selectedAccount}-${personalTrades.length}-${statsUpdateTrigger}-${currentDate.getMonth()}-${currentDate.getFullYear()}`}>
            {(() => {
              const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
              const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
              const daysInMonth = lastDayOfMonth.getDate();
              const firstDayWeekday = firstDayOfMonth.getDay(); // 0 = dimanche, 1 = lundi, etc.
              
              // Ajuster pour que lundi soit 0
              const adjustedFirstDay = firstDayWeekday === 0 ? 6 : firstDayWeekday - 1;
              
              const totalCells = Math.ceil((adjustedFirstDay + daysInMonth) / 7) * 7;
              
              return Array.from({ length: totalCells }, (_, i) => {
                const dayNumber = i - adjustedFirstDay + 1;
                const today = new Date();
                const isToday = dayNumber === today.getDate() && 
                               currentDate.getMonth() === today.getMonth() && 
                               currentDate.getFullYear() === today.getFullYear();
                
                // Celles vides au d√©but
                if (dayNumber < 1) {
                  return <div key={i} className="border-2 rounded-lg h-16 md:h-24 p-1 md:p-2 bg-gray-800 border-gray-700" style={{minHeight: '64px'}}></div>;
                }
                
                // Celles vides √† la fin
                if (dayNumber > daysInMonth) {
                  return <div key={i} className="border-2 rounded-lg h-16 md:h-24 p-1 md:p-2 bg-gray-800 border-gray-700" style={{minHeight: '64px'}}></div>;
                }
              
                              // V√©rifier s'il y a des trades personnels ou des signaux pour ce jour
                const dayTrades = (selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? 
                  getTradesForSelectedAccount().filter(trade => {
                    const tradeDate = new Date(trade.date);
                    return tradeDate.getDate() === dayNumber && 
                           tradeDate.getMonth() === currentDate.getMonth() && 
                           tradeDate.getFullYear() === currentDate.getFullYear();
                  }) : [];

                const daySignals = (selectedChannel.id !== 'trading-journal' && selectedChannel.id !== 'journal') ? 
                  realTimeSignals.filter(signal => {
                    // Utiliser le timestamp original pour d√©terminer la vraie date
                    const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
                    
                    // Si la date est invalide, ignorer ce signal
                    if (isNaN(signalDate.getTime())) {
                      return false;
                    }
                    
                    const isMatch = signalDate.getDate() === dayNumber && 
                                  signalDate.getMonth() === currentDate.getMonth() && 
                                  signalDate.getFullYear() === currentDate.getFullYear();
                    
                    return isMatch;
                  }) : [];

                // D√©terminer la couleur selon les trades ou signaux
                let bgColor = 'bg-gray-700 border-gray-600 text-gray-400'; // No trade par d√©faut
                let tradeCount = 0;

                if (selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') {
                  // Logique pour les trades personnels - bas√©e sur PnL total
                  if (dayTrades.length > 0) {
                    tradeCount = dayTrades.length;
                    
                    // Calculer le PnL total pour ce jour
                    const totalPnL = dayTrades.reduce((total, trade) => {
                      if (trade.pnl) {
                        return total + parsePnL(trade.pnl);
                      }
                      return total;
                    }, 0);
                    
                    // D√©terminer la couleur selon le PnL total
                    if (totalPnL > 0) {
                      bgColor = 'bg-green-400/40 border-green-300/30 text-white'; // PnL positif - vert plus pale
                    } else if (totalPnL < 0) {
                      bgColor = 'bg-red-500/60 border-red-400/50 text-white'; // PnL n√©gatif
                    } else {
                      bgColor = 'bg-blue-500/60 border-blue-400/50 text-white'; // PnL = 0 (BE)
                    }
                  }
                } else {
                  // Logique pour les signaux (calendrier normal) - bas√©e sur PnL
                  if (daySignals.length > 0) {
                    tradeCount = daySignals.length;
                    
                    // Calculer le PnL total pour ce jour
                    const totalPnL = daySignals.reduce((total, signal) => {
                      if (signal.pnl) {
                        return total + parsePnL(signal.pnl);
                      }
                      return total;
                    }, 0);
                    
                    // D√©terminer la couleur selon le PnL total
                    if (totalPnL > 0) {
                      bgColor = 'bg-green-400/40 border-green-300/30 text-white'; // PnL positif - vert plus pale
                    } else if (totalPnL < 0) {
                      bgColor = 'bg-red-500/60 border-red-400/50 text-white'; // PnL n√©gatif
                    } else {
                      bgColor = 'bg-blue-500/60 border-blue-400/50 text-white'; // PnL = 0
                    }
                  }
                }
              
              return (
                  <div 
                    key={i} 
                    onClick={(e) => {
                      try {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        const clickedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), dayNumber);
                        
                        if (selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') {
                          setSelectedDate(clickedDate);
                          
                          // Ouvrir le popup des trades si il y en a
                          const tradesForDate = getTradesForDate(clickedDate);
                          console.log('Clic sur jour:', dayNumber, 'Trades trouv√©s:', tradesForDate.length);
                          
                          if (tradesForDate.length > 0) {
                            console.log('Trades trouv√©s, ouverture modal...');
                            setSelectedTradesDate(clickedDate);
                            setShowTradesModal(true);
                          }
                        } else {
                          // Ouvrir le popup des signaux si il y en a
                          const signalsForDate = getSignalsForDate(clickedDate);
                          if (signalsForDate.length > 0) {
                            setSelectedSignalsDate(clickedDate);
                            setShowSignalsModal(true);
                          }
                        }
                      } catch (error) {
                        console.error('Erreur lors du clic sur le jour:', error);
                        console.error('Erreur lors du clic sur le jour:', error);
                      }
                    }}
                    className={`
                    border-2 rounded-lg h-16 md:h-24 p-1 md:p-2 cursor-pointer transition-all hover:shadow-md
                      ${bgColor}
                    ${isToday ? 'ring-2 ring-blue-400' : ''}
                      ${selectedChannel.id === 'trading-journal' && selectedDate && 
                        selectedDate.getDate() === dayNumber && 
                        selectedDate.getMonth() === currentDate.getMonth() && 
                        selectedDate.getFullYear() === currentDate.getFullYear() 
                        ? 'ring-2 ring-purple-400' : ''}
                  `}
                    style={{minHeight: '64px'}}>
                  <div className="flex flex-col h-full justify-between">
                      <div className="text-xs md:text-sm font-semibold">{dayNumber}</div>
                      {(() => {
                        let totalPnL = 0;
                        let tradeCount = 0;
                        if (selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') {
                          // Pour les trades personnels - utiliser le compte s√©lectionn√©
                          const dayTrades = getTradesForSelectedAccount().filter(trade => {
                            const tradeDate = new Date(trade.date);
                            return tradeDate.getDate() === dayNumber && 
                                   tradeDate.getMonth() === currentDate.getMonth() && 
                                   tradeDate.getFullYear() === currentDate.getFullYear();
                          });
                          tradeCount = dayTrades.length;
                          totalPnL = dayTrades.reduce((total, trade) => {
                            if (trade.pnl) {
                              return total + parsePnL(trade.pnl);
                            }
                            return total;
                          }, 0);
                        } else {
                          // Pour les signaux - utiliser allSignalsForStats qui contient TOUS les signaux
                          const daySignals = allSignalsForStats.filter(signal => {
                            const signalDate = new Date(signal.originalTimestamp || signal.timestamp);
                            return signalDate.getDate() === dayNumber && 
                                   signalDate.getMonth() === currentDate.getMonth() && 
                                   signalDate.getFullYear() === currentDate.getFullYear();
                          });
                          tradeCount = daySignals.length;
                          totalPnL = daySignals.reduce((total, signal) => {
                            if (signal.pnl) {
                              return total + parsePnL(signal.pnl);
                            }
                            return total;
                          }, 0);
                        }
                        return (
                          <div className="flex flex-col items-center space-y-1">
                            {totalPnL !== 0 && (
                              <div className="text-xs font-bold text-center">
                                ${totalPnL.toFixed(0)}
                              </div>
                            )}
                            {tradeCount > 0 && (
                              <div className="text-xs font-bold text-right self-end">
                                {tradeCount}
                              </div>
                            )}
                          </div>
                        );
                      })()}
                  </div>
                </div>
              );
              });
            })()}
            </div>

          {/* Solde du compte et indicateur de risque */}
          {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') && (
            <div className="mt-4 space-y-3">
              {/* Solde principal */}
              <div className="p-4 bg-gray-800 rounded-lg border border-gray-600">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="text-sm font-medium text-gray-300">Solde du compte</h4>
                    <p className="text-xs text-gray-400">{selectedAccount}</p>
                  </div>
                  <div className="text-right">
                    <div className={`text-lg font-bold ${
                      calculateAccountBalance() >= (tradingAccounts.find(acc => acc.account_name === selectedAccount)?.initial_balance || 0) 
                        ? 'text-green-400' : 'text-red-400'
                    }`}>
                      ${calculateAccountBalance().toFixed(2)}
                    </div>
                <div className="text-xs text-gray-400">
                  Balance initiale: ${(() => {
                    const account = tradingAccounts.find(acc => acc.account_name === selectedAccount);
                    let initialBalance = account?.initial_balance || 0;
                    if (!initialBalance) {
                      const savedBalances = localStorage.getItem('accountBalances');
                      if (savedBalances) {
                        const balances = JSON.parse(savedBalances);
                        initialBalance = balances[selectedAccount] || 0;
                      }
                    }
                    return initialBalance.toFixed(2);
                  })()}
                </div>
                <div className="text-xs text-gray-400">
                  Stop-loss: ${(() => {
                    const stopLoss = calculateTrailingStopLoss();
                    return stopLoss.currentStopLoss?.toFixed(2) || 'Non d√©fini';
                  })()}
                </div>
                <div className="text-xs text-gray-400">
                  Marge de s√©curit√©: ${(() => {
                    const stopLoss = calculateTrailingStopLoss();
                    return stopLoss.remaining?.toFixed(2) || 'N/A';
                  })()}
                </div>
                  </div>
                </div>
              </div>

              {/* Analyse des pertes - sous les donn√©es de solde */}
              {(() => {
                const lossAnalysis = getLossAnalysis();
                if (lossAnalysis.totalLosses > 0) {
                  return (
                    <div className="bg-gray-700 rounded-lg p-3 mt-3">
                      <h4 className="text-sm font-medium mb-3 text-red-300">üìä Analyse des Pertes</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">Total pertes:</span>
                          <span className="text-red-300">{lossAnalysis.totalLosses}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">P&L total pertes:</span>
                          <span className="text-red-300">${lossAnalysis.totalLossPnl}</span>
                        </div>
                        {lossAnalysis.reasons.length > 0 ? (
                          lossAnalysis.reasons.slice(0, 3).map((reason, index) => (
                            <div key={reason.reason} className="flex justify-between text-xs">
                              <span className="text-gray-400 truncate">{getLossReasonLabel(reason.reason)}</span>
                              <span className="text-red-300">{reason.count} ({reason.percentage}%)</span>
                            </div>
                          ))
                        ) : (
                          <div className="text-xs text-gray-500 italic">
                            Ajoute des raisons aux pertes pour voir l'analyse
                          </div>
                        )}
                      </div>
                    </div>
                  );
                }
                return null;
              })()}
            </div>
          )}

          {/* L√©gende */}
          <div className="flex items-center justify-center gap-3 mt-4 pt-3 border-t border-gray-600">
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-green-500/60 border border-green-400/50 rounded"></div>
              <span className="text-xs text-gray-300">WIN</span>
            </div>
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-red-500/60 border border-red-400/50 rounded"></div>
              <span className="text-xs text-gray-300">LOSS</span>
            </div>
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-blue-500/60 border border-blue-400/50 rounded"></div>
              <span className="text-xs text-gray-300">BREAK</span>
            </div>
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-gray-700 border border-gray-600 rounded"></div>
              <span className="text-xs text-gray-300">NO TRADE</span>
            </div>
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 border-2 border-blue-400 rounded"></div>
              <span className="text-xs text-gray-300">Today</span>
            </div>
          </div>
        </div>

        {/* Panneau des statistiques */}
        <div className="w-full lg:w-80 bg-gray-800 rounded-xl p-4 md:p-6" key={`stats-${selectedAccount}-${currentDate.getMonth()}-${currentDate.getFullYear()}-${statsUpdateTrigger}`}>
          <h3 className="text-lg font-bold text-white mb-6">
            {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? 'Mon Journal Perso' : 'Statistiques Signaux'}
          </h3>
          
          {/* M√©triques principales */}
          <div className="space-y-4 mb-8">
            {/* P&L Total */}
            <div className={`border rounded-lg p-4 border ${
              ((selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? calculateTotalPnLTradesForMonth() : calculateTotalPnLForMonth()) >= 0 
                ? 'bg-green-600/20 border-green-500/30' 
                : 'bg-red-600/20 border-red-500/30'
            }`}>
              <div className={`text-sm mb-1 ${
                ((selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? calculateTotalPnLTradesForMonth() : calculateTotalPnLForMonth()) >= 0 ? 'text-green-300' : 'text-red-300'
              }`}>P&L Total</div>
              <div className={`text-2xl font-bold ${
                ((selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? calculateTotalPnLTradesForMonth() : calculateTotalPnLForMonth()) >= 0 ? 'text-green-200' : 'text-red-200'
              }`}>
                {((selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? calculateTotalPnLTradesForMonth() : calculateTotalPnLForMonth()) >= 0 ? '+' : ''}${(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? calculateTotalPnLTradesForMonth() : calculateTotalPnLForMonth()}
              </div>
            </div>

            {/* Win Rate */}
            <div className="bg-blue-600/20 border-blue-500/30 rounded-lg p-4 border">
              <div className="text-sm text-blue-300 mb-1">Win Rate</div>
              <div className="text-2xl font-bold text-blue-200">
                {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? calculateWinRateTradesForMonth() : calculateWinRateForMonth()}%
              </div>
            </div>

            
            <div className="grid grid-cols-2 gap-3">
              <div className="bg-gray-700 rounded-lg p-3 border border-gray-600">
                <div className="text-xs text-gray-400 mb-1">Aujourd'hui</div>
                <div className="text-lg font-bold text-blue-400">
                  {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? getTodayTradesForMonth().length : getTodaySignalsForMonth()}
                </div>
              </div>
              <div className="bg-gray-700 rounded-lg p-3 border border-gray-600">
                <div className="text-xs text-gray-400 mb-1">Ce mois</div>
                <div className="text-lg font-bold text-white">
                  {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? getThisMonthTradesForMonth().length : getThisMonthSignalsForMonth()}
                </div>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-3">
              <div className="bg-gray-700 rounded-lg p-3 border border-gray-600">
                <div className="text-xs text-gray-400 mb-1">Avg Win</div>
                <div className="text-lg font-bold text-green-400">
                  {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? 
                    (calculateAvgWinTradesForMonth() > 0 ? `+$${calculateAvgWinTradesForMonth()}` : '-') :
                    (getCalendarMonthlyStats(currentDate).avgWin > 0 ? `+$${getCalendarMonthlyStats(currentDate).avgWin}` : '-')
                  }
                </div>
              </div>
              <div className="bg-gray-700 rounded-lg p-3 border border-gray-600">
                <div className="text-xs text-gray-400 mb-1">Avg Loss</div>
                <div className="text-lg font-bold text-red-400">
                  {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? 
                    (calculateAvgLossTradesForMonth() > 0 ? `-$${calculateAvgLossTradesForMonth()}` : '-') :
                    (getCalendarMonthlyStats(currentDate).avgLoss > 0 ? `-$${getCalendarMonthlyStats(currentDate).avgLoss}` : '-')
                  }
                </div>
              </div>
            </div>
          </div>

          {/* R√©sum√© hebdomadaire */}
          <div>
            <h4 className="text-sm font-semibold text-gray-300 mb-4">Weekly Breakdown</h4>
            <div className="space-y-2">
              {((selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? getWeeklyBreakdownTradesForMonth() : getWeeklyBreakdownForMonth()).map((weekData, index) => (
                <div 
                  key={index} 
                  className={`flex items-center justify-between p-3 rounded-lg border cursor-pointer hover:bg-gray-600/50 transition-colors ${
                    weekData.isCurrentWeek 
                      ? 'bg-blue-600/20 border-blue-500/30' 
                      : 'bg-gray-700/50 border-gray-600'
                  }`}
                  onClick={() => {
                    setSelectedWeek(weekData.weekNum);
                    setShowWeekSignalsModal(true);
                  }}
                >
                  <div className="flex items-center gap-3">
                    <div className={`text-sm font-medium ${
                      weekData.isCurrentWeek ? 'text-blue-300' : 'text-gray-300'
                    }`}>
                      {weekData.week}
                    </div>
                    <div className="text-xs text-gray-400">
                      {weekData.trades} trade{weekData.trades !== 1 ? 's' : ''}
                  </div>
                  </div>
                  <div className="flex items-center gap-2">
                    {(weekData.wins > 0 || weekData.losses > 0) ? (
                      <div className="flex items-center gap-1">
                        {weekData.wins > 0 && (
                          <div className="text-sm bg-green-500 text-white px-3 py-1 rounded-lg font-bold shadow-lg">
                            {weekData.wins}W
                          </div>
                        )}
                        {weekData.losses > 0 && (
                          <div className="text-sm bg-red-500 text-white px-3 py-1 rounded-lg font-bold shadow-lg">
                            {weekData.losses}L
                          </div>
                        )}
                      </div>
                    ) : (
                      <div className="text-sm text-gray-500 px-3 py-1">
                        -
                      </div>
                    )}
                    <div className={`text-xs ${
                      weekData.pnl > 0 ? 'text-green-400' : 
                      weekData.pnl < 0 ? 'text-red-400' : 'text-gray-500'
                    }`}>
                      {weekData.pnl !== 0 ? `${weekData.pnl > 0 ? '+' : ''}$${weekData.pnl}` : ''}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          {/* Espace suppl√©mentaire en bas pour √©viter que la derni√®re ligne soit cach√©e */}
          <div className="h-24 md:h-32"></div>
        </div>
      </div>
    </div>
  );
  };



  return (
    <div className="h-screen w-full bg-gray-900 text-white overflow-hidden flex" style={{ paddingTop: '0px' }}>
      {/* Desktop Sidebar */}
      <div className="hidden md:flex w-56 min-w-56 flex-shrink-0 bg-gray-800 flex-col">
        <div className="p-4 border-b border-gray-700">
          <div className="flex items-center gap-3">
            <label className="cursor-pointer">
              <input
                type="file"
                onChange={handleProfileImageChange}
                className="hidden"
                accept="image/*"
              />
              <div className="h-8 w-8 bg-blue-500 rounded-full flex items-center justify-center text-sm overflow-hidden">
                {profileImage ? (
                  <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                ) : (
                  'TT'
                )}
            </div>
            </label>
            <div className="flex-1">
              <div className="flex items-center gap-2">
                <div>
                  <p 
                    className="text-sm font-medium cursor-pointer hover:text-blue-300 transition-colors"
                    onContextMenu={(e) => {
                      e.preventDefault();
                      setUsernameInput(currentUsername || '');
                      setIsEditingUsername(true);
                    }}
                    onTouchStart={(e) => {
                      const timeout = setTimeout(() => {
                        setUsernameInput(currentUsername || '');
                        setIsEditingUsername(true);
                      }, 500);
                      e.currentTarget.dataset.timeout = timeout;
                    }}
                    onTouchEnd={(e) => {
                      const timeout = e.currentTarget.dataset.timeout;
                      if (timeout) {
                        clearTimeout(timeout);
                        delete e.currentTarget.dataset.timeout;
                      }
                    }}
                    title="Clic droit ou appui long pour modifier"
                  >
                    {isEditingUsername ? (
                      <input
                        type="text"
                        value={usernameInput}
                        onChange={(e) => setUsernameInput(e.target.value)}
                        className="bg-gray-700 text-white text-sm px-2 py-1 rounded border border-gray-600 w-24"
                        autoFocus
                        onKeyDown={(e) => {
                          if (e.key === 'Enter') {
                            handleUsernameEdit();
                          } else if (e.key === 'Escape') {
                            handleUsernameCancel();
                          }
                        }}
                      />
                    ) : (
                      currentUsername || 'Chargement...'
                    )}
                  </p>
                  <p className="text-xs text-gray-400">En ligne</p>
                </div>
                {isEditingUsername && (
                  <div className="flex gap-1">
                    <button
                      onClick={handleUsernameEdit}
                      className="text-xs bg-green-600 hover:bg-green-700 px-2 py-0.5 rounded text-white"
                    >
                      ‚úì
                    </button>
                    <button
                      onClick={handleUsernameCancel}
                      className="text-xs bg-red-600 hover:bg-red-700 px-2 py-0.5 rounded text-white"
                    >
                      ‚úó
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          <div>
            <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider mb-2">√âDUCATION</h3>
            <div className="space-y-1">
              <button onClick={() => handleChannelChange('fondamentaux', 'fondamentaux')} className={`w-full text-left px-3 py-2 rounded text-sm ${selectedChannel.id === 'fondamentaux' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'}`}>üìö Fondamentaux</button>
              <button onClick={() => handleChannelChange('letsgooo-model', 'letsgooo-model')} className={`w-full text-left px-3 py-2 rounded text-sm ${selectedChannel.id === 'letsgooo-model' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'}`}>üöÄ Letsgooo-model</button>
            </div>
          </div>

          <div>
            <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider mb-2">SIGNAUX</h3>
            <div className="space-y-1">
              {channels.filter(c => ['general-chat-2', 'general-chat-3', 'general-chat-4'].includes(c.id)).map(channel => (
                <button 
                  key={channel.id}
                  onClick={() => handleChannelChange(channel.id, channel.name)} 
                  className={`w-full text-left px-3 py-2 rounded text-sm ${selectedChannel.id === channel.id ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'}`}
                >
                  {channel.emoji} {channel.fullName}
                </button>
              ))}
            </div>
          </div>

          <div>
            <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider mb-2">TRADING HUB</h3>
            <div className="space-y-1">

              <button onClick={() => handleChannelChange('calendrier', 'calendrier')} className={`w-full text-left px-3 py-2 rounded text-sm ${selectedChannel.id === 'calendrier' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'}`}>üìÖ Journal Signaux</button>
              <button onClick={() => handleChannelChange('journal', 'journal')} className={`w-full text-left px-3 py-2 rounded text-sm ${selectedChannel.id === 'journal' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'}`}>üìì Journal Perso</button>
              <button onClick={() => handleChannelChange('video', 'video')} className={`w-full text-left px-3 py-2 rounded text-sm ${selectedChannel.id === 'video' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'}`}>üì∫ Livestream</button>
            </div>
          </div>

          <div className="bg-gray-700 rounded-lg p-3">
            <h4 className="text-sm font-medium mb-2">Statistiques</h4>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Win Rate:</span>
                <span className="text-blue-400">{calculateWinRate()}%</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Total Trades:</span>
                <span className="text-purple-400">{realTimeSignals.length}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Signaux actifs:</span>
                <span className="text-yellow-400">{realTimeSignals.filter(s => s.status === 'ACTIVE').length}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">P&L Total:</span>
                <span className={calculateTotalPnL() >= 0 ? 'text-green-400' : 'text-red-400'}>
                  {calculateTotalPnL() >= 0 ? '+' : ''}${calculateTotalPnL()}
                </span>
              </div>
            </div>
          </div>


          {/* Bouton Toggle Notifications */}
          <button
            onClick={handleToggleNotifications}
            className={`w-full px-4 py-3 rounded-lg font-medium transition-all duration-200 shadow-sm ${
              notificationsEnabled
                ? 'bg-green-500/20 hover:bg-green-500/30 text-green-400 border border-green-500/30 hover:border-green-500/50'
                : 'bg-gray-600/20 hover:bg-gray-600/30 text-gray-400 border border-gray-600/30 hover:border-gray-600/50'
            }`}
          >
            {notificationsEnabled ? 'üîî Notifications ON' : 'üîï Notifications OFF'}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Mobile Navigation - Fixed */}
        <div className={`md:hidden bg-gray-800 p-3 fixed top-0 left-0 right-0 z-30 ${selectedChannel.id === 'calendrier' || selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal' ? '' : 'border-b border-gray-700'}`} style={{ height: '60px' }}>
          {mobileView === 'channels' ? (
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <label className="cursor-pointer">
                  <input
                    type="file"
                    onChange={handleProfileImageChange}
                    className="hidden"
                    accept="image/*"
                  />
                  <div className="h-8 w-8 bg-blue-500 rounded-full flex items-center justify-center text-sm overflow-hidden">
                    {profileImage ? (
                      <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                    ) : (
                      'TT'
                    )}
                </div>
                </label>
                <div className="flex-1">
                  {isEditingUsername ? (
                    <div className="flex flex-col gap-1">
                      <input
                        type="text"
                        value={usernameInput}
                        onChange={(e) => setUsernameInput(e.target.value)}
                        className="text-sm bg-transparent border border-blue-400 rounded px-1 py-0.5 text-white placeholder-gray-400 focus:outline-none focus:border-blue-300"
                        placeholder="Nouveau nom..."
                        autoFocus
                        onKeyPress={(e) => e.key === 'Enter' && handleUsernameEdit()}
                        onKeyDown={(e) => e.key === 'Escape' && handleUsernameCancel()}
                      />
                      <div className="flex gap-1">
                        <button
                          onClick={handleUsernameEdit}
                          className="text-xs bg-green-600 hover:bg-green-700 px-2 py-0.5 rounded text-white"
                        >
                          ‚úì
                        </button>
                        <button
                          onClick={handleUsernameCancel}
                          className="text-xs bg-red-600 hover:bg-red-700 px-2 py-0.5 rounded text-white"
                        >
                          ‚úó
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="flex items-center gap-2">
                      <div>
                        <p 
                          className="text-sm font-medium cursor-pointer hover:text-blue-300 transition-colors"
                          onContextMenu={(e) => {
                            e.preventDefault();
                            setUsernameInput(currentUsername || '');
                            setIsEditingUsername(true);
                          }}
                          onTouchStart={(e) => {
                            const timeout = setTimeout(() => {
                              setUsernameInput(currentUsername || '');
                              setIsEditingUsername(true);
                            }, 500);
                            e.currentTarget.dataset.timeout = timeout;
                          }}
                          onTouchEnd={(e) => {
                            const timeout = e.currentTarget.dataset.timeout;
                            if (timeout) {
                              clearTimeout(timeout);
                              delete e.currentTarget.dataset.timeout;
                            }
                          }}
                          title="Clic droit ou appui long pour modifier"
                        >
                          {currentUsername || 'Chargement...'}
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
              <div className="flex items-center gap-3">
                <button
                  onClick={handleToggleNotifications}
                  className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-colors ${
                    notificationsEnabled
                      ? 'bg-green-400/20 hover:bg-green-400/30 text-green-200 border border-green-400/30'
                      : 'bg-gray-600/20 hover:bg-gray-600/30 text-gray-300 border border-gray-600/30'
                  }`}
                >
                  {notificationsEnabled ? 'üîî' : 'üîï'}
                </button>
                <button onClick={handleLogout} className="text-gray-400 hover:text-white">
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                  </svg>
                </button>
              </div>
            </div>
          ) : (
            <div className="flex items-center justify-between">
              <button 
                onClick={() => setMobileView('channels')}
                className="flex items-center gap-2 text-gray-400 hover:text-white"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                <span className="text-sm font-medium">
                  {view === 'calendar' ? 'üìÖ Journal Signaux' : 
                   channels.find(c => c.id === selectedChannel.id)?.fullName || selectedChannel.name}
                </span>
              </button>

            </div>
          )}
        </div>

        {/* Mobile Content Container with Slide Animation */}
        <div className="md:hidden relative flex-1 overflow-hidden" style={{ paddingTop: '60px' }}>
          {/* Channels List - Slides from left */}
          <div 
            className={`absolute inset-0 bg-gray-800 transform transition-transform duration-300 ease-in-out z-10 ${
              mobileView === 'channels' ? 'translate-x-0' : '-translate-x-full'
            }`}
          >
                        <div className="p-4 space-y-3 h-full overflow-y-auto" style={{ paddingTop: '80px' }}>
              
              {/* Statistiques en haut */}
              <div className="bg-gray-700 rounded-lg p-4">
                <div className="grid grid-cols-2 gap-3">
                  {/* Colonne gauche */}
                  <div className="space-y-1">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-400">Win Rate:</span>
                      <span className="text-gray-200 font-medium">{calculateWinRateForMonth()}%</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-400">P&L Total:</span>
                      <span className={calculateTotalPnLForMonth() >= 0 ? 'text-green-200 font-medium' : 'text-red-200 font-medium'}>
                        {calculateTotalPnLForMonth() >= 0 ? '+' : ''}${calculateTotalPnLForMonth()}
                      </span>
                    </div>
                  </div>
                  {/* Colonne droite */}
                  <div className="space-y-1">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-400">Signaux actifs:</span>
                      <span className="text-gray-200 font-medium">{realTimeSignals.filter(s => s.status === 'ACTIVE').length}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-400">Total Trades:</span>
                      <span className="text-gray-200 font-medium">{realTimeSignals.length}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider mb-1">√âDUCATION</h3>
                <div className="space-y-2">
                  {channels.filter(c => ['fondamentaux', 'letsgooo-model'].includes(c.id)).map(channel => (
                    <button
                      key={channel.id}
                      onClick={() => {
                        handleChannelChange(channel.id, channel.name);
                        setMobileView('content');
                      }}
                      className="w-full text-left px-4 py-3 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors"
                    >
                      <div className="flex items-center gap-3">
                        <span className="text-lg">{channel.emoji}</span>
                        <div>
                          <p className="font-medium text-white">{channel.fullName}</p>
                          <p className="text-sm text-gray-400">Contenu √©ducatif</p>
                        </div>
                      </div>

                    </button>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider mb-1">SIGNAUX</h3>
                <div className="space-y-2">
                  {channels.filter(c => ['general-chat-2', 'general-chat-3', 'general-chat-4'].includes(c.id)).map(channel => (
                    <button
                      key={channel.id}
                      onClick={() => {
                        handleChannelChange(channel.id, channel.name);
                        setMobileView('content');
                      }}
                      className="w-full text-left px-4 py-3 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors"
                    >
                      <div className="flex items-center gap-3">
                        <span className="text-lg">{channel.emoji}</span>
                        <div>
                          <p className="font-medium text-white">{channel.fullName}</p>
                          <p className="text-sm text-gray-400">Canal de signaux</p>
                        </div>
                      </div>

                    </button>
                  ))}
                  
                </div>
              </div>

              <div>
                <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider mb-1">TRADING HUB</h3>
                <div className="space-y-2">
                  {channels.filter(c => ['video', 'trading-hub'].includes(c.id)).map(channel => (
                    <button
                      key={channel.id}
                      onClick={() => {
                        handleChannelChange(channel.id, channel.name);
                        setMobileView('content');
                      }}
                      className="w-full text-left px-4 py-3 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors"
                    >
                      <div className="flex items-center gap-3">
                        <span className="text-lg">{channel.emoji}</span>
                        <div>
                          <p className="font-medium text-white">{channel.fullName}</p>
                          <p className="text-sm text-gray-400">Hub de trading</p>
                        </div>
                      </div>

                    </button>
                  ))}
                  
                  <button
                    onClick={() => {
                      handleChannelChange('calendrier', 'calendrier');
                      setMobileView('content');
                    }}
                    className="w-full text-left px-4 py-3 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors"
                  >
                    <div className="flex items-center gap-3">
                      <span className="text-lg">üìÖ</span>
                      <div>
                        <p className="font-medium text-white">Journal Signaux</p>
                        <p className="text-sm text-gray-400">Suivi des performances</p>
                      </div>
                    </div>
                  </button>
                  
                  <button
                    onClick={() => {
                      handleChannelChange('trading-journal', 'trading-journal');
                      setMobileView('content');
                    }}
                    className="w-full text-left px-4 py-3 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors"
                  >
                    <div className="flex items-center gap-3">
                      <span className="text-lg">üìä</span>
                      <div>
                        <p className="font-medium text-white">Journal Perso</p>
                        <p className="text-sm text-gray-400">Journal personnel</p>
                      </div>
                    </div>
                  </button>

              </div>
              </div>
            </div>
          </div>

          {/* Content Area - Slides from right */}
          <div 
            className={`absolute inset-0 bg-gray-900 transform transition-transform duration-300 ease-in-out z-10 ${
              mobileView === 'content' ? 'translate-x-0' : 'translate-x-full'
            }`}
          >
            {(view === 'calendar' || selectedChannel.id === 'trading-journal' || selectedChannel.id === 'calendrier' || selectedChannel.id === 'video' || selectedChannel.id === 'journal') ? (
              <div className="bg-gray-900 text-white p-4 md:p-6 h-full overflow-y-auto overflow-x-hidden" style={{ paddingTop: '0px' }}>
                {/* Header avec s√©lecteur de compte et bouton Ajouter Trade pour Trading Journal */}
                {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? (
                  <div className="mb-4 md:mb-6 border-b border-gray-600 pb-4">
                    <div className="space-y-4">
                      {/* Titre */}
                      <div>
                        <h1 className="text-xl md:text-2xl font-bold text-white">Mon Journal Perso</h1>
                        <p className="text-sm text-gray-400 mt-1">Journal tous tes trades</p>
                      </div>
                      
                      {/* S√©lecteur de compte et boutons */}
                      <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-3">
                        <div className="flex items-center gap-2">
                          <select
                            value={selectedAccount}
                            onChange={(e) => handleAccountChange(e.target.value)}
                            className="bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-300 hover:text-yellow-200 rounded-lg px-3 py-2 text-sm font-medium focus:outline-none focus:border-yellow-500 cursor-pointer h-9"
                style={{ height: '36px' }}
                          >
                            {tradingAccounts.map((account) => (
                              <option key={account.id} value={account.account_name}>
                                {account.account_name}
                              </option>
                            ))}
                          </select>
                          
                          <button
                            onClick={() => handleAccountOptions(selectedAccount)}
                            className="bg-blue-500/20 hover:bg-blue-500/30 border border-blue-500/50 text-blue-300 hover:text-blue-200 px-3 py-2 rounded-lg text-sm font-medium"
                            title="Options du compte"
                          >
                            ‚öôÔ∏è
                          </button>
                          
                          <button
                            onClick={() => setShowAddAccountModal(true)}
                            className="bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-300 hover:text-green-200 px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap"
                          >
                            + Ajouter compte
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
                
                  {/* Header pour le calendrier normal */}
                {(view === 'calendar' || selectedChannel.id === 'calendrier') && selectedChannel.id !== 'trading-journal' && (
                  <div className="flex justify-between items-center mb-6 border-b border-gray-600 pb-4">
                    <div>
                      <h1 className="text-2xl font-bold text-white">Journal des Signaux</h1>
                      <p className="text-sm text-gray-400 mt-1">Suivi des performances des signaux</p>
                    </div>
                  </div>
                )}
                
                {/* Affichage du calendrier */}
                {(selectedChannel.id === 'calendrier' || selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') && getTradingCalendar()}
                
                {/* Interface Livestream pour mobile */}
                {selectedChannel.id === 'video' && (
                  <div className="flex flex-col h-full bg-gray-900">
                    <div className="text-center space-y-4 w-full max-w-[95vw] mx-auto p-4 pt-16">
                      <h1 className="text-3xl font-bold text-white mb-2">Livestream</h1>
                      <p className="text-gray-400">Attache ta ceinture cousin</p>
                      
                      {/* Iframe 100ms */}
                      <div className="w-full relative" id="video-container">
                        <button
                          onClick={() => {
                            const container = document.getElementById('video-container');
                            if (container) {
                              // V√©rifier si on est d√©j√† en plein √©cran
                              const isFullscreen = document.fullscreenElement || 
                                                   (document as any).webkitFullscreenElement || 
                                                   (document as any).mozFullScreenElement || 
                                                   (document as any).msFullscreenElement;
                              
                              if (isFullscreen) {
                                // Quitter le plein √©cran
                                if (document.exitFullscreen) {
                                  document.exitFullscreen();
                                } else if ((document as any).webkitExitFullscreen) {
                                  (document as any).webkitExitFullscreen();
                                } else if ((document as any).mozCancelFullScreen) {
                                  (document as any).mozCancelFullScreen();
                                } else if ((document as any).msExitFullscreen) {
                                  (document as any).msExitFullscreen();
                                }
                              } else {
                                // Entrer en plein √©cran
                                if (container.requestFullscreen) {
                                  container.requestFullscreen();
                                } else if ((container as any).webkitRequestFullscreen) {
                                  (container as any).webkitRequestFullscreen();
                                } else if ((container as any).mozRequestFullScreen) {
                                  (container as any).mozRequestFullScreen();
                                } else if ((container as any).msRequestFullscreen) {
                                  (container as any).msRequestFullscreen();
                                }
                              }
                            }
                          }}
                          className="absolute top-4 right-4 z-10 text-white text-4xl font-bold hover:text-gray-300 transition-colors bg-black bg-opacity-50 px-2 py-1 rounded"
                          title="Plein √©cran"
                        >
                          ‚§¢
                        </button>
                        <iframe
                          src="https://tote-livestream-033.app.100ms.live/streaming/meeting/hzs-ukns-nts"
                          width="100%"
                          height="500px"
                          style={{ border: 'none', borderRadius: '8px' }}
                          allow="camera; microphone; display-capture; fullscreen"
                          allowFullScreen
                        />
                      </div>
                    </div>
                  </div>
                )}
                
                {/* Affichage des trades pour la date s√©lectionn√©e - SEULEMENT pour Trading Journal */}
                {(() => {
                  console.log('V√©rification affichage trades:', {
                    channel: selectedChannel.id,
                    selectedDate: selectedDate,
                    shouldShow: selectedChannel.id === 'trading-journal' && selectedDate,
                    tradesCount: selectedDate ? getTradesForDate(selectedDate).length : 0
                  });
                  return selectedChannel.id === 'trading-journal' && selectedDate;
                })() && (
                  <div className="mt-8 border-t border-gray-600 pt-6">
                    <h3 className="text-lg font-bold text-white mb-4">
                      Trades du {selectedDate.toLocaleDateString('fr-FR')}
                    </h3>
                    {getTradesForDate(selectedDate).length === 0 ? (
                      <div className="text-center py-8 text-gray-400">
                        Aucun trade pour cette date
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {getTradesForDate(selectedDate).map((trade) => (
                          <div key={trade.id} className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-3">
                                <span className={`px-3 py-1 rounded-lg text-sm font-medium ${
                                  trade.status === 'WIN' ? 'bg-green-500 text-white' :
                                  trade.status === 'LOSS' ? 'bg-red-500 text-white' :
                                  'bg-blue-500 text-white'
                                }`}>
                                  {trade.status}
                                </span>
                                <span className="text-white font-semibold">{trade.symbol}</span>
                                <span className="text-gray-400">{trade.type}</span>
                              </div>
                              <div className="flex items-center gap-3">
                                <span className={`text-lg font-bold ${
                                  parseFloat(trade.pnl) >= 0 ? 'text-green-400' : 'text-red-400'
                                }`}>
                                  {parseFloat(trade.pnl) >= 0 ? '+' : ''}{trade.pnl}$
                                </span>
                                <button
                                  onClick={async () => {
                                    if (confirm('Supprimer ce trade ?')) {
                                      const success = await deletePersonalTrade(trade.id);
                                      if (success) {
                                        setPersonalTrades(prev => prev.filter(t => t.id !== trade.id));
                                      }
                                    }
                                  }}
                                  className="text-red-400 hover:text-red-300 transition-colors"
                                  title="Supprimer ce trade"
                                >
                                  ‚ùå
                                </button>
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                              <div>
                                <span className="text-gray-400">Entry:</span>
                                <span className="text-white ml-2">{trade.entry}</span>
                              </div>
                              <div>
                                <span className="text-gray-400">Exit:</span>
                                <span className="text-white ml-2">{trade.exit}</span>
                              </div>
                              <div>
                                <span className="text-gray-400">Stop Loss:</span>
                                <span className="text-white ml-2">{trade.stopLoss || 'N/A'}</span>
                              </div>
                              <div>
                                <span className="text-gray-400">Time:</span>
                                <span className="text-white ml-2">{trade.timestamp}</span>
                              </div>
                            </div>
                            
                            {trade.notes && (
                              <div className="mt-3 pt-3 border-t border-gray-600">
                                <span className="text-gray-400 text-sm">Notes:</span>
                                <p className="text-white text-sm mt-1">{trade.notes}</p>
                              </div>
                            )}
                            
                            {(trade.image1 || trade.image2) && (
                              <div className="mt-3 pt-3 border-t border-gray-600">
                                <span className="text-gray-400 text-sm">Images:</span>
                                <div className="flex gap-2 mt-2">
                                  {trade.image1 && (
                                    <img 
                                      src={trade.image1} 
                                      alt="Trade screenshot 1"
                                      className="w-20 h-20 object-cover rounded border border-gray-600"
                                    />
                                  )}
                                  {trade.image2 && (
                                    <img 
                                      src={trade.image2} 
                                      alt="Trade screenshot 2"
                                      className="w-20 h-20 object-cover rounded border border-gray-600"
                                    />
                                  )}
                                </div>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )}
              </div>
            ) : (
              <div className="p-4 md:p-6 space-y-4 w-full h-full overflow-y-auto" style={{ paddingTop: '80px', paddingBottom: '100px' }}>



                {/* Affichage du calendrier pour le canal calendrier */}
                {view === 'signals' && (selectedChannel.id === 'calendrier' || selectedChannel.id === 'journal') ? (
                  getTradingCalendar()
                ) : null}
                
                {/* Affichage des signaux */}
                {view === 'signals' && !['fondamentaux', 'letsgooo-model', 'general-chat-2', 'general-chat-3', 'general-chat-4', 'profit-loss', 'video', '', 'calendrier', 'journal'].includes(selectedChannel.id) ? (
                  <div className="space-y-4">
                    {/* Bouton Voir plus fixe en haut */}
                    <div className="flex justify-center pt-2 sticky top-0 bg-gray-900 p-2 rounded z-10">
                      <button
                        onClick={async () => {
                          try {
                            const currentSignals = signals.filter(s => s.channel_id === selectedChannel.id);
                            if (currentSignals.length > 0) {
                              // Trouver le timestamp du signal le plus ancien
                              const oldestSignal = currentSignals[currentSignals.length - 1]; // Le dernier dans l'ordre chronologique
                              const beforeTimestamp = new Date(oldestSignal.timestamp).getTime();
                              
                              console.log('üîç Chargement de signaux plus anciens avant:', beforeTimestamp);
                              
                              // Charger 10 signaux plus anciens
                              const more = await getSignals(selectedChannel.id, 10, beforeTimestamp);
                              
                              if (more && more.length > 0) {
                                const formatted = more.map(signal => ({
                                  id: signal.id || '',
                                  type: signal.type,
                                  symbol: signal.symbol,
                                  timeframe: signal.timeframe,
                                  entry: signal.entry?.toString() || 'N/A',
                                  takeProfit: signal.takeProfit?.toString() || 'N/A',
                                  stopLoss: signal.stopLoss?.toString() || 'N/A',
                                  description: signal.description || '',
                                  image: signal.image || signal.attachment_data,
        attachment_data: signal.attachment_data || signal.image,
        attachment_type: signal.attachment_type,
        attachment_name: signal.attachment_name,
        closure_image: signal.closure_image,
        closure_image_type: signal.closure_image_type,
        closure_image_name: signal.closure_image_name,
                                  timestamp: new Date(signal.timestamp || Date.now()).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                                  status: signal.status || 'ACTIVE' as const,
                                  channel_id: signal.channel_id,
                                  reactions: signal.reactions || [],
                                  pnl: signal.pnl,
                                  closeMessage: signal.closeMessage
                                }));
                                
                                // Filtrer les doublons avant d'ajouter
                                const existingIds = new Set(currentSignals.map(s => s.id));
                                const signals = formatted.filter(s => !existingIds.has(s.id));
                                
                                if (signals.length > 0) {
                                  setSignals(prev => [...prev, ...signals]);
                                  console.log(`‚úÖ ${signals.length} nouveaux signaux ajout√©s`);
                                } else {
                                  console.log('‚ÑπÔ∏è Aucun nouveau signal √† ajouter');
                                }
                              } else {
                                console.log('‚ÑπÔ∏è Aucun signal plus ancien trouv√©');
                              }
                            }
                          } catch (error) {
                            console.error('‚ùå Erreur lors du chargement de signaux suppl√©mentaires:', error);
                          }
                        }}
                        className="px-4 py-2 text-sm rounded bg-gray-700 hover:bg-gray-600 text-white"
                      >
                        Voir plus (+10)
                      </button>
                    </div>
                    {signals.filter(signal => signal.channel_id === selectedChannel.id).length === 0 ? (
                      <div className="text-center py-8">
                        <div className="text-gray-400 text-sm">Aucun signal pour le moment</div>
                        <div className="text-gray-500 text-xs mt-1">Cr√©ez votre premier signal avec le bouton "+"</div>
                      </div>
                    ) : (
                      signals.filter(signal => signal.channel_id === selectedChannel.id).map((signal) => (
                        <div key={signal.id} className="flex items-start gap-3">
                          <div className="h-10 w-10 bg-blue-500 rounded-full flex items-center justify-center text-sm overflow-hidden">
                            {profileImage ? (
                              <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                            ) : (
                              'TT'
                            )}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="font-semibold text-white">TheTheTrader</span>
                              <span className="text-xs text-gray-400">{signal.timestamp}</span>
                            </div>

                            <div className="bg-gray-800 rounded-lg p-4 border border-gray-700 max-w-2xl md:max-w-2xl max-w-full">
                              <div className="space-y-3">
                                {/* Header avec titre et indicateur */}
                                  <div className="flex items-center gap-2">
                                  <div className={`w-3 h-3 rounded-full ${signal.status === 'ACTIVE' ? 'bg-green-500' : 'bg-gray-500'}`}></div>
                                  <h3 className="font-bold text-white text-lg">
                                    Signal {signal.type} {signal.symbol} ‚Äì {signal.timeframe}
                                  </h3>
                                </div>
                                
                                {/* D√©tails du signal */}
                                <div className="space-y-2">
                                    {signal.entry !== 'N/A' && (
                                      <div className="flex items-center gap-2">
                                      <span className="text-blue-400 text-sm">üîπ</span>
                                      <span className="text-white">Entr√©e : {signal.entry} USD</span>
                                      </div>
                                    )}
                                    {signal.stopLoss !== 'N/A' && (
                                      <div className="flex items-center gap-2">
                                      <span className="text-blue-400 text-sm">üîπ</span>
                                      <span className="text-white">Stop Loss : {signal.stopLoss} USD</span>
                                      </div>
                                    )}
                                  {signal.takeProfit !== 'N/A' && (
                                      <div className="flex items-center gap-2">
                                      <span className="text-blue-400 text-sm">üîπ</span>
                                      <span className="text-white">Take Profit : {signal.takeProfit} USD</span>
                                      </div>
                                    )}
                                  </div>
                                
                                {/* Ratio R:R */}
                                {signal.entry !== 'N/A' && signal.takeProfit !== 'N/A' && signal.stopLoss !== 'N/A' && (
                                  <div className="flex items-center gap-2 pt-2 border-t border-gray-600">
                                    <span className="text-red-400 text-sm">üéØ</span>
                                    <span className="text-white text-sm">
                                      Ratio R:R : ‚âà {calculateRiskReward(signal.entry, signal.takeProfit, signal.stopLoss)}
                                    </span>
                                </div>
                                )}

                                {/* Message de fermeture */}
                                {signal.closeMessage && (
                                  <div className="flex items-center gap-2 pt-2 border-t border-gray-600">
                                    <span className="text-yellow-400 text-sm">üîí</span>
                                    <span className="text-yellow-400 text-sm font-medium">
                                      {signal.closeMessage}
                                    </span>
                                  </div>
                                )}
                              </div>
                            </div>

                            {signal.image && (
                              <div className="mt-2">
                                <img 
                                  src={signal.image} 
                                  alt="Signal screenshot"
                                  className="max-w-full md:max-w-2xl rounded-lg border border-gray-600"
                                />
                              </div>
                            )}

                            {/* Boutons de statut supprim√©s - seul admin peut changer WIN/LOSS/BE */}


                          </div>
                        </div>
                      ))
                    )}
                  </div>
                                ) : false ? (
                  <div className="flex flex-col h-full">
                    {/* Interface Livestream */}
                    <div className="flex-1 flex flex-col lg:flex-row gap-4 p-4">
                      {/* Zone de stream */}
                      <div className="flex-1 bg-gray-900 rounded-lg overflow-hidden">
                        {!isLiveStreaming ? (
                          <div className="h-full flex flex-col items-center justify-center p-8">
                            <div className="text-center space-y-4">
                              <div className="w-20 h-20 bg-red-500 rounded-full flex items-center justify-center mx-auto">
                                <svg className="w-10 h-10 text-white" fill="currentColor" viewBox="0 0 24 24">
                                  <path d="M8 5v14l11-7z"/>
                                </svg>
                              </div>
                              <h2 className="text-xl font-bold text-white">Aucun stream en cours</h2>
                              <p className="text-gray-400">Commencez votre session de trading en direct</p>
                              
                              {/* Formulaire de d√©marrage */}
                              <div className="space-y-3 max-w-md mx-auto">
                                <input
                                  type="text"
                                  placeholder="Titre du stream (ex: Session TradingView - EURUSD)"
                                  value={streamTitle}
                                  onChange={(e) => setStreamTitle(e.target.value)}
                                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                />
                                <textarea
                                  placeholder="Description (optionnel)"
                                  value={streamDescription}
                                  onChange={(e) => setStreamDescription(e.target.value)}
                                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                  rows={2}
                                />
                                <div className="flex gap-2">
                                  <button
                                    onClick={handleStartStream}
                                    className="flex-1 bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg text-white font-medium"
                                  >
                                    üé• D√©marrer Stream
                                  </button>
                                  <button
                                    onClick={handleShareScreen}
                                    className="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-white"
                                  >
                                    üì∫ Partager √âcran
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                        ) : (
                          <div className="h-full flex flex-col">
                            {/* Header du stream */}
                            <div className="bg-gray-800 p-4 border-b border-gray-700">
                              <div className="flex items-center justify-between">
                                <div>
                                  <h3 className="text-lg font-bold text-white">{streamTitle}</h3>
                                  <p className="text-sm text-gray-400">{streamDescription}</p>
                                </div>
                                <div className="flex items-center gap-4">
                                  <div className="flex items-center gap-2 text-red-400">
                                    <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse"></div>
                                    <span className="text-sm font-medium">EN DIRECT</span>
                                  </div>
                                  <div className="flex items-center gap-1 text-gray-400">
                                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                    <span className="text-sm">{viewerCount} spectateurs</span>
                                  </div>
                                  <button
                                    onClick={handleStopStream}
                                    className="bg-gray-600 hover:bg-gray-500 px-3 py-1 rounded text-sm text-white"
                                  >
                                    Arr√™ter
                                  </button>
                                </div>
                              </div>
                            </div>
                            
                            {/* Zone de vid√©o */}
                            <div className="flex-1 bg-black flex items-center justify-center">
                              <div className="text-center text-gray-400">
                                <div className="w-16 h-16 bg-gray-800 rounded-lg flex items-center justify-center mx-auto mb-4">
                                  <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"/>
                                  </svg>
                                </div>
                                <p className="text-sm">Stream en cours...</p>
                                <p className="text-xs mt-1">Partagez votre √©cran TradingView</p>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {/* Chat live */}
                      <div className="w-full lg:w-80 bg-gray-800 rounded-lg flex flex-col">
                        <div className="p-4 border-b border-gray-700">
                          <h3 className="font-semibold text-white">üí¨ Chat Live</h3>
                          <p className="text-xs text-gray-400">{viewerCount} spectateurs en ligne</p>
                        </div>
                        
                        <div className="flex-1 overflow-y-auto p-4 space-y-3">
                          {(messages[''] || []).length === 0 ? (
                        <div className="text-center py-8">
                              <div className="text-gray-400 text-sm">Aucun message</div>
                              <div className="text-gray-500 text-xs mt-1">Soyez le premier √† commenter !</div>
                        </div>
                      ) : (
                            (messages[''] || []).map((message) => (
                              <div key={message.id} className="flex items-start gap-2">
                                <div className="h-6 w-6 bg-blue-500 rounded-full flex items-center justify-center text-xs overflow-hidden">
                                  {message.author === currentUsername && profileImage ? (
                                    <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                                  ) : (
                                    'T'
                                  )}
                                </div>
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-1">
                                    <span className="font-medium text-white text-sm">{message.author}</span>
                                    <span className="text-xs text-gray-400">{message.timestamp}</span>
                                  </div>
                                  <div className="bg-gray-700 rounded-lg p-2">
                                    <p className="text-white text-sm">{message.text}</p>
                                  </div>
                                  
                                  {/* Bouton de r√©action flamme */}
                                  <div className="mt-2 flex justify-start">
                                    <button
                                      onClick={() => handleAddReaction(message.id)}
                                      className={`flex items-center gap-1 px-2 py-1 rounded text-xs transition-colors ${
                                        (messageReactions[message.id]?.users || []).includes(user?.email || 'Anonymous')
                                          ? 'bg-orange-500 text-white hover:bg-orange-600'
                                          : 'bg-gray-600 text-gray-300 hover:bg-gray-500 hover:text-white'
                                      }`}
                                    >
                                      üî•
                                      <span className="text-xs">
                                        {messageReactions[message.id]?.fire || 0}
                                      </span>
                                    </button>
                                  </div>
                                </div>
                              </div>
                            ))
                          )}
                        </div>
                        
                        {/* Barre de message pour le chat live */}
                        <div className="p-4 border-t border-gray-700">
                          <div className="flex items-center gap-2">
                            <input
                              type="text"
                              value={chatMessage}
                              onChange={(e) => setChatMessage(e.target.value)}
                              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
                              placeholder="Commenter le stream..."
                              className="flex-1 bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 text-sm"
                            />
                            <button
                              onClick={handleSendMessage}
                              className="bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded-lg text-white text-sm"
                            >
                              Envoyer
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : ['fondamentaux', 'letsgooo-model', 'general-chat-2', 'general-chat-3', 'general-chat-4'].includes(selectedChannel.id) ? (
                  <div className="flex flex-col h-full">
                    {/* Messages de chat */}
                    <div ref={messagesContainerRef} className="flex-1 overflow-y-auto overflow-x-hidden p-4 space-y-4 pb-32">
                      {/* Cours Scalping pour le salon Fondamentaux */}
                      {selectedChannel.id === 'fondamentaux' && (
                        <div className="bg-gray-800 rounded-lg p-6 mb-6">
                          <div className="text-center mb-8 p-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl text-white">
                            <div className="flex justify-center mb-0">
                  <img 
                    src="/logo-removebg-preview.png" 
                    alt="Trading pour les nuls" 
                    className="h-48 w-auto object-cover"
                    style={{ clipPath: 'inset(10% 5% 15% 5%)' }}

                  />
                </div>
                            <p className="text-xl opacity-90 -mt-3">Guide complet des concepts fondamentaux et strat√©gies avanc√©es</p>
                          </div>
                          
                          <div className="space-y-6 text-gray-300">
                            <div className="bg-yellow-600/20 border border-yellow-600/30 rounded-lg p-4">
                              <p className="text-yellow-200"><strong>üìñ Avertissement :</strong> Ce guide pr√©sente un ensemble de concepts appris et exp√©riment√©s sur les march√©s financiers. Il ne s'agit pas d'inventions originales, mais d'un setup personnel bas√© sur l'observation et l'exp√©rience pratique.</p>
                            </div>
                            
                            <div>
                              <h2 className="text-2xl font-bold text-blue-400 mb-4 border-l-4 border-blue-400 pl-4">1. üìö Introduction</h2>
                              <p>Ce document vous pr√©sente les fondamentaux essentiels pour comprendre comment les charts √©voluent et ce qui influence leurs mouvements. L'objectif est de construire une base solide avant d'aborder les strat√©gies avanc√©es.</p>
                            </div>
                            
                            <div>
                              <h2 className="text-2xl font-bold text-blue-400 mb-4 border-l-4 border-blue-400 pl-4">2. üß† Fondamentaux des Charts</h2>
                              <div className="bg-gray-700 rounded-lg p-4 mb-4">
                                <h3 className="text-lg font-semibold text-green-400 mb-2">üìà Qu'est-ce qu'une Chart ?</h3>
                                <p className="mb-3">Une chart (ou graphique) est une repr√©sentation visuelle du prix d'un actif financier dans le temps (Bitcoin, or, actions, etc.).</p>
                                <div className="bg-gray-600 rounded p-3">
                                  <h4 className="font-semibold text-blue-300 mb-2">Elle permet de :</h4>
                                  <ul className="space-y-1 text-sm">
                                    <li>‚Üí Voir comment le prix √©volue</li>
                                    <li>‚Üí Trouver des points d'entr√©e/sortie</li>
                                    <li>‚Üí Comprendre le comportement du march√©</li>
                                  </ul>
                                </div>
                              </div>
                              
                              <div className="bg-gray-700 rounded-lg p-4">
                                <h3 className="text-lg font-semibold text-green-400 mb-2">üïØÔ∏è Comprendre les Bougies</h3>
                                <p className="mb-3">Chaque bougie montre l'√©volution du prix sur une p√©riode donn√©e (1 min, 1h, 1 jour, etc.)</p>
                                <div className="bg-gray-600 rounded p-3">
                                  <h4 className="font-semibold text-blue-300 mb-2">Composition d'une bougie :</h4>
                                  <ul className="space-y-1 text-sm">
                                    <li>‚Üí <strong>Le corps (body) :</strong> diff√©rence entre ouverture et cl√¥ture</li>
                                    <li>‚Üí <strong>Les m√®ches (wicks) :</strong> les plus hauts et plus bas atteints</li>
                                    <li>‚Üí <strong>Couleur :</strong> verte/blanche si cl√¥ture &gt; ouverture, rouge/noire si cl√¥ture &lt; ouverture</li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                            
                            <div>
                              <h2 className="text-2xl font-bold text-blue-400 mb-4 border-l-4 border-blue-400 pl-4">3. üß† Mouvement des Prix (Mod√®le AMD)</h2>
                              <div className="bg-yellow-600/20 border border-yellow-600/30 rounded-lg p-4 mb-4">
                                <p><strong>üöóüí® Analogie :</strong> Le prix, c'est comme un voyage de A √† B. Pour avancer, il a besoin de liquidit√©, comme une voiture a besoin d'essence.</p>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                <div className="bg-yellow-600/20 border border-yellow-600/30 rounded-lg p-4 text-center">
                                  <div className="text-2xl font-bold mb-2">1Ô∏è‚É£</div>
                                  <div className="font-semibold mb-2">Accumulation</div>
                                  <p className="text-sm">Le prix se pr√©pare üõë‚õΩ</p>
                                </div>
                                <div className="bg-red-600/20 border border-red-600/30 rounded-lg p-4 text-center">
                                  <div className="text-2xl font-bold mb-2">2Ô∏è‚É£</div>
                                  <div className="font-semibold mb-2">Manipulation</div>
                                  <p className="text-sm">Il pi√®ge les traders üéØü™§</p>
                                </div>
                                <div className="bg-green-600/20 border border-green-600/30 rounded-lg p-4 text-center">
                                  <div className="text-2xl font-bold mb-2">3Ô∏è‚É£</div>
                                  <div className="font-semibold mb-2">Distribution</div>
                                  <p className="text-sm">Le vrai mouvement üöÄüìà</p>
                                </div>
                              </div>
                            </div>
                            
                            <div>
                              <h2 className="text-2xl font-bold text-blue-400 mb-4 border-l-4 border-blue-400 pl-4">4. üìà Support et R√©sistance</h2>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="bg-green-600/20 border border-green-600/30 rounded-lg p-4 text-center">
                                  <strong className="text-green-300">üîπ Support</strong><br/>
                                  <span className="text-sm">Zone o√π le prix rebondit vers le haut üîº</span>
                                </div>
                                <div className="bg-red-600/20 border border-red-600/30 rounded-lg p-4 text-center">
                                  <strong className="text-red-300">üîπ R√©sistance</strong><br/>
                                  <span className="text-sm">Zone o√π le prix bloque et redescend üîΩ</span>
                                </div>
                              </div>
                            </div>
                            
                            <div>
                              <h2 className="text-2xl font-bold text-blue-400 mb-4 border-l-4 border-blue-400 pl-4">5. üî¨ Concepts Avanc√©s</h2>
                              <div className="space-y-4">
                                <div className="bg-gray-700 rounded-lg p-4">
                                  <h3 className="text-lg font-semibold text-purple-400 mb-2">üß± ORDER BLOCK (OB)</h3>
                                  <p className="mb-2">Un Order Block repr√©sente la derni√®re bougie haussi√®re (ou baissi√®re) avant un mouvement impulsif majeur dans la direction oppos√©e.</p>
                                  <div className="text-sm text-blue-300">
                                    ‚Üí Ces zones deviennent des rep√®res de liquidit√©<br/>
                                    ‚Üí Souvent retest√©es par le prix<br/>
                                    ‚Üí Offrent des points d'entr√©e √† fort potentiel
                                  </div>
                                </div>
                                
                                <div className="bg-gray-700 rounded-lg p-4">
                                  <h3 className="text-lg font-semibold text-purple-400 mb-2">‚ö°üìâüìà FVG ‚Äì Fair Value Gap</h3>
                                  <p className="mb-2">Un FVG est une zone de d√©s√©quilibre cr√©√©e lors d'un mouvement rapide et violent du march√© üöÄ.</p>
                                  <div className="text-sm text-blue-300">
                                    ‚Üí Le prix revient fr√©quemment combler ces gaps<br/>
                                    ‚Üí Zones int√©ressantes pour entrer ou sortir d'une position
                                  </div>
                                </div>
                                
                                <div className="bg-gray-700 rounded-lg p-4">
                                  <h3 className="text-lg font-semibold text-purple-400 mb-2">ü¶Ñ Unicorn</h3>
                                  <p className="mb-2">C'est un setup form√© par l'association d'un Breaker (BRKR) ‚ö° et d'un Fair Value Gap (FVG) üìâ.</p>
                                  <div className="text-sm text-blue-300">
                                    ‚Üí Zone √† forte probabilit√© de r√©action du prix<br/>
                                    ‚Üí Rassemble deux zones institutionnelles cl√©s<br/>
                                    ‚Üí Point d'entr√©e ou de prise de profit id√©al
                                  </div>
                                </div>
                              </div>
                            </div>
                            
                            <div>
                              <h2 className="text-2xl font-bold text-blue-400 mb-4 border-l-4 border-blue-400 pl-4">6. üïµÔ∏è CRT ‚Äì Candle Range Theory</h2>
                              <p className="mb-4">La Candle Range Theory (CRT) est une m√©thode d'analyse bas√©e sur 3 bougies cons√©cutives.</p>
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div className="bg-yellow-600/20 border border-yellow-600/30 rounded-lg p-4 text-center">
                                  <div className="text-2xl font-bold mb-2">1Ô∏è‚É£</div>
                                  <div className="font-semibold mb-2">La Range</div>
                                  <p className="text-sm">Bougie avec grand corps<br/>Zone de stagnation</p>
                                </div>
                                <div className="bg-red-600/20 border border-red-600/30 rounded-lg p-4 text-center">
                                  <div className="text-2xl font-bold mb-2">2Ô∏è‚É£</div>
                                  <div className="font-semibold mb-2">Manipulation</div>
                                  <p className="text-sm">Va chercher la liquidit√©<br/>Pi√®ge les traders</p>
                                </div>
                                <div className="bg-green-600/20 border border-green-600/30 rounded-lg p-4 text-center">
                                  <div className="text-2xl font-bold mb-2">3Ô∏è‚É£</div>
                                  <div className="font-semibold mb-2">Distribution</div>
                                  <p className="text-sm">Bougie directionnelle<br/>Zone d'entr√©e</p>
                                </div>
                              </div>
                            </div>
                            
                            <div>
                              <h2 className="text-2xl font-bold text-blue-400 mb-4 border-l-4 border-blue-400 pl-4">7. üìå Le Setup "A+"</h2>
                              <div className="bg-green-600/20 border border-green-600/30 rounded-lg p-4 mb-4">
                                <h3 className="font-semibold mb-2">PRINCIPE DU MOD√àLE</h3>
                                <p className="mb-2">Le principe du mod√®le, c'est de prendre position apr√®s la phase de manipulation ‚è∏Ô∏è, sur la timeframe basse (LTF) du contexte d√©fini sur la timeframe haute (HTF) üìä.</p>
                                <p>üéØ Cela permet d'√©viter les pi√®ges des faux breakouts üö´ et de s'aligner avec la vraie direction du mouvement ‚û°Ô∏è.</p>
                              </div>
                            </div>
                            
                            <div className="bg-red-600/20 border border-red-600/30 rounded-lg p-4">
                              <h4 className="font-semibold mb-2">‚ö†Ô∏è Avertissement L√©gal</h4>
                              <p className="text-sm">Ce document est fourni √† des fins √©ducatives uniquement. Le trading comporte des risques significatifs de perte financi√®re. Il est essentiel de bien comprendre les risques avant de trader et ne jamais risquer plus que ce que vous pouvez vous permettre de perdre.</p>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      
                      {(messages[selectedChannel.id] || []).length > 0 && 
                        (messages[selectedChannel.id] || []).map((message, index) => {
                          // V√©rifier si c'est un nouveau jour par rapport au message pr√©c√©dent
                          let messageDate: Date;
                          
                          // G√©rer diff√©rents formats de timestamp
                          if (typeof message.timestamp === 'string') {
                            messageDate = new Date(message.timestamp);
                          } else if (typeof message.timestamp === 'number') {
                            // Si c'est un timestamp Firebase (millisecondes)
                            messageDate = new Date(message.timestamp);
                          } else {
                            // Fallback: utiliser la date actuelle
                            messageDate = new Date();
                          }
                          
                          // V√©rifier si la date est valide
                          if (isNaN(messageDate.getTime())) {
                            messageDate = new Date(); // Fallback si date invalide
                          }
                          
                          const currentMessageDate = messageDate.toDateString();
                          const previousMessage = index > 0 ? messages[selectedChannel.id][index - 1] : null;
                          let previousMessageDate = null;
                          
                          if (previousMessage) {
                            let prevDate: Date;
                            if (typeof previousMessage.timestamp === 'string') {
                              prevDate = new Date(previousMessage.timestamp);
                            } else if (typeof previousMessage.timestamp === 'number') {
                              prevDate = new Date(previousMessage.timestamp);
                            } else {
                              prevDate = new Date();
                            }
                            
                            if (!isNaN(prevDate.getTime())) {
                              previousMessageDate = prevDate.toDateString();
                            }
                          }
                          
                          const showDateSeparator = index > 0 && previousMessageDate && currentMessageDate !== previousMessageDate;
                          
                          // Formater la date pour l'affichage
                          const today = new Date();
                          const yesterday = new Date(today);
                          yesterday.setDate(yesterday.getDate() - 1);
                          
                          let dayLabel = '';
                          if (messageDate.toDateString() === today.toDateString()) {
                            dayLabel = 'Aujourd\'hui';
                          } else if (messageDate.toDateString() === yesterday.toDateString()) {
                            dayLabel = 'Hier';
                          } else {
                            dayLabel = messageDate.toLocaleDateString('fr-FR', { 
                              weekday: 'long', 
                              day: 'numeric', 
                              month: 'long' 
                            });
                          }

                          return (
                            <div key={message.id}>
                              {/* Message */}
                              <div className="flex items-start gap-3">
                            <div className="h-8 w-8 bg-blue-500 rounded-full flex items-center justify-center text-sm overflow-hidden">
                              {message.author_avatar ? (
                                <img src={message.author_avatar} alt="Profile" className="w-full h-full object-cover" />
                              ) : message.author === 'Admin' ? (
                                'A'
                              ) : message.author === currentUsername ? (
                                currentUsername.charAt(0).toUpperCase()
                              ) : (
                                'U'
                              )}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="font-semibold text-white">{message.author}</span>
                                <span className="text-xs text-gray-400">{message.timestamp}</span>
                              </div>
                              <div 
                                className="bg-gray-700 rounded-lg p-3 hover:shadow-lg hover:shadow-gray-900/50 transition-shadow duration-200 max-w-full break-words"
                                data-signal-id={message.text.includes('[SIGNAL_ID:') ? message.text.match(/\[SIGNAL_ID:([^\]]+)\]/)?.[1] : undefined}
                              >
                                <div className="text-white">
                                  {message.text.includes('[SIGNAL_ID:') ? (
                                    <>
                                      {message.text.split('[SIGNAL_ID:')[0]}
                                      <span className="text-gray-700 text-xs">[SIGNAL_ID:{message.text.split('[SIGNAL_ID:')[1].split(']')[0]}]</span>
                                      {message.text.split(']').slice(1).join(']')}
                                      
                                      {/* Fl√®che cliquable pour les messages de fermeture */}
                                      {(() => {
                                        const isClosureMessage = message.text.includes('SIGNAL FERM√â');
                                        console.log('üîç Debug fl√®che USER - message.text:', message.text);
                                        console.log('üîç Debug fl√®che USER - isClosureMessage:', isClosureMessage);
                                        if (isClosureMessage) {
                                          console.log('‚úÖ Fl√®che USER devrait appara√Ætre !');
                                        }
                                        return isClosureMessage;
                                      })() && (
                                        <span 
                                          className="ml-2 text-blue-400 hover:text-blue-300 cursor-pointer text-2xl transition-colors inline-block bg-blue-500/20 px-2 py-1 rounded-lg hover:bg-blue-500/30"
                                          onClick={() => {
                                            const signalIdMatch = message.text.match(/\[SIGNAL_ID:([^\]]+)\]/);
                                            const signalId = signalIdMatch ? signalIdMatch[1] : '';
                                            console.log('üîç Debug fl√®che USER - signalId extrait:', signalId);
                                            console.log('üîç Debug fl√®che USER - message.text:', message.text);
                                            
                                            const originalMessage = document.querySelector(`[data-signal-id="${signalId}"]`);
                                            console.log('üîç Debug fl√®che USER - √©l√©ment trouv√©:', originalMessage);
                                            console.log('üîç Debug fl√®che USER - s√©lecteur utilis√©:', `[data-signal-id="${signalId}"]`);
                                            
                                            // Chercher tous les √©l√©ments avec data-signal-id
                                            const allSignalElements = document.querySelectorAll('[data-signal-id]');
                                            console.log('üîç Debug fl√®che USER - tous les √©l√©ments signal:', allSignalElements);
                                            
                                            if (originalMessage && (originalMessage as HTMLElement).offsetParent !== null) {
                                              console.log('üîç Debug fl√®che USER - scroll vers √©l√©ment:', originalMessage);
                                              console.log('üîç Debug fl√®che USER - √©l√©ment visible:', (originalMessage as HTMLElement).offsetParent !== null);
                                              console.log('üîç Debug fl√®che USER - √©l√©ment dans viewport:', originalMessage.getBoundingClientRect());
                                              
                                              // Forcer le scroll vers le haut de la page d'abord
                                              window.scrollTo({ top: 0, behavior: 'smooth' });
                                              
                                              setTimeout(() => {
                                                originalMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                                originalMessage.classList.add('ring-4', 'ring-yellow-400', 'ring-opacity-100', 'bg-yellow-400/20');
                                                setTimeout(() => {
                                                  originalMessage.classList.remove('ring-4', 'ring-yellow-400', 'ring-opacity-100', 'bg-yellow-400/20');
                                                }, 5000);
                                              }, 500);
                                              
                                              console.log('‚úÖ Navigation USER vers le signal original r√©ussie');
                                            } else {
                                              console.log('‚ùå Signal original USER non trouv√©');
                                              console.log('üîç Debug fl√®che USER - recherche alternative...');
                                              
                                              // Recherche simple par contenu dans toute la page
                                              const allDivs = document.querySelectorAll('div');
                                              let foundMessage = null;
                                              
                                              for (let div of allDivs) {
                                                if (div.textContent && div.textContent.includes(signalId) && div.classList.contains('bg-gray-700')) {
                                                  foundMessage = div;
                                                  console.log('üîç Debug fl√®che USER - message trouv√© par contenu:', foundMessage);
                                                  break;
                                                }
                                              }
                                              
                                              if (foundMessage) {
                                                // Scroll direct vers le message trouv√©
                                                foundMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                                foundMessage.classList.add('ring-4', 'ring-yellow-400', 'ring-opacity-100', 'bg-yellow-400/20');
                                                setTimeout(() => {
                                                  foundMessage.classList.remove('ring-4', 'ring-yellow-400', 'ring-opacity-100', 'bg-yellow-400/20');
                                                }, 5000);
                                                console.log('‚úÖ Navigation USER r√©ussie par contenu');
                                              } else {
                                                console.log('‚ùå Aucun message trouv√© avec ce signalId dans toute la page');
                                              }
                                            }
                                          }}
                                          title="Aller au signal original"
                                        >
                                          ‚¨ÜÔ∏è
                                        </span>
                                      )}
                                    </>
                                  ) : (
                                    message.text
                                  )}
                                </div>
                                
                                {/* Boutons WIN/LOSS/BE pour les messages de signal (pas pour les messages de fermeture) */}
                                {message.text.includes('[SIGNAL_ID:') && !message.text.includes('SIGNAL FERM√â') && (() => {
                                  // Extraire l'ID du signal pour v√©rifier son statut
                                  const signalIdMatch = message.text.match(/\[SIGNAL_ID:([^\]]+)\]/);
                                  const signalId = signalIdMatch ? signalIdMatch[1] : '';
                                  const currentSignal = signals.find(s => s.id === signalId);
                                  const isClosed = currentSignal && ['WIN', 'LOSS', 'BE'].includes(currentSignal.status);
                                  
                                  return (
                                    <div className="mt-3 pt-3 border-t border-gray-600">
                                      <div className="flex items-center gap-2">
                                        <span className="text-xs text-gray-400">R√©sultat du signal:</span>
                                        <div className={`px-3 py-1.5 rounded-lg text-xs font-medium ${
                                          isClosed && currentSignal?.status === 'WIN'
                                            ? 'bg-green-500 text-white border-2 border-green-400 shadow-lg' // Bouton WIN actif
                                            : isClosed && currentSignal?.status === 'LOSS'
                                            ? 'bg-red-500 text-white border-2 border-red-400 shadow-lg' // Bouton LOSS actif
                                            : isClosed && currentSignal?.status === 'BE'
                                            ? 'bg-blue-500 text-white border-2 border-blue-400 shadow-lg' // Bouton BE actif
                                            : 'bg-gray-500/30 text-gray-400 border border-gray-500/30' // Bouton neutre
                                        }`}>
                                          {isClosed && currentSignal?.status === 'WIN' ? 'üü¢ WIN' :
                                           isClosed && currentSignal?.status === 'LOSS' ? 'üî¥ LOSS' :
                                           isClosed && currentSignal?.status === 'BE' ? 'üîµ BE' : '‚è≥ EN ATTENTE'}
                                        </div>
                                      </div>
                                      {isClosed && (
                                        <div className="mt-2 text-xs text-gray-400">
                                          <span 
                                            className="cursor-pointer text-blue-400 hover:text-blue-300 underline"
                                            onClick={() => {
                                              // Trouver le message original du signal
                                              const originalMessage = document.querySelector(`[data-signal-id="${signalId}"]`);
                                              if (originalMessage && (originalMessage as HTMLElement).offsetParent !== null) {
                                                originalMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                                // Surligner temporairement
                                                originalMessage.classList.add('ring-2', 'ring-blue-400', 'ring-opacity-50');
                                                setTimeout(() => {
                                                  originalMessage.classList.remove('ring-2', 'ring-blue-400', 'ring-opacity-50');
                                                }, 3000);
                                              }
                                            }}
                                          >
                                            Signal {currentSignal?.id || ''} ferm√© avec {currentSignal?.pnl ? `P&L: ${currentSignal.pnl}` : 'aucun P&L'}
                                          </span>
                                        </div>
                                      )}
                                    </div>
                                  );
                                })()}
                                
                                {message.attachment_data && (
                                  <div className="mt-2">
                                    <div className="relative">
                                      <img 
                                        src={message.attachment_data} 
                                        alt="Attachment"
                                        className="mt-2 max-w-xs md:max-w-3xl max-h-40 md:max-h-96 object-contain rounded-lg border border-gray-600 cursor-pointer hover:opacity-80 transition-opacity"
                                        onClick={() => setSelectedImage(message.attachment_data)}
                                      />
                                      <div className="text-xs text-gray-400 mt-1">Cliquez pour agrandir</div>
                                    </div>
                                  </div>
                                )}
                              </div>
                              
                              {/* Bouton de r√©action flamme */}
                              <div className="mt-2 flex justify-start">
                                <button
                                  onClick={() => handleAddReaction(message.id)}
                                  className={`flex items-center gap-1 px-2 py-1 rounded text-xs transition-colors ${
                                    (messageReactions[message.id]?.users || []).includes(user?.email || 'Anonymous')
                                      ? 'bg-orange-500 text-white hover:bg-orange-600'
                                      : 'bg-gray-600 text-gray-300 hover:bg-gray-500 hover:text-white'
                                  }`}
                                >
                                  üî•
                                  <span className="text-xs">
                                    {messageReactions[message.id]?.fire || 0}
                                  </span>
                                </button>
                              </div>

                            </div>
                              </div>
                            </div>
                          );
                        })
                      }
                      <div ref={messagesEndRef} />
                    </div>
                  </div>
                ) : false ? (
                  <div className="flex flex-col h-full">
                    {/* Interface Livestream Desktop */}
                    <div className="flex-1 flex flex-col lg:flex-row gap-4 p-4">
                      {/* Zone de stream */}
                      <div className="flex-1 bg-gray-900 rounded-lg overflow-hidden">
                        {!isLiveStreaming ? (
                          <div className="h-full flex flex-col items-center justify-center p-8">
                            <div className="text-center space-y-4">
                              <div className="w-20 h-20 bg-red-500 rounded-full flex items-center justify-center mx-auto">
                                <svg className="w-10 h-10 text-white" fill="currentColor" viewBox="0 0 24 24">
                                  <path d="M8 5v14l11-7z"/>
                                </svg>
                              </div>
                              <h2 className="text-xl font-bold text-white">Aucun stream en cours</h2>
                              <p className="text-gray-400">Commencez votre session de trading en direct</p>
                              
                              {/* Formulaire de d√©marrage */}
                              <div className="space-y-3 max-w-md mx-auto">
                                <input
                                  type="text"
                                  placeholder="Titre du stream (ex: Session TradingView - EURUSD)"
                                  value={streamTitle}
                                  onChange={(e) => setStreamTitle(e.target.value)}
                                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                />
                                <textarea
                                  placeholder="Description (optionnel)"
                                  value={streamDescription}
                                  onChange={(e) => setStreamDescription(e.target.value)}
                                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                  rows={2}
                                />
                                <div className="flex gap-2">
                                  <button
                                    onClick={handleStartStream}
                                    className="flex-1 bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg text-white font-medium"
                                  >
                                    üé• D√©marrer Stream
                                  </button>
                                  <button
                                    onClick={handleShareScreen}
                                    className="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-white"
                                  >
                                    üì∫ Partager √âcran
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                        ) : (
                          <div className="h-full flex flex-col">
                            {/* Header du stream */}
                            <div className="bg-gray-800 p-4 border-b border-gray-700">
                              <div className="flex items-center justify-between">
                                <div>
                                  <h3 className="text-lg font-bold text-white">{streamTitle}</h3>
                                  <p className="text-sm text-gray-400">{streamDescription}</p>
                                </div>
                                <div className="flex items-center gap-4">
                                  <div className="flex items-center gap-2 text-red-400">
                                    <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse"></div>
                                    <span className="text-sm font-medium">EN DIRECT</span>
                                  </div>
                                  <div className="flex items-center gap-1 text-gray-400">
                                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                    <span className="text-sm">{viewerCount} spectateurs</span>
                                  </div>
                                  <button
                                    onClick={handleStopStream}
                                    className="bg-gray-600 hover:bg-gray-500 px-3 py-1 rounded text-sm text-white"
                                  >
                                    Arr√™ter
                                  </button>
                                </div>
                              </div>
                            </div>
                            
                            {/* Zone de vid√©o */}
                            <div className="flex-1 bg-black flex items-center justify-center">
                              <div className="text-center text-gray-400">
                                <div className="w-16 h-16 bg-gray-800 rounded-lg flex items-center justify-center mx-auto mb-4">
                                  <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"/>
                                  </svg>
                                </div>
                                <p className="text-sm">Stream en cours...</p>
                                <p className="text-xs mt-1">Partagez votre √©cran TradingView</p>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {/* Chat live */}
                      <div className="w-full lg:w-80 bg-gray-800 rounded-lg flex flex-col">
                        <div className="p-4 border-b border-gray-700">
                          <h3 className="font-semibold text-white">üí¨ Chat Live</h3>
                          <p className="text-xs text-gray-400">{viewerCount} spectateurs en ligne</p>
                        </div>
                        
                        <div className="flex-1 overflow-y-auto p-4 space-y-3">
                          {(messages[''] || []).length === 0 ? (
                            <div className="text-center py-8">
                              <div className="text-gray-400 text-sm">Aucun message</div>
                              <div className="text-gray-500 text-xs mt-1">Soyez le premier √† commenter !</div>
                            </div>
                          ) : (
                            (messages[''] || []).map((message) => (
                              <div key={message.id} className="flex items-start gap-2">
                                <div className="h-6 w-6 bg-blue-500 rounded-full flex items-center justify-center text-xs overflow-hidden">
                                  {message.author === currentUsername && profileImage ? (
                                    <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                                  ) : (
                                    'T'
                                  )}
                                </div>
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-1">
                                    <span className="font-medium text-white text-sm">{message.author}</span>
                                    <span className="text-xs text-gray-400">{message.timestamp}</span>
                                  </div>
                                  <div className="bg-gray-700 rounded-lg p-2">
                                    <p className="text-white text-sm">{message.text}</p>
                                  </div>
                                </div>
                                
                                {/* Bouton de r√©action flamme pour les messages (en dehors du conteneur gris) */}
                                <div className="mt-2 flex justify-start">
                                  <button
                                    onClick={() => handleAddReaction(message.id)}
                                    className={`flex items-center gap-1 px-2 py-1 rounded text-xs transition-colors ${
                                      (messageReactions[message.id]?.users || []).includes(user?.email || 'Anonymous')
                                        ? 'bg-orange-500 text-white hover:bg-orange-600'
                                        : 'bg-gray-600 text-gray-300 hover:bg-gray-500 hover:text-white'
                                    }`}
                                  >
                                    üî•
                                    <span className="text-xs">
                                      {messageReactions[message.id]?.fire || 0}
                                    </span>
                                  </button>
                                </div>
                              </div>
                            ))
                          )}
                        </div>
                        
                        {/* Barre de message pour le chat live */}
                        <div className="p-4 border-t border-gray-700">
                          <div className="flex items-center gap-2">
                            <input
                              type="text"
                              value={chatMessage}
                              onChange={(e) => setChatMessage(e.target.value)}
                              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
                              placeholder="Commenter le stream..."
                              className="flex-1 bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 text-sm"
                            />
                            <button
                              onClick={handleSendMessage}
                              className="bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded-lg text-white text-sm"
                            >
                              Envoyer
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            )}
          </div>
        </div>

        {/* Desktop Content Area */}
        <div className="hidden md:block flex-1 overflow-y-auto overflow-x-hidden">
          {(view === 'calendar' || selectedChannel.id === 'trading-journal') ? (
            getTradingCalendar()
          ) : (
            <div className="p-4 md:p-6 space-y-4 w-full" style={{ paddingTop: '80px' }}>
              {/* Bouton + Signal supprim√© - seul admin peut cr√©er des signaux */}

              {/* Affichage du calendrier pour le canal calendrier */}
              {view === 'signals' && (selectedChannel.id === 'calendrier' || selectedChannel.id === 'journal') ? (
                getTradingCalendar()
              ) : null}
              
              {/* Affichage des signaux */}
                              {view === 'signals' && !['fondamentaux', 'letsgooo-model', 'general-chat-2', 'general-chat-3', 'general-chat-4', 'profit-loss', 'video', 'trading-hub', '', 'calendrier', 'journal'].includes(selectedChannel.id) ? (
                <div className="space-y-4">
                  {signals.filter(signal => signal.channel_id === selectedChannel.id).length === 0 ? (
                    <div className="text-center py-8">
                      <div className="text-gray-400 text-sm">Aucun signal pour le moment</div>
                      <div className="text-gray-500 text-xs mt-1">Cr√©ez votre premier signal avec le bouton "+"</div>
                    </div>
                  ) : (
                    signals.filter(signal => signal.channel_id === selectedChannel.id).map((signal) => (
                      <div key={signal.id} className="flex items-start gap-3">
                        <div className="h-10 w-10 bg-blue-500 rounded-full flex items-center justify-center text-sm overflow-hidden">
                          {profileImage ? (
                            <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                          ) : (
                            'TT'
                          )}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <span className="font-semibold text-white">TheTheTrader</span>
                            <span className="text-xs text-gray-400">{signal.timestamp}</span>
                          </div>

                          <div className="bg-gray-800 rounded-lg p-4 border border-gray-700 max-w-full md:max-w-2xl">
                            <div className="space-y-3">
                              {/* Header avec titre et indicateur */}
                                <div className="flex items-center gap-2">
                                <div className={`w-3 h-3 rounded-full ${signal.status === 'ACTIVE' ? 'bg-green-500' : 'bg-gray-500'}`}></div>
                                <h3 className="font-bold text-white text-lg">
                                  Signal {signal.type} {signal.symbol} ‚Äì {signal.timeframe}
                                </h3>
                              </div>
                              
                              {/* D√©tails du signal */}
                              <div className="space-y-2">
                                  {signal.entry !== 'N/A' && (
                                    <div className="flex items-center gap-2">
                                    <span className="text-blue-400 text-sm">üîπ</span>
                                    <span className="text-white">Entr√©e : {signal.entry} USD</span>
                                    </div>
                                  )}
                                  {signal.stopLoss !== 'N/A' && (
                                    <div className="flex items-center gap-2">
                                    <span className="text-blue-400 text-sm">üîπ</span>
                                    <span className="text-white">Stop Loss : {signal.stopLoss} USD</span>
                                    </div>
                                  )}
                                {signal.takeProfit !== 'N/A' && (
                                    <div className="flex items-center gap-2">
                                    <span className="text-blue-400 text-sm">üîπ</span>
                                    <span className="text-white">Take Profit : {signal.takeProfit} USD</span>
                                    </div>
                                  )}
                                </div>
                              
                              {/* Ratio R:R */}
                              {signal.entry !== 'N/A' && signal.takeProfit !== 'N/A' && signal.stopLoss !== 'N/A' && (
                                <div className="flex items-center gap-2 pt-2 border-t border-gray-600">
                                  <span className="text-red-400 text-sm">üéØ</span>
                                  <span className="text-white text-sm">
                                    Ratio R:R : ‚âà {calculateRiskReward(signal.entry, signal.takeProfit, signal.stopLoss)}
                                  </span>
                              </div>
                              )}

                              {/* Message de fermeture */}
                              {signal.closeMessage && (
                                <div className="flex items-center gap-2 pt-2 border-t border-gray-600">
                                  <span className="text-yellow-400 text-sm">üîí</span>
                                  <span className="text-yellow-400 text-sm font-medium">
                                    {signal.closeMessage}
                                  </span>
                                </div>
                              )}
                            </div>
                          </div>

                          {signal.image && (
                            <div className="mt-2">
                              <img 
                                src={signal.image} 
                                alt="Signal screenshot"
                                className="max-w-full md:max-w-2xl rounded-lg border border-gray-600"
                              />
                            </div>
                          )}

                          {/* Boutons de statut supprim√©s - seul admin peut changer WIN/LOSS/BE */}


                        </div>
                      </div>
                    ))
                  )}
                </div>
              ) : false ? (
                <div className="flex flex-col h-full">
                  {/* Interface Livestream Desktop */}
                  <div className="flex-1 flex flex-col lg:flex-row gap-4 p-4">
                    {/* Zone de stream */}
                    <div className="flex-1 bg-gray-900 rounded-lg overflow-hidden">
                      {!isLiveStreaming ? (
                        <div className="h-full flex flex-col items-center justify-center p-8">
                          <div className="text-center space-y-4">
                            <div className="w-20 h-20 bg-red-500 rounded-full flex items-center justify-center mx-auto">
                              <svg className="w-10 h-10 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M8 5v14l11-7z"/>
                              </svg>
                            </div>
                            <h2 className="text-xl font-bold text-white">Aucun stream en cours</h2>
                            <p className="text-gray-400">Commencez votre session de trading en direct</p>
                            
                            {/* Formulaire de d√©marrage */}
                            <div className="space-y-3 max-w-md mx-auto">
                              <input
                                type="text"
                                placeholder="Titre du stream (ex: Session TradingView - EURUSD)"
                                value={streamTitle}
                                onChange={(e) => setStreamTitle(e.target.value)}
                                className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                              />
                              <textarea
                                placeholder="Description (optionnel)"
                                value={streamDescription}
                                onChange={(e) => setStreamDescription(e.target.value)}
                                className="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                rows={2}
                              />
                              <div className="flex gap-2">
                                <button
                                  onClick={handleStartStream}
                                  className="flex-1 bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg text-white font-medium"
                                >
                                  üé• D√©marrer Stream
                                </button>
                                <button
                                  onClick={handleShareScreen}
                                  className="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-white"
                                >
                                  üì∫ Partager √âcran
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="h-full flex flex-col">
                          {/* Header du stream */}
                          <div className="bg-gray-800 p-4 border-b border-gray-700">
                            <div className="flex items-center justify-between">
                              <div>
                                <h3 className="text-lg font-bold text-white">{streamTitle}</h3>
                                <p className="text-sm text-gray-400">{streamDescription}</p>
                              </div>
                              <div className="flex items-center gap-4">
                                <div className="flex items-center gap-2 text-red-400">
                                  <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse"></div>
                                  <span className="text-sm font-medium">EN DIRECT</span>
                                </div>
                                <div className="flex items-center gap-1 text-gray-400">
                                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                  </svg>
                                  <span className="text-sm">{viewerCount} spectateurs</span>
                                </div>
                                <button
                                  onClick={handleStopStream}
                                  className="bg-gray-600 hover:bg-gray-500 px-3 py-1 rounded text-sm text-white"
                                >
                                  Arr√™ter
                                </button>
                              </div>
                            </div>
                          </div>
                          
                          {/* Zone de vid√©o */}
                          <div className="flex-1 bg-black flex items-center justify-center">
                            <div className="text-center text-gray-400">
                              <div className="w-16 h-16 bg-gray-800 rounded-lg flex items-center justify-center mx-auto mb-4">
                                <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
                                  <path d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"/>
                                </svg>
                              </div>
                              <p className="text-sm">Stream en cours...</p>
                              <p className="text-xs mt-1">Partagez votre √©cran TradingView</p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Chat live */}
                    <div className="w-full lg:w-80 bg-gray-800 rounded-lg flex flex-col">
                      <div className="p-4 border-b border-gray-700">
                        <h3 className="font-semibold text-white">üí¨ Chat Live</h3>
                        <p className="text-xs text-gray-400">{viewerCount} spectateurs en ligne</p>
                      </div>
                      
                      <div className="flex-1 overflow-y-auto p-4 space-y-3">
                        {(messages[''] || []).length === 0 ? (
                      <div className="text-center py-8">
                            <div className="text-gray-400 text-sm">Aucun message</div>
                            <div className="text-gray-500 text-xs mt-1">Soyez le premier √† commenter !</div>
                      </div>
                    ) : (
                          (messages[''] || []).map((message) => (
                            <div key={message.id} className="flex items-start gap-2">
                              <div className="h-6 w-6 bg-blue-500 rounded-full flex items-center justify-center text-xs overflow-hidden">
                                {message.author_avatar ? (
                                  <img src={message.author_avatar} alt="Profile" className="w-full h-full object-cover" />
                                ) : message.author === 'Admin' ? (
                                  'A'
                              ) : message.author === currentUsername ? (
                                currentUsername.charAt(0).toUpperCase()
                                ) : (
                                'U'
                                )}
                              </div>
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <span className="font-medium text-white text-sm">{message.author}</span>
                                  <span className="text-xs text-gray-400">{message.timestamp}</span>
                                </div>
                                <div className="bg-gray-700 rounded-lg p-2">
                                  <p className="text-white text-sm">{message.text}</p>
                                  
                                  {/* Bouton de r√©action flamme pour les messages */}
                                  <div className="mt-2 pt-2 border-t border-gray-600">
                                    <button
                                      onClick={() => handleAddReaction(message.id)}
                                      className={`flex items-center gap-1 px-2 py-1 rounded text-xs transition-colors ${
                                        (messageReactions[message.id]?.users || []).includes(user?.email || 'Anonymous')
                                          ? 'bg-orange-500 text-white hover:bg-orange-600'
                                          : 'bg-gray-600 text-gray-300 hover:bg-gray-500 hover:text-white'
                                      }`}
                                    >
                                      üî•
                                      <span className="text-xs">
                                        {messageReactions[message.id]?.fire || 0}
                                      </span>
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                      
                      {/* Barre de message pour le chat live */}
                      <div className="p-4 border-t border-gray-700">
                        <div className="flex items-center gap-2">
                          <input
                            type="text"
                            value={chatMessage}
                            onChange={(e) => setChatMessage(e.target.value)}
                            onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
                            placeholder="Commenter le stream..."
                            className="flex-1 bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 text-sm"
                          />
                          <button
                            onClick={handleSendMessage}
                            className="bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded-lg text-white text-sm"
                          >
                            Envoyer
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : selectedChannel.id === 'profit-loss' ? (
                <ProfitLoss />
              ) : selectedChannel.id === 'video' ? (
                <div className="flex flex-col h-full bg-gray-900">
                  {/* Interface Video avec Sidebar Visible */}
                  <div className="flex-1 flex flex-col gap-4 p-2">
                    {/* Zone de stream */}
                    <div className="flex-1 bg-gray-900 rounded-lg overflow-hidden">
                      <div className="h-full flex flex-col items-center justify-center p-4 pt-16">
                        <div className="text-center space-y-4 w-full max-w-[95vw] mx-auto">
                          <h1 className="text-3xl font-bold text-white mb-2">Livestream</h1>
                          <p className="text-gray-400">Attache ta ceinture cousin</p>
                          
                          {/* Iframe 100ms */}
                          <div className="w-full relative">
                            <button
                              onClick={() => {
                                const iframe = document.querySelector('iframe[src*="100ms.live"]') as HTMLIFrameElement;
                                if (iframe && iframe.requestFullscreen) {
                                  iframe.requestFullscreen();
                                }
                              }}
                              className="absolute top-4 right-4 z-10 text-white text-4xl font-bold hover:text-gray-300 transition-colors"
                            >
                              ‚§¢
                            </button>
                            <iframe
                              src="https://tote-livestream-033.app.100ms.live/streaming/meeting/hzs-ukns-nts"
                              width="100%"
                              height="1700px"
                              style={{ border: 'none', borderRadius: '8px' }}
                              allow="camera; microphone; display-capture; fullscreen"
                              allowFullScreen
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : selectedChannel.id === 'trading-hub' ? (
                <div className="flex flex-col h-full bg-gray-900">
                  {/* Trading Hub - RumbleTalk */}
                  <div className="flex-1 flex flex-col p-4">
                    <div className="text-center mb-4">
                      <h1 className="text-3xl font-bold text-white mb-2">üí¨ Trading Hub</h1>
                      <p className="text-gray-400">Discute avec la communaut√© en temps r√©el</p>
                    </div>
                    
                    {/* RumbleTalk Chat */}
                    <div className="flex-1 flex items-center justify-center">
                      <RumbleTalk />
                    </div>
                  </div>
                </div>
              ) : selectedChannel.id === 'video' ? (
                <div className="flex flex-col h-full bg-gray-900">
                  {/* Interface Livestream avec Sidebar Visible */}
                  <div className="flex-1 flex flex-col lg:flex-row gap-4 p-4">
                    {/* Zone de stream */}
                    <div className="flex-1 bg-gray-900 rounded-lg overflow-hidden">
                      <div className="h-full flex flex-col items-center justify-center p-8">
                        <div className="text-center space-y-4">
                          <div className="w-20 h-20 bg-red-500 rounded-full flex items-center justify-center mx-auto">
                            <svg className="w-10 h-10 text-white" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M8 5v14l11-7z"/>
                            </svg>
                          </div>
                          <h2 className="text-xl font-bold text-white">Livestream Trading</h2>
                          <p className="text-gray-400">Session de trading en direct</p>
                          
                          {/* Iframe 100ms */}
                          <div className="w-full max-w-7xl relative">
                            <button
                              onClick={() => {
                                const iframe = document.querySelector('iframe[src*="100ms.live"]') as HTMLIFrameElement;
                                if (iframe && iframe.requestFullscreen) {
                                  iframe.requestFullscreen();
                                }
                              }}
                              className="absolute top-4 right-4 z-10 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors"
                            >
                              üì∫ Plein √©cran
                            </button>
                            <iframe
                              src="https://admintrading.app.100ms.live/meeting/kor-inbw-yiz"
                              width="100%"
                              height="1200px"
                              style={{ border: 'none', borderRadius: '8px' }}
                              allow="camera; microphone; display-capture; fullscreen"
                              allowFullScreen
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* Chat live */}
                    <div className="w-full lg:w-80 bg-gray-800 rounded-lg flex flex-col">
                      <div className="p-4 border-b border-gray-700">
                        <h3 className="font-semibold text-white">üí¨ Chat Live</h3>
                        <p className="text-xs text-gray-400">Commentaires en direct</p>
                      </div>
                      
                      <div className="flex-1 overflow-y-auto p-4 space-y-3">
                        {(messages['video'] || []).length === 0 ? (
                          <div className="text-center py-8">
                            <div className="text-gray-400 text-sm">Aucun message</div>
                            <div className="text-gray-500 text-xs mt-1">Soyez le premier √† commenter !</div>
                          </div>
                        ) : (
                          (messages['video'] || []).map((message) => (
                            <div key={message.id} className="flex items-start gap-2">
                              <div className="h-6 w-6 bg-blue-500 rounded-full flex items-center justify-center text-xs">T</div>
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <span className="font-medium text-white text-sm">{message.author}</span>
                                  <span className="text-xs text-gray-400">{message.timestamp}</span>
                                </div>
                                <div className="bg-gray-700 rounded-lg p-2">
                                  <p className="text-white text-sm">{message.text}</p>
                                </div>
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                      
                      {/* Barre de message pour le chat live */}
                      <div className="p-4 border-t border-gray-700">
                        <div className="flex items-center gap-2">
                          <input
                            type="text"
                            value={chatMessage}
                            onChange={(e) => setChatMessage(e.target.value)}
                            onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
                            placeholder="Commenter le stream..."
                            className="flex-1 bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 text-sm"
                          />
                          <button
                            onClick={handleSendMessage}
                            className="bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded-lg text-white text-sm"
                          >
                            Envoyer
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : ['fondamentaux', 'letsgooo-model', 'general-chat-2', 'general-chat-3', 'general-chat-4'].includes(selectedChannel.id) ? (
                <div className="flex flex-col h-full">
                  {/* Messages de chat */}
                  <div ref={messagesContainerRef} className="flex-1 overflow-y-auto overflow-x-hidden p-4 space-y-4 pb-32">
                    {(messages[selectedChannel.id] || []).length > 0 && 
                      (messages[selectedChannel.id] || []).map((message, index) => {
                        // V√©rifier si c'est un nouveau jour par rapport au message pr√©c√©dent
                        let messageDate: Date;
                        
                        // G√©rer diff√©rents formats de timestamp
                        if (typeof message.timestamp === 'string') {
                          messageDate = new Date(message.timestamp);
                        } else if (typeof message.timestamp === 'number') {
                          // Si c'est un timestamp Firebase (millisecondes)
                          messageDate = new Date(message.timestamp);
                        } else {
                          // Fallback: utiliser la date actuelle
                          messageDate = new Date();
                        }
                        
                        // V√©rifier si la date est valide
                        if (isNaN(messageDate.getTime())) {
                          messageDate = new Date(); // Fallback si date invalide
                        }
                        
                        const currentMessageDate = messageDate.toDateString();
                        const previousMessage = index > 0 ? messages[selectedChannel.id][index - 1] : null;
                        let previousMessageDate = null;
                        
                        if (previousMessage) {
                          let prevDate: Date;
                          if (typeof previousMessage.timestamp === 'string') {
                            prevDate = new Date(previousMessage.timestamp);
                          } else if (typeof previousMessage.timestamp === 'number') {
                            prevDate = new Date(previousMessage.timestamp);
                          } else {
                            prevDate = new Date();
                          }
                          
                          if (!isNaN(prevDate.getTime())) {
                            previousMessageDate = prevDate.toDateString();
                          }
                        }
                        
                        const showDateSeparator = index > 0 && previousMessageDate && currentMessageDate !== previousMessageDate;
                        
                        // Formater la date pour l'affichage
                        const today = new Date();
                        const yesterday = new Date(today);
                        yesterday.setDate(yesterday.getDate() - 1);
                        
                        let dayLabel = '';
                        if (messageDate.toDateString() === today.toDateString()) {
                          dayLabel = 'Aujourd\'hui';
                        } else if (messageDate.toDateString() === yesterday.toDateString()) {
                          dayLabel = 'Hier';
                        } else {
                          dayLabel = messageDate.toLocaleDateString('fr-FR', { 
                            weekday: 'long', 
                            day: 'numeric', 
                            month: 'long' 
                          });
                        }

                        return (
                          <div key={message.id}>
                            {/* Message */}
                            <div className="flex items-start gap-3">
                          <div className="h-8 w-8 bg-blue-500 rounded-full flex items-center justify-center text-sm overflow-hidden">
                            {message.author_avatar ? (
                              <img src={message.author_avatar} alt="Profile" className="w-full h-full object-cover" />
                            ) : message.author === 'Admin' ? (
                              'A'
                            ) : message.author === currentUsername ? (
                                currentUsername.charAt(0).toUpperCase()
                            ) : (
                                'U'
                            )}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="font-semibold text-white">{message.author}</span>
                              <span className="text-xs text-gray-400">{message.timestamp}</span>
                            </div>
                            <div className="bg-gray-700 rounded-lg p-3 hover:shadow-lg hover:shadow-gray-900/50 transition-shadow duration-200 max-w-full break-words">
                                <div className="text-white">
                                  {message.text.includes('[SIGNAL_ID:') ? (
                                    <>
                                      {message.text.split('[SIGNAL_ID:')[0]}
                                      <span className="text-gray-700 text-xs">[SIGNAL_ID:{message.text.split('[SIGNAL_ID:')[1].split(']')[0]}]</span>
                                      {message.text.split(']').slice(1).join(']')}
                                      
                                      {/* Fl√®che cliquable pour les messages de fermeture */}
                                      {(() => {
                                        const isClosureMessage = message.text.includes('SIGNAL FERM√â');
                                        console.log('üîç Debug fl√®che USER - message.text:', message.text);
                                        console.log('üîç Debug fl√®che USER - isClosureMessage:', isClosureMessage);
                                        if (isClosureMessage) {
                                          console.log('‚úÖ Fl√®che USER devrait appara√Ætre !');
                                        }
                                        return isClosureMessage;
                                      })() && (
                                        <span 
                                          className="ml-2 text-blue-400 hover:text-blue-300 cursor-pointer text-2xl transition-colors inline-block bg-blue-500/20 px-2 py-1 rounded-lg hover:bg-blue-500/30"
                                          onClick={() => {
                                            const signalIdMatch = message.text.match(/\[SIGNAL_ID:([^\]]+)\]/);
                                            const signalId = signalIdMatch ? signalIdMatch[1] : '';
                                            console.log('üîç Debug fl√®che USER - signalId extrait:', signalId);
                                            console.log('üîç Debug fl√®che USER - message.text:', message.text);
                                            
                                            const originalMessage = document.querySelector(`[data-signal-id="${signalId}"]`);
                                            console.log('üîç Debug fl√®che USER - √©l√©ment trouv√©:', originalMessage);
                                            console.log('üîç Debug fl√®che USER - s√©lecteur utilis√©:', `[data-signal-id="${signalId}"]`);
                                            
                                            // Chercher tous les √©l√©ments avec data-signal-id
                                            const allSignalElements = document.querySelectorAll('[data-signal-id]');
                                            console.log('üîç Debug fl√®che USER - tous les √©l√©ments signal:', allSignalElements);
                                            
                                            if (originalMessage && (originalMessage as HTMLElement).offsetParent !== null) {
                                              console.log('üîç Debug fl√®che USER - scroll vers √©l√©ment:', originalMessage);
                                              console.log('üîç Debug fl√®che USER - √©l√©ment visible:', (originalMessage as HTMLElement).offsetParent !== null);
                                              console.log('üîç Debug fl√®che USER - √©l√©ment dans viewport:', originalMessage.getBoundingClientRect());
                                              
                                              // Forcer le scroll vers le haut de la page d'abord
                                              window.scrollTo({ top: 0, behavior: 'smooth' });
                                              
                                              setTimeout(() => {
                                                originalMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                                originalMessage.classList.add('ring-4', 'ring-yellow-400', 'ring-opacity-100', 'bg-yellow-400/20');
                                                setTimeout(() => {
                                                  originalMessage.classList.remove('ring-4', 'ring-yellow-400', 'ring-opacity-100', 'bg-yellow-400/20');
                                                }, 5000);
                                              }, 500);
                                              
                                              console.log('‚úÖ Navigation USER vers le signal original r√©ussie');
                                            } else {
                                              console.log('‚ùå Signal original USER non trouv√©');
                                              console.log('üîç Debug fl√®che USER - recherche alternative...');
                                              
                                              // Recherche simple par contenu dans toute la page
                                              const allDivs = document.querySelectorAll('div');
                                              let foundMessage = null;
                                              
                                              for (let div of allDivs) {
                                                if (div.textContent && div.textContent.includes(signalId) && div.classList.contains('bg-gray-700')) {
                                                  foundMessage = div;
                                                  console.log('üîç Debug fl√®che USER - message trouv√© par contenu:', foundMessage);
                                                  break;
                                                }
                                              }
                                              
                                              if (foundMessage) {
                                                // Scroll direct vers le message trouv√©
                                                foundMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                                foundMessage.classList.add('ring-4', 'ring-yellow-400', 'ring-opacity-100', 'bg-yellow-400/20');
                                                setTimeout(() => {
                                                  foundMessage.classList.remove('ring-4', 'ring-yellow-400', 'ring-opacity-100', 'bg-yellow-400/20');
                                                }, 5000);
                                                console.log('‚úÖ Navigation USER r√©ussie par contenu');
                                              } else {
                                                console.log('‚ùå Aucun message trouv√© avec ce signalId dans toute la page');
                                              }
                                            }
                                          }}
                                          title="Aller au signal original"
                                        >
                                          ‚¨ÜÔ∏è
                                        </span>
                                      )}
                                    </>
                                  ) : (
                                    message.text
                                  )}
                                </div>
                                
                                {/* Boutons WIN/LOSS/BE pour les messages de signal (pas pour les messages de fermeture) */}
                                {message.text.includes('[SIGNAL_ID:') && !message.text.includes('SIGNAL FERM√â') && (() => {
                                  // Extraire l'ID du signal pour v√©rifier son statut
                                  const signalIdMatch = message.text.match(/\[SIGNAL_ID:([^\]]+)\]/);
                                  const signalId = signalIdMatch ? signalIdMatch[1] : '';
                                  const currentSignal = signals.find(s => s.id === signalId);
                                  const isClosed = currentSignal && ['WIN', 'LOSS', 'BE'].includes(currentSignal.status);
                                  
                                  return (
                                    <div className="mt-3 pt-3 border-t border-gray-600">
                                      <div className="flex items-center gap-2">
                                        <span className="text-xs text-gray-400">R√©sultat du signal:</span>
                                        <div className={`px-3 py-1.5 rounded-lg text-xs font-medium ${
                                          isClosed && currentSignal?.status === 'WIN'
                                            ? 'bg-green-500 text-white border-2 border-green-400 shadow-lg' // Bouton WIN actif
                                            : isClosed && currentSignal?.status === 'LOSS'
                                            ? 'bg-red-500 text-white border-2 border-red-400 shadow-lg' // Bouton LOSS actif
                                            : isClosed && currentSignal?.status === 'BE'
                                            ? 'bg-blue-500 text-white border-2 border-blue-400 shadow-lg' // Bouton BE actif
                                            : 'bg-gray-500/30 text-gray-400 border border-gray-500/30' // Bouton neutre
                                        }`}>
                                          {isClosed && currentSignal?.status === 'WIN' ? 'üü¢ WIN' :
                                           isClosed && currentSignal?.status === 'LOSS' ? 'üî¥ LOSS' :
                                           isClosed && currentSignal?.status === 'BE' ? 'üîµ BE' : '‚è≥ EN ATTENTE'}
                                        </div>
                                      </div>
                                      {isClosed && (
                                        <div className="mt-2 text-xs text-gray-400">
                                          <span 
                                            className="cursor-pointer text-blue-400 hover:text-blue-300 underline"
                                            onClick={() => {
                                              // Trouver le message original du signal
                                              const originalMessage = document.querySelector(`[data-signal-id="${signalId}"]`);
                                              if (originalMessage && (originalMessage as HTMLElement).offsetParent !== null) {
                                                originalMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                                // Surligner temporairement
                                                originalMessage.classList.add('ring-2', 'ring-blue-400', 'ring-opacity-50');
                                                setTimeout(() => {
                                                  originalMessage.classList.remove('ring-2', 'ring-blue-400', 'ring-opacity-50');
                                                }, 3000);
                                              }
                                            }}
                                          >
                                            Signal {currentSignal?.id || ''} ferm√© avec {currentSignal?.pnl ? `P&L: ${currentSignal.pnl}` : 'aucun P&L'}
                                          </span>
                                        </div>
                                      )}
                                    </div>
                                  );
                                })()}
                                
                                {message.attachment_data && (
                                  <div className="mt-2">
                                    <div className="relative">
                                      <img 
                                        src={message.attachment_data} 
                                        alt="Attachment"
                                        className="mt-2 max-w-xs md:max-w-3xl max-h-40 md:max-h-96 object-contain rounded-lg border border-gray-600 cursor-pointer hover:opacity-80 transition-opacity"
                                        onClick={() => setSelectedImage(message.attachment_data)}
                                      />
                                      <div className="text-xs text-gray-400 mt-1">Cliquez pour agrandir</div>
                                    </div>
                                  </div>
                                )}
                              </div>
                              
                              {/* Bouton de r√©action flamme */}
                              <div className="mt-2 flex justify-start">
                                <button
                                  onClick={() => handleAddReaction(message.id)}
                                  className={`flex items-center gap-1 px-2 py-1 rounded text-xs transition-colors ${
                                    (messageReactions[message.id]?.users || []).includes(user?.email || 'Anonymous')
                                      ? 'bg-orange-500 text-white hover:bg-orange-600'
                                      : 'bg-gray-600 text-gray-300 hover:bg-gray-500 hover:text-white'
                                  }`}
                                >
                                  üî•
                                  <span className="text-xs">
                                    {messageReactions[message.id]?.fire || 0}
                                  </span>
                                </button>
                              </div>

                            </div>
                            </div>
                          </div>
                        );
                        })
                      }
                      <div ref={messagesEndRef} />
                  </div>
                </div>
              ) : null}
            </div>
          )}
        </div>
      </div>

      {/* Modal de cr√©ation de signal */}
      {/* Modal de signal supprim√©e - seul admin peut cr√©er des signaux */}

      {/* Modal pour ajouter un trade */}
      {showTradeModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold text-white">Ajouter un trade</h2>
                <button 
                  onClick={() => setShowTradeModal(false)}
                  className="text-gray-400 hover:text-white"
                >
                  ‚úï
                </button>
              </div>
              
              <div className="space-y-4">
                {/* Zone de collage TradingView */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">üìã Coller donn√©es TradingView</label>
                  <div
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 min-h-[80px] flex items-center justify-center cursor-pointer"
                    onPaste={handleTradingViewPasteTrade}
                    onDrop={(e) => {
                      e.preventDefault();
                      const text = e.dataTransfer.getData('text');
                      if (text) {
                        const fakeEvent = {
                          preventDefault: () => {},
                          clipboardData: {
                            getData: (type: string) => {
                              if (type === 'text/html') return '';
                              if (type === 'text') return text;
                              return '';
                            }
                          }
                        } as React.ClipboardEvent<HTMLDivElement>;
                        handleTradingViewPasteTrade(fakeEvent);
                      }
                    }}
                    onDragOver={(e) => e.preventDefault()}
                  >
                    <div className="text-center">
                      <div className="text-gray-400 mb-1">üìã Cliquez ici et collez (Ctrl+V)</div>
                      <div className="text-xs text-gray-500">ou glissez-d√©posez du texte</div>
                    </div>
                  </div>
                  <p className="text-xs text-gray-400 mt-1">Collez directement depuis TradingView</p>
                </div>

                {/* Type de trade */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Type</label>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setTradeData({...tradeData, type: 'BUY'})}
                      className={`px-3 py-2 rounded text-sm ${tradeData.type === 'BUY' ? 'bg-green-600 text-white' : 'bg-gray-600 text-gray-300'}`}
                    >
                      üìà BUY
                    </button>
                    <button
                      onClick={() => setTradeData({...tradeData, type: 'SELL'})}
                      className={`px-3 py-2 rounded text-sm ${tradeData.type === 'SELL' ? 'bg-red-600 text-white' : 'bg-gray-600 text-gray-300'}`}
                    >
                      üìâ SELL
                    </button>
                  </div>
                </div>

                {/* Symbol */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Symbole *</label>
                  <input
                    type="text"
                    value={tradeData.symbol}
                    onChange={(e) => setTradeData({...tradeData, symbol: e.target.value})}
                    placeholder="BTC, ETH, NQ1!, etc."
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400"
                  />
                </div>

                {/* Entry */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Prix d'entr√©e *</label>
                  <input
                    type="text"
                    value={tradeData.entry}
                    onChange={(e) => setTradeData({...tradeData, entry: e.target.value})}
                    placeholder="45000"
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400"
                  />
                </div>

                {/* Exit */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Prix de sortie *</label>
                  <input
                    type="text"
                    value={tradeData.exit}
                    onChange={(e) => setTradeData({...tradeData, exit: e.target.value})}
                    placeholder="46000"
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400"
                  />
                </div>

                {/* Stop Loss */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Stop Loss</label>
                  <input
                    type="text"
                    value={tradeData.stopLoss}
                    onChange={(e) => setTradeData({...tradeData, stopLoss: e.target.value})}
                    placeholder="44000"
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400"
                  />
                </div>

                {/* PnL */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">P&L *</label>
                  <input
                    type="text"
                    value={tradeData.pnl}
                    onChange={(e) => setTradeData({...tradeData, pnl: e.target.value})}
                    placeholder="+500 ou -200"
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400"
                  />
                </div>

                {/* Status */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">R√©sultat</label>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setTradeData({...tradeData, status: 'WIN'})}
                      className={`px-3 py-2 rounded text-sm ${tradeData.status === 'WIN' ? 'bg-green-600 text-white' : 'bg-gray-600 text-gray-300'}`}
                    >
                      ‚úÖ WIN
                    </button>
                    <button
                      onClick={() => setTradeData({...tradeData, status: 'LOSS'})}
                      className={`px-3 py-2 rounded text-sm ${tradeData.status === 'LOSS' ? 'bg-red-600 text-white' : 'bg-gray-600 text-gray-300'}`}
                    >
                      ‚ùå LOSS
                    </button>
                    <button
                      onClick={() => setTradeData({...tradeData, status: 'BE'})}
                      className={`px-3 py-2 rounded text-sm ${tradeData.status === 'BE' ? 'bg-blue-600 text-white' : 'bg-gray-600 text-gray-300'}`}
                    >
                      ‚öñÔ∏è BE
                    </button>
                  </div>
                </div>

                {/* Menu d√©roulant pour la raison du stop-loss (affich√© seulement si LOSS) */}
                {tradeData.status === 'LOSS' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">Raison du Stop-Loss</label>
                    <select
                      value={tradeData.lossReason}
                      onChange={(e) => setTradeData({...tradeData, lossReason: e.target.value})}
                      className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white"
                    >
                      <option value="">S√©lectionner une raison...</option>
                      <option value="mauvais_entree">üéØ Mauvais point d'entr√©e</option>
                      <option value="stop_trop_serre">‚ö†Ô∏è Stop-loss trop serr√©</option>
                      <option value="news_impact">üì∞ Impact de news/√©v√©nements</option>
                      <option value="psychologie">üß† Erreur psychologique (FOMO/Panic)</option>
                      <option value="analyse_technique">üìä Erreur d'analyse technique</option>
                      <option value="gestion_risque">üí∞ Mauvaise gestion du risque</option>
                      <option value="timing">‚è∞ Mauvais timing</option>
                      <option value="volatilite">üìà Volatilit√© excessive</option>
                      <option value="autre">üîß Autre raison</option>
                    </select>
                  </div>
                )}

                {/* Notes */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Notes</label>
                  <textarea
                    value={tradeData.notes}
                    onChange={(e) => setTradeData({...tradeData, notes: e.target.value})}
                    placeholder="Notes sur le trade..."
                    rows={3}
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400"
                  ></textarea>
                </div>
                
                {/* Images */}
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Image 1</label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) setTradeData({...tradeData, image1: file});
                    }}
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Image 2</label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) setTradeData({...tradeData, image2: file});
                    }}
                    className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white"
                  />
                </div>
               
                {/* Boutons */}
                <div className="flex gap-3 pt-4">
                  <button
                    onClick={() => setShowTradeModal(false)}
                    className="flex-1 bg-gray-600 hover:bg-gray-500 px-4 py-2 rounded text-white"
                  >
                    Annuler
                  </button>
                  <button
                    onClick={handleTradeSubmit}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded text-white"
                  >
                    Ajouter le trade
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal des Trades */}
      {showTradesModal && selectedTradesDate && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 rounded-xl max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-white">
                  Trades du {selectedTradesDate.toLocaleDateString('fr-FR', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </h2>
                <button
                  onClick={() => setShowTradesModal(false)}
                  className="text-gray-400 hover:text-white text-2xl"
                >
                  √ó
                </button>
              </div>

              <div className="space-y-4">
                {getTradesForDate(selectedTradesDate).map((trade) => (
                  <div key={trade.id} className="bg-gray-700 rounded-lg p-4 border border-gray-600">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <span className={`px-2 py-1 rounded text-xs font-bold ${
                          trade.type === 'BUY' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                        }`}>
                          {trade.type}
                        </span>
                        <span className="text-lg font-bold text-white">{trade.symbol}</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <span className={`text-lg font-bold ${
                          (trade.pnl && parseFloat(trade.pnl) >= 0) ? 'text-green-400' : 'text-red-400'
                        }`}>
                          {(trade.pnl && parseFloat(trade.pnl) >= 0) ? '+' : ''}{trade.pnl || '0'}$
                        </span>
                        <button
                          onClick={async () => {
                            if (confirm('Supprimer ce trade ?')) {
                              const success = await deletePersonalTrade(trade.id);
                              if (success) {
                                setPersonalTrades(prev => prev.filter(t => t.id !== trade.id));
                              }
                            }
                          }}
                          className="text-red-400 hover:text-red-300 text-xl font-bold"
                          title="Supprimer ce trade"
                        >
                          √ó
                        </button>
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4 mb-3">
                      <div>
                        <span className="text-sm text-gray-400">Entry:</span>
                        <span className="text-white ml-2">{trade.entry}</span>
                      </div>
                      <div>
                        <span className="text-sm text-gray-400">Exit:</span>
                        <span className="text-white ml-2">{trade.exit}</span>
                      </div>
                      <div>
                        <span className="text-sm text-gray-400">Stop Loss:</span>
                        <span className="text-white ml-2">{trade.stopLoss}</span>
                      </div>
                      <div>
                        <span className="text-sm text-gray-400">Status:</span>
                        <span className={`ml-2 px-2 py-1 rounded text-xs ${
                          trade.status === 'WIN' ? 'bg-green-600 text-white' :
                          trade.status === 'LOSS' ? 'bg-red-600 text-white' :
                          'bg-blue-600 text-white'
                        }`}>
                          {trade.status}
                        </span>
                      </div>
                    </div>

                    {trade.notes && (
                      <div className="mb-3">
                        <span className="text-sm text-gray-400">Notes:</span>
                        <p className="text-white mt-1">{trade.notes}</p>
                      </div>
                    )}

                    {/* Images */}
                    {(trade.image1 || trade.image2) && (
                      <div className="mb-3">
                        <span className="text-sm text-gray-400">Images:</span>
                        <div className="mt-2 space-y-3 flex flex-col items-center">
                          {trade.image1 && (
                            <div className="flex flex-col items-center">
                              <span className="text-xs text-gray-500">üì∏ Image 1:</span>
                              <div className="mt-1">
                                <img 
                                  src={trade.image1 instanceof File ? URL.createObjectURL(trade.image1) : trade.image1} 
                                  alt="Trade image 1" 
                                  className="w-96 h-96 object-cover rounded cursor-pointer hover:opacity-80 border border-gray-600"
                                  onClick={() => setSelectedImage(trade.image1 instanceof File ? URL.createObjectURL(trade.image1) : trade.image1)}
                                />
                              </div>
                            </div>
                          )}
                          {trade.image2 && (
                            <div className="flex flex-col items-center">
                              <span className="text-xs text-gray-500">üì∏ Image 2:</span>
                              <div className="mt-1">
                                <img 
                                  src={trade.image2 instanceof File ? URL.createObjectURL(trade.image2) : trade.image2} 
                                  alt="Trade image 2" 
                                  className="w-96 h-96 object-cover rounded cursor-pointer hover:opacity-80 border border-gray-600"
                                  onClick={() => setSelectedImage(trade.image2 instanceof File ? URL.createObjectURL(trade.image2) : trade.image2)}
                                />
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    <div className="flex items-center justify-between text-sm text-gray-400">
                      <span>Ajout√© le {trade.timestamp}</span>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mt-6 pt-4 border-t border-gray-600">
                <button
                  onClick={() => setShowTradesModal(false)}
                  className="w-full bg-gray-600 hover:bg-gray-500 px-4 py-2 rounded text-white"
                >
                  Fermer
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal des Signaux */}
      {showSignalsModal && selectedSignalsDate && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 rounded-xl max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-white">
                  {selectedChannel.id === 'trading-journal' ? 'Trades du' : 'Signaux du'} {selectedSignalsDate.toLocaleDateString('fr-FR', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </h2>
                <button
                  onClick={() => setShowSignalsModal(false)}
                  className="text-gray-400 hover:text-white text-2xl"
                >
                  √ó
                </button>
              </div>

              <div className="space-y-4">
                {(selectedChannel.id === 'trading-journal' ? 
                  getTradesForDate(selectedSignalsDate).length > 0 : 
                  getSignalsForDate(selectedSignalsDate).length > 0) ? (
                  (() => {
                    const signals = selectedChannel.id === 'trading-journal' ? 
                      getTradesForDate(selectedSignalsDate) : 
                      getSignalsForDate(selectedSignalsDate);
                    console.log('üîç [POPUP USER] Donn√©es re√ßues dans le popup:', signals);
                    signals.forEach(signal => {
                      console.log('üîç [POPUP USER] Signal individuel COMPLET:', {
                        id: signal.id,
                        symbol: signal.symbol,
                        image: signal.image,
                        attachment_data: signal.attachment_data,
                        attachment_type: signal.attachment_type,
                        attachment_name: signal.attachment_name,
                        closure_image: signal.closure_image,
                        closure_image_type: signal.closure_image_type,
                        closure_image_name: signal.closure_image_name,
                        status: signal.status,
                        timestamp: signal.timestamp,
                        ALL_KEYS: Object.keys(signal)
                      });
                    });
                    
                    return signals.map((signal) => (
                      <div key={signal.id} className="bg-gray-700 rounded-lg p-4 border border-gray-600">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <span className={`px-2 py-1 rounded text-xs font-bold ${
                              signal.type === 'BUY' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                            }`}>
                              {signal.type}
                            </span>
                            <span className="text-lg font-bold text-white">{signal.symbol}</span>
                            <span className="text-sm text-gray-400">{signal.timeframe}</span>
                          </div>
                          <span className={`px-2 py-1 rounded text-xs ${
                            signal.status === 'WIN' ? 'bg-green-600 text-white' :
                            signal.status === 'LOSS' ? 'bg-red-600 text-white' :
                            signal.status === 'BE' ? 'bg-blue-600 text-white' :
                            'bg-yellow-600 text-white'
                          }`}>
                            {signal.status}
                          </span>
                        </div>

                        <div className="grid grid-cols-2 gap-4 mb-3">
                          <div>
                            <span className="text-sm text-gray-400">Entry:</span>
                            <span className="text-white ml-2">{signal.entry}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">Take Profit:</span>
                            <span className="text-white ml-2">{signal.takeProfit}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">Stop Loss:</span>
                            <span className="text-white ml-2">{signal.stopLoss}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">PnL:</span>
                            <span className={`ml-2 font-bold ${
                              signal.pnl && signal.pnl.includes('-') ? 'text-red-400' : 'text-green-400'
                            }`}>
                              {signal.pnl || 'N/A'}
                            </span>
                          </div>
                        </div>

                        {/* Affichage des images */}
                        {(signal.image || signal.attachment_data || signal.closure_image) && (
                          <div className="mb-3">
                            <span className="text-sm text-gray-400">Images:</span>
                            <div className="mt-2 space-y-3 flex flex-col items-center">
                              {(signal.image || signal.attachment_data) && (
                                <div className="flex flex-col items-center">
                                  <span className="text-xs text-gray-500">üì∏ Image de cr√©ation:</span>
                                  <div className="mt-1">
                                    <img 
                                      src={signal.image || signal.attachment_data}
                                      alt="Signal image"
                                      className="w-96 h-96 object-cover rounded cursor-pointer hover:opacity-80 border border-gray-600"
                                      onClick={() => setSelectedImage(signal.image || signal.attachment_data)}
                                    />
                                  </div>
                                </div>
                              )}
                              {signal.closure_image && (
                                <div className="flex flex-col items-center">
                                  <span className="text-xs text-gray-500">üì∏ Image de fermeture:</span>
                                  <div className="mt-1">
                                    <img 
                                      src={signal.closure_image}
                                      alt="Signal closure image"
                                      className="w-96 h-96 object-cover rounded cursor-pointer hover:opacity-80 border border-gray-600"
                                      onClick={() => setSelectedImage(signal.closure_image)}
                                    />
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        )}


                      </div>
                    ));
                  })()
                ) : (
                  <div className="text-center py-8">
                    <div className="text-gray-400 text-lg mb-2">üìÖ</div>
                    <div className="text-gray-300 text-lg font-medium">
                      {selectedChannel.id === 'trading-journal' ? 'Aucun trade pour ce jour' : 'Aucun signal pour ce jour'}
                    </div>
                    <div className="text-gray-500 text-sm mt-1">
                      {selectedChannel.id === 'trading-journal' ? 
                        'Ajoute tes trades avec le bouton "+" pour les voir ici' : 
                        'Les signaux appara√Ætront ici quand ils seront cr√©√©s'}
                    </div>
                  </div>
                )}
              </div>

              <div className="mt-6 pt-4 border-t border-gray-600">
                <button
                  onClick={() => setShowSignalsModal(false)}
                  className="w-full bg-gray-600 hover:bg-gray-500 px-4 py-2 rounded text-white"
                >
                  Fermer
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Popup Semaine */}
      {showWeekSignalsModal && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4" key={`week-modal-${selectedAccount}-${selectedWeek}`}>
          <div className="bg-gray-800 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-white">
                  {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? 'Trades de la Semaine' : 'Signaux de la Semaine'} {selectedWeek}
                </h2>
                <button
                  onClick={() => setShowWeekSignalsModal(false)}
                  className="text-gray-400 hover:text-white text-2xl"
                >
                  √ó
                </button>
              </div>

              <div className="space-y-4">
                {(selectedChannel.id === 'trading-journal' || selectedChannel.id === 'journal') ? (
                  // Affichage des trades pour le journal perso
                  getTradesForWeek(selectedWeek).length > 0 ? (
                    getTradesForWeek(selectedWeek).map((trade) => (
                      <div key={trade.id} className="bg-gray-700 rounded-lg p-4 border border-gray-600">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <span className={`px-2 py-1 rounded text-xs font-bold ${
                              trade.type === 'BUY' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                            }`}>
                              {trade.type}
                            </span>
                            <span className="text-lg font-bold text-white">{trade.symbol}</span>
                            <span className="text-sm text-gray-400">{trade.date}</span>
                          </div>
                          <span className={`px-2 py-1 rounded text-xs ${
                            trade.status === 'WIN' ? 'bg-green-600 text-white' :
                            trade.status === 'LOSS' ? 'bg-red-600 text-white' :
                            trade.status === 'BE' ? 'bg-blue-600 text-white' :
                            'bg-yellow-600 text-white'
                          }`}>
                            {trade.status}
                          </span>
                        </div>

                        <div className="grid grid-cols-2 gap-4 mb-3">
                          <div>
                            <span className="text-sm text-gray-400">Entry:</span>
                            <span className="text-white ml-2">{trade.entry}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">Exit:</span>
                            <span className="text-white ml-2">{trade.exit}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">Stop Loss:</span>
                            <span className="text-white ml-2">{trade.stopLoss}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">PnL:</span>
                            <span className={`ml-2 font-bold ${
                              trade.pnl && trade.pnl.includes('-') ? 'text-red-400' : 'text-green-400'
                            }`}>
                              {trade.pnl || 'N/A'}
                            </span>
                          </div>
                        </div>

                        {trade.notes && (
                          <div className="mb-3">
                            <span className="text-sm text-gray-400">Notes:</span>
                            <p className="text-white mt-1">{trade.notes}</p>
                          </div>
                        )}

                        {/* Affichage des images */}
                        {(trade.image1 || trade.image2) && (
                          <div className="mb-3">
                            <span className="text-sm text-gray-400">Images:</span>
                            <div className="flex gap-2 mt-2">
                              {trade.image1 && (
                                <img 
                                  src={trade.image1}
                                  alt="Trade image 1"
                                  className="w-16 h-16 object-cover rounded cursor-pointer hover:opacity-80"
                                  onClick={() => setSelectedImage(trade.image1)}
                                />
                              )}
                              {trade.image2 && (
                                <img 
                                  src={trade.image2}
                                  alt="Trade image 2"
                                  className="w-16 h-16 object-cover rounded cursor-pointer hover:opacity-80"
                                  onClick={() => setSelectedImage(trade.image2)}
                                />
                              )}
                            </div>
                          </div>
                        )}

                        <div className="flex items-center justify-between text-sm text-gray-400">
                          <span>Cr√©√© le {trade.timestamp}</span>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <div className="text-gray-400 text-lg mb-2">üìä</div>
                      <div className="text-gray-300 text-lg font-medium">Aucun trade pour cette semaine</div>
                      <div className="text-gray-500 text-sm mt-1">Tes trades appara√Ætront ici quand tu les ajouteras</div>
                    </div>
                  )
                ) : (
                  // Affichage des signaux pour les autres canaux
                  getSignalsForWeek(selectedWeek).length > 0 ? (
                    getSignalsForWeek(selectedWeek).map((signal) => (
                      <div key={signal.id} className="bg-gray-700 rounded-lg p-4 border border-gray-600">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <span className={`px-2 py-1 rounded text-xs font-bold ${
                              signal.type === 'BUY' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                            }`}>
                              {signal.type}
                            </span>
                            <span className="text-lg font-bold text-white">{signal.symbol}</span>
                            <span className="text-sm text-gray-400">{signal.timeframe}</span>
                          </div>
                          <span className={`px-2 py-1 rounded text-xs ${
                            signal.status === 'WIN' ? 'bg-green-600 text-white' :
                            signal.status === 'LOSS' ? 'bg-red-600 text-white' :
                            signal.status === 'BE' ? 'bg-blue-600 text-white' :
                            'bg-yellow-600 text-white'
                          }`}>
                            {signal.status}
                          </span>
                        </div>

                        <div className="grid grid-cols-2 gap-4 mb-3">
                          <div>
                            <span className="text-sm text-gray-400">Entry:</span>
                            <span className="text-white ml-2">{signal.entry}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">Take Profit:</span>
                            <span className="text-white ml-2">{signal.takeProfit}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">Stop Loss:</span>
                            <span className="text-white ml-2">{signal.stopLoss}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-400">PnL:</span>
                            <span className={`ml-2 font-bold ${
                              signal.pnl && signal.pnl.includes('-') ? 'text-red-400' : 'text-green-400'
                            }`}>
                              {signal.pnl || 'N/A'}
                            </span>
                          </div>
                        </div>

                        {/* Affichage des images */}
                        {(signal.image || signal.attachment_data || signal.closure_image) && (
                          <div className="mb-3">
                            <span className="text-sm text-gray-400">Images:</span>
                            <div className="mt-2 space-y-3 flex flex-col items-center">
                              {(signal.image || signal.attachment_data) && (
                                <div className="flex flex-col items-center">
                                  <span className="text-xs text-gray-500">üì∏ Image de cr√©ation:</span>
                                  <div className="mt-1">
                                    <img 
                                      src={signal.image || signal.attachment_data}
                                      alt="Signal image"
                                      className="w-96 h-96 object-cover rounded cursor-pointer hover:opacity-80 border border-gray-600"
                                      onClick={() => setSelectedImage(signal.image || signal.attachment_data)}
                                    />
                                  </div>
                                </div>
                              )}
                              {signal.closure_image && (
                                <div className="flex flex-col items-center">
                                  <span className="text-xs text-gray-500">üì∏ Image de fermeture:</span>
                                  <div className="mt-1">
                                    <img 
                                      src={signal.closure_image}
                                      alt="Signal closure image"
                                      className="w-96 h-96 object-cover rounded cursor-pointer hover:opacity-80 border border-gray-600"
                                      onClick={() => setSelectedImage(signal.closure_image)}
                                    />
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <div className="text-gray-400 text-lg mb-2">üìÖ</div>
                      <div className="text-gray-300 text-lg font-medium">Aucun signal pour cette semaine</div>
                      <div className="text-gray-500 text-sm mt-1">Les signaux appara√Ætront ici quand ils seront cr√©√©s</div>
                    </div>
                  )
                )}
              </div>

              <div className="mt-6 pt-4 border-t border-gray-600">
                <button
                  onClick={() => setShowWeekSignalsModal(false)}
                  className="w-full bg-gray-600 hover:bg-gray-500 px-4 py-2 rounded text-white"
                >
                  Fermer
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Popup Image */}
      {selectedImage && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4" onClick={() => setSelectedImage(null)}>
          <div className="relative max-w-4xl max-h-[90vh]">
            <img 
              src={selectedImage} 
              alt="Image agrandie"
              className="max-w-full max-h-full object-contain rounded-lg"
              onClick={(e) => e.stopPropagation()}
            />
            <button
              onClick={() => setSelectedImage(null)}
              className="absolute top-4 right-4 bg-black/50 hover:bg-black/70 text-white rounded-full w-10 h-10 flex items-center justify-center text-xl"
            >
              √ó
            </button>
          </div>
        </div>
      )}

      {/* Modal pour ajouter un nouveau compte */}
      {showAddAccountModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 rounded-lg p-6 w-96">
            <h3 className="text-lg font-bold text-white mb-4">Ajouter un nouveau compte</h3>
            
            <div className="mb-4">
              <label className="block text-sm text-gray-300 mb-2">Nom du compte</label>
              <input
                type="text"
                value={newAccountName}
                onChange={(e) => setNewAccountName(e.target.value)}
                placeholder="Ex: Compte Demo, Compte Live..."
                className="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:border-blue-500"
                onKeyPress={(e) => e.key === 'Enter' && handleAddAccount()}
              />
            </div>
            
            <div className="mb-4">
              <label className="block text-sm text-gray-300 mb-2">Balance initiale ($)</label>
              <input
                type="number"
                value={newAccountBalance}
                onChange={(e) => setNewAccountBalance(e.target.value)}
                placeholder="Ex: 10000"
                className="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:border-blue-500"
                onKeyPress={(e) => e.key === 'Enter' && handleAddAccount()}
              />
            </div>
            
            <div className="mb-4">
              <label className="block text-sm text-gray-300 mb-2">Balance minimum ($)</label>
              <input
                type="number"
                value={newAccountMinimum}
                onChange={(e) => setNewAccountMinimum(e.target.value)}
                placeholder="Ex: 5000 (seuil d'arr√™t)"
                className="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:border-blue-500"
                onKeyPress={(e) => e.key === 'Enter' && handleAddAccount()}
              />
            </div>
            
            <div className="flex gap-3">
              <button
                onClick={handleAddAccount}
                className="flex-1 bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg text-white font-medium"
              >
                Ajouter
              </button>
              <button
                onClick={() => {
                  setShowAddAccountModal(false);
                  setNewAccountName('');
                }}
                className="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg text-white font-medium"
              >
                Annuler
              </button>
            </div>
          </div>
        </div>
      )}

    </div>
  );
}
                